; generated by Component: ARM Compiler 5.04 update 1 (build 49) Tool: ArmCC [5040049]
; commandline ArmCC [--c99 --list --debug -c --asm --interleave -o.\_build\uart_host.o --asm_dir=.\_build\ --list_dir=.\_build\ --depend=.\_build\uart_host.d --cpu=Cortex-M0 --apcs=interwork -O0 -I..\include -I..\..\..\rbc_mesh -I..\..\..\rbc_mesh\include -I..\..\..\SDK\bsp -I..\..\..\..\..\..\components\softdevice\s110\headers -I..\..\..\..\..\..\components\toolchain\gcc -I..\..\..\..\..\..\components\libraries\util -I..\..\..\..\..\..\components\ble\common -I..\..\..\..\..\..\components\drivers_nrf\hal -I..\..\..\..\..\..\components\drivers_nrf\spi_slave -I..\..\..\..\..\..\components\softdevice\common\softdevice_handler -I..\..\..\..\..\..\components\libraries\fifo -I..\..\..\..\..\..\components\drivers_nrf\uart -I..\..\..\..\..\..\components\drivers_nrf\gpiote -I..\..\..\..\..\..\components\drivers_nrf\config -I..\..\..\..\..\..\components\drivers_nrf\common -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\4.1.0\CMSIS\Include -IC:\Keil_v5\ARM\PACK\NordicSemiconductor\nRF_DeviceFamilyPack\7.2.1\Device\Include -D__MICROLIB -DNRF51 -DBOARD_RHC -DNRF51 -DBLE_STACK_SUPPORT_REQD -DS110 -DSOFTDEVICE_PRESENT --omf_browse=.\_build\uart_host.crf ..\UART_Host.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  Host_RX_process_char PROC
;;;59     */
;;;60     void Host_RX_process_char( unsigned char data)
000000  b510              PUSH     {r4,lr}
;;;61     {
000002  4604              MOV      r4,r0
;;;62         if(RF_Rx_Status == START_MSG){
000004  4855              LDR      r0,|L1.348|
000006  7800              LDRB     r0,[r0,#0]  ; RF_Rx_Status
000008  2800              CMP      r0,#0
00000a  d110              BNE      |L1.46|
;;;63             if(data == Host_START_CHAR){
00000c  2c23              CMP      r4,#0x23
00000e  d145              BNE      |L1.156|
;;;64                 RF_Rx_Status = GET_CMD;
000010  2001              MOVS     r0,#1
000012  4952              LDR      r1,|L1.348|
000014  7008              STRB     r0,[r1,#0]
;;;65                 BLE_RxBuf_index = 0;
000016  2000              MOVS     r0,#0
000018  4951              LDR      r1,|L1.352|
00001a  7008              STRB     r0,[r1,#0]
;;;66                 BLE_Rx_buf[BLE_RxBuf_index++] = data;
00001c  4608              MOV      r0,r1
00001e  7801              LDRB     r1,[r0,#0]  ; BLE_RxBuf_index
000020  7800              LDRB     r0,[r0,#0]  ; BLE_RxBuf_index
000022  1c40              ADDS     r0,r0,#1
000024  4a4e              LDR      r2,|L1.352|
000026  7010              STRB     r0,[r2,#0]
000028  484e              LDR      r0,|L1.356|
00002a  5444              STRB     r4,[r0,r1]
00002c  e036              B        |L1.156|
                  |L1.46|
;;;67             }
;;;68         }else if(RF_Rx_Status == GET_CMD){
00002e  484b              LDR      r0,|L1.348|
000030  7800              LDRB     r0,[r0,#0]  ; RF_Rx_Status
000032  2801              CMP      r0,#1
000034  d12f              BNE      |L1.150|
;;;69             BLE_Rx_buf[BLE_RxBuf_index++] = data;
000036  484a              LDR      r0,|L1.352|
000038  7801              LDRB     r1,[r0,#0]  ; BLE_RxBuf_index
00003a  7800              LDRB     r0,[r0,#0]  ; BLE_RxBuf_index
00003c  1c40              ADDS     r0,r0,#1
00003e  4a48              LDR      r2,|L1.352|
000040  7010              STRB     r0,[r2,#0]
000042  4848              LDR      r0,|L1.356|
000044  5444              STRB     r4,[r0,r1]
;;;70             if(BLE_RxBuf_index >= MAX_RX_BUF_SIZE)
000046  4610              MOV      r0,r2
000048  7800              LDRB     r0,[r0,#0]  ; BLE_RxBuf_index
00004a  2832              CMP      r0,#0x32
00004c  db04              BLT      |L1.88|
;;;71             {
;;;72                 RF_Rx_Status = START_MSG;
00004e  2000              MOVS     r0,#0
000050  4942              LDR      r1,|L1.348|
000052  7008              STRB     r0,[r1,#0]
;;;73                 BLE_RxBuf_index = 0;
000054  4611              MOV      r1,r2
000056  7008              STRB     r0,[r1,#0]
                  |L1.88|
;;;74             }
;;;75             if(data == Host_END_CHAR)
000058  2c2a              CMP      r4,#0x2a
00005a  d11f              BNE      |L1.156|
;;;76             {
;;;77                 rbc_mesh_value_set(1, BLE_Rx_buf, BLE_RxBuf_index);
00005c  4840              LDR      r0,|L1.352|
00005e  7802              LDRB     r2,[r0,#0]  ; BLE_RxBuf_index
000060  4940              LDR      r1,|L1.356|
000062  2001              MOVS     r0,#1
000064  f7fffffe          BL       rbc_mesh_value_set
;;;78                 nrf_gpio_pin_toggle(LED_2);
000068  2013              MOVS     r0,#0x13
00006a  2301              MOVS     r3,#1
00006c  4083              LSLS     r3,r3,r0
00006e  4619              MOV      r1,r3
000070  4b3d              LDR      r3,|L1.360|
000072  685b              LDR      r3,[r3,#4]
000074  40c3              LSRS     r3,r3,r0
000076  07da              LSLS     r2,r3,#31
000078  0fd2              LSRS     r2,r2,#31
00007a  2a00              CMP      r2,#0
00007c  d102              BNE      |L1.132|
00007e  4b3a              LDR      r3,|L1.360|
000080  6099              STR      r1,[r3,#8]
000082  e001              B        |L1.136|
                  |L1.132|
000084  4b38              LDR      r3,|L1.360|
000086  60d9              STR      r1,[r3,#0xc]
                  |L1.136|
000088  bf00              NOP      
;;;79                 BLE_RxBuf_index = 0;
00008a  2000              MOVS     r0,#0
00008c  4934              LDR      r1,|L1.352|
00008e  7008              STRB     r0,[r1,#0]
;;;80                 RF_Rx_Status = START_MSG;
000090  4932              LDR      r1,|L1.348|
000092  7008              STRB     r0,[r1,#0]
000094  e002              B        |L1.156|
                  |L1.150|
;;;81             }
;;;82         }else{
;;;83             RF_Rx_Status = START_MSG;
000096  2000              MOVS     r0,#0
000098  4930              LDR      r1,|L1.348|
00009a  7008              STRB     r0,[r1,#0]
                  |L1.156|
;;;84         }
;;;85     }
00009c  bd10              POP      {r4,pc}
;;;86     
                          ENDP

                  uart_event_handle PROC
;;;94     /**@snippet [Handling the data received over UART] */
;;;95     static void uart_event_handle(app_uart_evt_t * p_event)
00009e  b538              PUSH     {r3-r5,lr}
;;;96     {
0000a0  4604              MOV      r4,r0
;;;97     uint8_t tmp_data;
;;;98     
;;;99         switch (p_event->evt_type)
0000a2  7820              LDRB     r0,[r4,#0]
0000a4  2800              CMP      r0,#0
0000a6  d004              BEQ      |L1.178|
0000a8  2801              CMP      r0,#1
0000aa  d012              BEQ      |L1.210|
0000ac  2802              CMP      r0,#2
0000ae  d118              BNE      |L1.226|
0000b0  e007              B        |L1.194|
                  |L1.178|
;;;100        {
;;;101            case APP_UART_DATA_READY:
;;;102                UNUSED_VARIABLE(app_uart_get(&tmp_data));
0000b2  4668              MOV      r0,sp
0000b4  f7fffffe          BL       app_uart_get
;;;103                Host_RX_process_char(tmp_data);
0000b8  4668              MOV      r0,sp
0000ba  7800              LDRB     r0,[r0,#0]
0000bc  f7fffffe          BL       Host_RX_process_char
;;;104                break;
0000c0  e010              B        |L1.228|
                  |L1.194|
;;;105    
;;;106            case APP_UART_COMMUNICATION_ERROR:
;;;107                APP_ERROR_HANDLER(p_event->data.error_communication);
0000c2  bf00              NOP      
0000c4  2200              MOVS     r2,#0
0000c6  4611              MOV      r1,r2
0000c8  6860              LDR      r0,[r4,#4]
0000ca  f7fffffe          BL       app_error_handler
0000ce  bf00              NOP      
;;;108                break;
0000d0  e008              B        |L1.228|
                  |L1.210|
;;;109    
;;;110            case APP_UART_FIFO_ERROR:
;;;111                APP_ERROR_HANDLER(p_event->data.error_code);
0000d2  bf00              NOP      
0000d4  2200              MOVS     r2,#0
0000d6  4611              MOV      r1,r2
0000d8  6860              LDR      r0,[r4,#4]
0000da  f7fffffe          BL       app_error_handler
0000de  bf00              NOP      
;;;112                break;
0000e0  e000              B        |L1.228|
                  |L1.226|
;;;113    
;;;114            default:
;;;115                break;
0000e2  bf00              NOP      
                  |L1.228|
0000e4  bf00              NOP                            ;104
;;;116        }
;;;117    }
0000e6  bd38              POP      {r3-r5,pc}
;;;118    /**@snippet [Handling the data received over UART] */
                          ENDP

                  uart_init PROC
;;;124    
;;;125    void uart_init(void)
0000e8  b530              PUSH     {r4,r5,lr}
;;;126    {
0000ea  b089              SUB      sp,sp,#0x24
;;;127        uint32_t                     err_code;
;;;128        const app_uart_comm_params_t comm_params =
0000ec  4a1f              LDR      r2,|L1.364|
0000ee  ca07              LDM      r2,{r0-r2}
0000f0  ab06              ADD      r3,sp,#0x18
0000f2  c307              STM      r3!,{r0-r2}
;;;129        {
;;;130            RX_PIN_NUMBER,
;;;131            TX_PIN_NUMBER,
;;;132            RTS_PIN_NUMBER,
;;;133            CTS_PIN_NUMBER,
;;;134            APP_UART_FLOW_CONTROL_DISABLED,
;;;135            false,
;;;136            UART_BAUDRATE_BAUDRATE_Baud38400
;;;137        };
;;;138    
;;;139        APP_UART_FIFO_INIT( &comm_params,
0000f4  bf00              NOP      
0000f6  2000              MOVS     r0,#0
0000f8  9005              STR      r0,[sp,#0x14]
0000fa  481d              LDR      r0,|L1.368|
0000fc  9001              STR      r0,[sp,#4]
0000fe  20ff              MOVS     r0,#0xff
000100  3001              ADDS     r0,#1
000102  9002              STR      r0,[sp,#8]
000104  481b              LDR      r0,|L1.372|
000106  9003              STR      r0,[sp,#0xc]
000108  20ff              MOVS     r0,#0xff
00010a  3001              ADDS     r0,#1
00010c  9004              STR      r0,[sp,#0x10]
00010e  a805              ADD      r0,sp,#0x14
000110  2303              MOVS     r3,#3
000112  4a19              LDR      r2,|L1.376|
000114  a901              ADD      r1,sp,#4
000116  9000              STR      r0,[sp,#0]
000118  a806              ADD      r0,sp,#0x18
00011a  f7fffffe          BL       app_uart_init
00011e  4604              MOV      r4,r0
000120  bf00              NOP      
;;;140                           UART_RX_BUF_SIZE,
;;;141                           UART_TX_BUF_SIZE,
;;;142                           uart_event_handle,
;;;143                           APP_IRQ_PRIORITY_LOW,
;;;144                           err_code);
;;;145        APP_ERROR_CHECK(err_code);
000122  bf00              NOP      
000124  4625              MOV      r5,r4
000126  2d00              CMP      r5,#0
000128  d006              BEQ      |L1.312|
00012a  bf00              NOP      
00012c  2200              MOVS     r2,#0
00012e  4611              MOV      r1,r2
000130  4628              MOV      r0,r5
000132  f7fffffe          BL       app_error_handler
000136  bf00              NOP      
                  |L1.312|
000138  bf00              NOP      
;;;146    }
00013a  b009              ADD      sp,sp,#0x24
00013c  bd30              POP      {r4,r5,pc}
;;;147    
                          ENDP

                  Uart_data_write PROC
;;;148    void Uart_data_write(uint8_t * p_data, uint16_t length)
00013e  b570              PUSH     {r4-r6,lr}
;;;149    {
000140  4605              MOV      r5,r0
000142  460e              MOV      r6,r1
;;;150        for (uint32_t i = 0; i < length; i++)
000144  2400              MOVS     r4,#0
000146  e006              B        |L1.342|
                  |L1.328|
;;;151        {
;;;152            while(app_uart_put(p_data[i]) != NRF_SUCCESS);
000148  bf00              NOP      
                  |L1.330|
00014a  5d28              LDRB     r0,[r5,r4]
00014c  f7fffffe          BL       app_uart_put
000150  2800              CMP      r0,#0
000152  d1fa              BNE      |L1.330|
000154  1c64              ADDS     r4,r4,#1              ;150
                  |L1.342|
000156  42b4              CMP      r4,r6                 ;150
000158  d3f6              BCC      |L1.328|
;;;153        }
;;;154    }
00015a  bd70              POP      {r4-r6,pc}
;;;155    
                          ENDP

                  |L1.348|
                          DCD      RF_Rx_Status
                  |L1.352|
                          DCD      BLE_RxBuf_index
                  |L1.356|
                          DCD      BLE_Rx_buf
                  |L1.360|
                          DCD      0x50000500
                  |L1.364|
                          DCD      ||.constdata||
                  |L1.368|
                          DCD      rx_buf
                  |L1.372|
                          DCD      tx_buf
                  |L1.376|
                          DCD      uart_event_handle

                          AREA ||.bss||, DATA, NOINIT, ALIGN=0

                  BLE_Rx_buf
                          %        50
                  rx_buf
                          %        256
                  tx_buf
                          %        256

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

000000  0b09080a          DCB      0x0b,0x09,0x08,0x0a
000004  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      0x009d5000

                          AREA ||.data||, DATA, ALIGN=0

                  RF_Rx_Status
000000  00                DCB      0x00
                  BLE_RxBuf_index
000001  00                DCB      0x00

;*** Start embedded assembler ***

#line 1 "..\\UART_Host.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___11_UART_Host_c_b2d80e0f____REV16|
#line 129 "..\\..\\..\\..\\..\\..\\components\\toolchain\\gcc\\core_cmInstr.h"
|__asm___11_UART_Host_c_b2d80e0f____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___11_UART_Host_c_b2d80e0f____REVSH|
#line 144
|__asm___11_UART_Host_c_b2d80e0f____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
