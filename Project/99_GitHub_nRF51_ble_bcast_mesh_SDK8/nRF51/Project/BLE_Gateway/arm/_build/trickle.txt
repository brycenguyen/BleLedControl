; generated by Component: ARM Compiler 5.04 update 1 (build 49) Tool: ArmCC [5040049]
; commandline ArmCC [--c99 --list --debug -c --asm --interleave -o.\_build\trickle.o --asm_dir=.\_build\ --list_dir=.\_build\ --depend=.\_build\trickle.d --cpu=Cortex-M0 --apcs=interwork -O0 -I..\include -I..\..\..\rbc_mesh -I..\..\..\rbc_mesh\include -I..\..\..\SDK\bsp -I..\..\..\..\..\..\components\softdevice\s110\headers -I..\..\..\..\..\..\components\toolchain\gcc -I..\..\..\..\..\..\components\libraries\util -I..\..\..\..\..\..\components\ble\common -I..\..\..\..\..\..\components\drivers_nrf\hal -I..\..\..\..\..\..\components\drivers_nrf\spi_slave -I..\..\..\..\..\..\components\softdevice\common\softdevice_handler -I..\..\..\..\..\..\components\libraries\fifo -I..\..\..\..\..\..\components\drivers_nrf\uart -I..\..\..\..\..\..\components\drivers_nrf\gpiote -I..\..\..\..\..\..\components\drivers_nrf\config -I..\..\..\..\..\..\components\drivers_nrf\common -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\4.1.0\CMSIS\Include -IC:\Keil_v5\ARM\PACK\NordicSemiconductor\nRF_DeviceFamilyPack\7.2.1\Device\Include -D__MICROLIB -DNRF51 -DBOARD_RHC -DNRF51 -DBLE_STACK_SUPPORT_REQD -DS110 -DSOFTDEVICE_PRESENT --omf_browse=.\_build\trickle.crf ..\..\..\rbc_mesh\src\trickle.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  trickle_interval_begin PROC
;;;71     */
;;;72     static void trickle_interval_begin(trickle_t* trickle)
000000  b5fe              PUSH     {r1-r7,lr}
;;;73     {
000002  4604              MOV      r4,r0
;;;74         trickle->c = 0;
000004  2000              MOVS     r0,#0
000006  7620              STRB     r0,[r4,#0x18]
;;;75     
;;;76         uint32_t rand_number =  ((uint32_t) rng_vals[(rng_index++) & 0x3F])       |
000008  48a3              LDR      r0,|L1.664|
00000a  7801              LDRB     r1,[r0,#0]  ; rng_index
00000c  7800              LDRB     r0,[r0,#0]  ; rng_index
00000e  1c40              ADDS     r0,r0,#1
000010  4aa1              LDR      r2,|L1.664|
000012  7010              STRB     r0,[r2,#0]
000014  0688              LSLS     r0,r1,#26
000016  0e80              LSRS     r0,r0,#26
000018  49a0              LDR      r1,|L1.668|
00001a  5c09              LDRB     r1,[r1,r0]
00001c  4610              MOV      r0,r2
00001e  7802              LDRB     r2,[r0,#0]  ; rng_index
000020  7800              LDRB     r0,[r0,#0]  ; rng_index
000022  1c40              ADDS     r0,r0,#1
000024  4b9c              LDR      r3,|L1.664|
000026  7018              STRB     r0,[r3,#0]
000028  0690              LSLS     r0,r2,#26
00002a  0e80              LSRS     r0,r0,#26
00002c  4a9b              LDR      r2,|L1.668|
00002e  5c10              LDRB     r0,[r2,r0]
000030  0200              LSLS     r0,r0,#8
000032  4308              ORRS     r0,r0,r1
000034  4619              MOV      r1,r3
000036  780a              LDRB     r2,[r1,#0]  ; rng_index
000038  7809              LDRB     r1,[r1,#0]  ; rng_index
00003a  1c49              ADDS     r1,r1,#1
00003c  7019              STRB     r1,[r3,#0]
00003e  0691              LSLS     r1,r2,#26
000040  0e89              LSRS     r1,r1,#26
000042  4a96              LDR      r2,|L1.668|
000044  5c51              LDRB     r1,[r2,r1]
000046  0409              LSLS     r1,r1,#16
000048  4308              ORRS     r0,r0,r1
00004a  4619              MOV      r1,r3
00004c  780a              LDRB     r2,[r1,#0]  ; rng_index
00004e  7809              LDRB     r1,[r1,#0]  ; rng_index
000050  1c49              ADDS     r1,r1,#1
000052  7019              STRB     r1,[r3,#0]
000054  0691              LSLS     r1,r2,#26
000056  0e89              LSRS     r1,r1,#26
000058  4a90              LDR      r2,|L1.668|
00005a  5c51              LDRB     r1,[r2,r1]
00005c  0609              LSLS     r1,r1,#24
00005e  4308              ORRS     r0,r0,r1
000060  4607              MOV      r7,r0
;;;77                                 ((uint32_t) rng_vals[(rng_index++) & 0x3F]) << 8  |
;;;78                                 ((uint32_t) rng_vals[(rng_index++) & 0x3F]) << 16 |
;;;79                                 ((uint32_t) rng_vals[(rng_index++) & 0x3F]) << 24;
;;;80     
;;;81         uint64_t i_half = trickle->i_relative / 2;
000062  6925              LDR      r5,[r4,#0x10]
000064  6961              LDR      r1,[r4,#0x14]
000066  2202              MOVS     r2,#2
000068  2300              MOVS     r3,#0
00006a  4628              MOV      r0,r5
00006c  f7fffffe          BL       __aeabi_uldivmod
000070  9101              STR      r1,[sp,#4]
000072  9000              STR      r0,[sp,#0]
;;;82         trickle->t = g_trickle_time + i_half + (rand_number % i_half);
000074  4638              MOV      r0,r7
000076  2100              MOVS     r1,#0
000078  9b01              LDR      r3,[sp,#4]
00007a  9a00              LDR      r2,[sp,#0]
00007c  f7fffffe          BL       __aeabi_uldivmod
000080  4887              LDR      r0,|L1.672|
000082  6806              LDR      r6,[r0,#0]  ; g_trickle_time
000084  6845              LDR      r5,[r0,#4]  ; g_trickle_time
000086  9901              LDR      r1,[sp,#4]
000088  9800              LDR      r0,[sp,#0]
00008a  1830              ADDS     r0,r6,r0
00008c  414d              ADCS     r5,r5,r1
00008e  1810              ADDS     r0,r2,r0
000090  416b              ADCS     r3,r3,r5
000092  6063              STR      r3,[r4,#4]
000094  6020              STR      r0,[r4,#0]
;;;83         trickle->i = g_trickle_time + trickle->i_relative;
000096  6923              LDR      r3,[r4,#0x10]
000098  6960              LDR      r0,[r4,#0x14]
00009a  4a81              LDR      r2,|L1.672|
00009c  ca06              LDM      r2,{r1,r2}
00009e  1859              ADDS     r1,r3,r1
0000a0  4150              ADCS     r0,r0,r2
0000a2  60a1              STR      r1,[r4,#8]
0000a4  60e0              STR      r0,[r4,#0xc]
;;;84     
;;;85         trickle->trickle_flags &= ~(1 << TRICKLE_FLAGS_T_DONE_Pos);
0000a6  7e60              LDRB     r0,[r4,#0x19]
0000a8  0840              LSRS     r0,r0,#1
0000aa  0040              LSLS     r0,r0,#1
0000ac  7660              STRB     r0,[r4,#0x19]
;;;86     }
0000ae  bdfe              POP      {r1-r7,pc}
;;;87     
                          ENDP

                  trickle_setup PROC
;;;92     
;;;93     void trickle_setup(uint32_t i_min, uint32_t i_max, uint8_t k)
0000b0  b5f7              PUSH     {r0-r2,r4-r7,lr}
;;;94     {
0000b2  b082              SUB      sp,sp,#8
0000b4  4606              MOV      r6,r0
;;;95         g_i_min = i_min;
0000b6  487b              LDR      r0,|L1.676|
0000b8  6006              STR      r6,[r0,#0]  ; g_i_min
;;;96         g_i_max = i_max;
0000ba  497b              LDR      r1,|L1.680|
0000bc  9803              LDR      r0,[sp,#0xc]
0000be  6008              STR      r0,[r1,#0]  ; g_i_max
;;;97         g_k = k;
0000c0  497a              LDR      r1,|L1.684|
0000c2  9804              LDR      r0,[sp,#0x10]
0000c4  7008              STRB     r0,[r1,#0]
;;;98         uint32_t error_code;
;;;99         rng_index = 0;
0000c6  2000              MOVS     r0,#0
0000c8  4973              LDR      r1,|L1.664|
0000ca  7008              STRB     r0,[r1,#0]
;;;100    
;;;101        /* Fill rng pool */
;;;102        uint8_t bytes_available;
;;;103        do
0000cc  bf00              NOP      
                  |L1.206|
;;;104        {
;;;105            error_code =
0000ce  a801              ADD      r0,sp,#4
0000d0  df39              SVC      #0x39
0000d2  4604              MOV      r4,r0
;;;106                sd_rand_application_bytes_available_get(&bytes_available);
;;;107            APP_ERROR_CHECK(error_code);
0000d4  bf00              NOP      
0000d6  4625              MOV      r5,r4
0000d8  2d00              CMP      r5,#0
0000da  d006              BEQ      |L1.234|
0000dc  bf00              NOP      
0000de  2200              MOVS     r2,#0
0000e0  4611              MOV      r1,r2
0000e2  4628              MOV      r0,r5
0000e4  f7fffffe          BL       app_error_handler
0000e8  bf00              NOP      
                  |L1.234|
0000ea  bf00              NOP      
;;;108            if (bytes_available > 0)
0000ec  4668              MOV      r0,sp
0000ee  7900              LDRB     r0,[r0,#4]
0000f0  2800              CMP      r0,#0
0000f2  dd28              BLE      |L1.326|
;;;109            {
;;;110                uint8_t byte_count =
0000f4  4868              LDR      r0,|L1.664|
0000f6  7800              LDRB     r0,[r0,#0]  ; rng_index
0000f8  2140              MOVS     r1,#0x40
0000fa  1a08              SUBS     r0,r1,r0
0000fc  4669              MOV      r1,sp
0000fe  7909              LDRB     r1,[r1,#4]
000100  4288              CMP      r0,r1
000102  da04              BGE      |L1.270|
;;;111                    ((bytes_available > TRICKLE_RNG_POOL_SIZE - rng_index)?
;;;112                    (TRICKLE_RNG_POOL_SIZE - rng_index) :
000104  4864              LDR      r0,|L1.664|
000106  7800              LDRB     r0,[r0,#0]  ; rng_index
000108  2140              MOVS     r1,#0x40
00010a  1a08              SUBS     r0,r1,r0
00010c  e001              B        |L1.274|
                  |L1.270|
;;;113                    (bytes_available));
00010e  4668              MOV      r0,sp
000110  7900              LDRB     r0,[r0,#4]
                  |L1.274|
000112  b2c5              UXTB     r5,r0
;;;114    
;;;115                error_code =
000114  4961              LDR      r1,|L1.668|
000116  4a60              LDR      r2,|L1.664|
000118  7812              LDRB     r2,[r2,#0]  ; rng_index
00011a  1888              ADDS     r0,r1,r2
00011c  4629              MOV      r1,r5
00011e  df3a              SVC      #0x3a
000120  4604              MOV      r4,r0
;;;116                    sd_rand_application_vector_get(&rng_vals[rng_index],
;;;117                    byte_count);
;;;118                APP_ERROR_CHECK(error_code);
000122  bf00              NOP      
000124  4627              MOV      r7,r4
000126  2f00              CMP      r7,#0
000128  d006              BEQ      |L1.312|
00012a  bf00              NOP      
00012c  2200              MOVS     r2,#0
00012e  4611              MOV      r1,r2
000130  4638              MOV      r0,r7
000132  f7fffffe          BL       app_error_handler
000136  bf00              NOP      
                  |L1.312|
000138  bf00              NOP      
;;;119    
;;;120                rng_index += byte_count;
00013a  4857              LDR      r0,|L1.664|
00013c  7800              LDRB     r0,[r0,#0]  ; rng_index
00013e  1940              ADDS     r0,r0,r5
000140  4955              LDR      r1,|L1.664|
000142  7008              STRB     r0,[r1,#0]
;;;121            }
000144  bf00              NOP      
                  |L1.326|
;;;122        } while (rng_index < TRICKLE_RNG_POOL_SIZE);
000146  4854              LDR      r0,|L1.664|
000148  7800              LDRB     r0,[r0,#0]  ; rng_index
00014a  2840              CMP      r0,#0x40
00014c  dbbf              BLT      |L1.206|
;;;123    
;;;124    }
00014e  b005              ADD      sp,sp,#0x14
000150  bdf0              POP      {r4-r7,pc}
;;;125    
                          ENDP

                  trickle_time_increment PROC
;;;126    
;;;127    void trickle_time_increment(void)
000152  4853              LDR      r0,|L1.672|
;;;128    {
;;;129        /* step global time */
;;;130        ++g_trickle_time;
000154  6803              LDR      r3,[r0,#0]  ; g_trickle_time
000156  6840              LDR      r0,[r0,#4]  ; g_trickle_time
000158  2100              MOVS     r1,#0
00015a  1c5a              ADDS     r2,r3,#1
00015c  4148              ADCS     r0,r0,r1
00015e  4950              LDR      r1,|L1.672|
000160  600a              STR      r2,[r1,#0]  ; g_trickle_time
000162  6048              STR      r0,[r1,#4]  ; g_trickle_time
;;;131    }
000164  4770              BX       lr
;;;132    
                          ENDP

                  trickle_time_update PROC
;;;133    void trickle_time_update(uint64_t time)
000166  4a4e              LDR      r2,|L1.672|
;;;134    {
;;;135        g_trickle_time = time;
000168  c203              STM      r2!,{r0,r1}
;;;136    }
00016a  4770              BX       lr
;;;137    
                          ENDP

                  trickle_init PROC
;;;138    
;;;139    void trickle_init(trickle_t* trickle)
00016c  b510              PUSH     {r4,lr}
;;;140    {
00016e  4604              MOV      r4,r0
;;;141        trickle->i_relative = 2 * g_i_min;
000170  484c              LDR      r0,|L1.676|
000172  6800              LDR      r0,[r0,#0]  ; g_i_min
000174  0040              LSLS     r0,r0,#1
000176  2100              MOVS     r1,#0
000178  6120              STR      r0,[r4,#0x10]
00017a  6161              STR      r1,[r4,#0x14]
;;;142    
;;;143        trickle->trickle_flags = 0;
00017c  2000              MOVS     r0,#0
00017e  7660              STRB     r0,[r4,#0x19]
;;;144    
;;;145        trickle_interval_begin(trickle);
000180  4620              MOV      r0,r4
000182  f7fffffe          BL       trickle_interval_begin
;;;146    }
000186  bd10              POP      {r4,pc}
;;;147    
                          ENDP

                  trickle_rx_consistent PROC
;;;148    void trickle_rx_consistent(trickle_t* trickle)
000188  7e01              LDRB     r1,[r0,#0x18]
;;;149    {
;;;150        ++trickle->c;
00018a  1c49              ADDS     r1,r1,#1
00018c  7601              STRB     r1,[r0,#0x18]
;;;151    }
00018e  4770              BX       lr
;;;152    
                          ENDP

                  trickle_timer_reset PROC
;;;160    
;;;161    void trickle_timer_reset(trickle_t* trickle)
000190  b510              PUSH     {r4,lr}
;;;162    {
000192  4604              MOV      r4,r0
;;;163        trickle->trickle_flags &= ~(1 << TRICKLE_FLAGS_T_DONE_Pos);
000194  7e60              LDRB     r0,[r4,#0x19]
000196  0840              LSRS     r0,r0,#1
000198  0040              LSLS     r0,r0,#1
00019a  7660              STRB     r0,[r4,#0x19]
;;;164        trickle->i_relative = g_i_min;
00019c  4841              LDR      r0,|L1.676|
00019e  6800              LDR      r0,[r0,#0]  ; g_i_min
0001a0  2100              MOVS     r1,#0
0001a2  6120              STR      r0,[r4,#0x10]
0001a4  6161              STR      r1,[r4,#0x14]
;;;165    
;;;166    
;;;167        trickle_interval_begin(trickle);
0001a6  4620              MOV      r0,r4
0001a8  f7fffffe          BL       trickle_interval_begin
;;;168    }
0001ac  bd10              POP      {r4,pc}
;;;169    
                          ENDP

                  trickle_rx_inconsistent PROC
;;;152    
;;;153    void trickle_rx_inconsistent(trickle_t* trickle)
0001ae  b510              PUSH     {r4,lr}
;;;154    {
0001b0  4604              MOV      r4,r0
;;;155        if (trickle->i_relative > g_i_min)
0001b2  6921              LDR      r1,[r4,#0x10]
0001b4  6962              LDR      r2,[r4,#0x14]
0001b6  483b              LDR      r0,|L1.676|
0001b8  6800              LDR      r0,[r0,#0]  ; g_i_min
0001ba  2300              MOVS     r3,#0
0001bc  1a40              SUBS     r0,r0,r1
0001be  4193              SBCS     r3,r3,r2
0001c0  d202              BCS      |L1.456|
;;;156        {
;;;157            trickle_timer_reset(trickle);
0001c2  4620              MOV      r0,r4
0001c4  f7fffffe          BL       trickle_timer_reset
                  |L1.456|
;;;158        }
;;;159    }
0001c8  bd10              POP      {r4,pc}
;;;160    
                          ENDP

                  trickle_register_tx PROC
;;;169    
;;;170    void trickle_register_tx(trickle_t* trickle)
0001ca  7e41              LDRB     r1,[r0,#0x19]
;;;171    {
;;;172        trickle->trickle_flags |= (1 << TRICKLE_FLAGS_T_DONE_Pos);
0001cc  2201              MOVS     r2,#1
0001ce  4311              ORRS     r1,r1,r2
0001d0  7641              STRB     r1,[r0,#0x19]
;;;173    }
0001d2  4770              BX       lr
;;;174    
                          ENDP

                  trickle_step PROC
;;;175    void trickle_step(trickle_t* trickle, bool* out_do_tx)
0001d4  b5f3              PUSH     {r0,r1,r4-r7,lr}
;;;176    {
0001d6  b081              SUB      sp,sp,#4
0001d8  4604              MOV      r4,r0
;;;177        *out_do_tx = false;
0001da  2100              MOVS     r1,#0
0001dc  9802              LDR      r0,[sp,#8]
0001de  7001              STRB     r1,[r0,#0]
;;;178    
;;;179        if (trickle->trickle_flags & (1 << TRICKLE_FLAGS_T_DONE_Pos)) /* i is next timeout for this instance */
0001e0  7e60              LDRB     r0,[r4,#0x19]
0001e2  07c0              LSLS     r0,r0,#31
0001e4  0fc0              LSRS     r0,r0,#31
0001e6  2800              CMP      r0,#0
0001e8  d031              BEQ      |L1.590|
;;;180        {
;;;181            if (trickle->i <= g_trickle_time)
0001ea  68a0              LDR      r0,[r4,#8]
0001ec  68e1              LDR      r1,[r4,#0xc]
0001ee  4b2c              LDR      r3,|L1.672|
0001f0  cb0c              LDM      r3,{r2,r3}
0001f2  1a10              SUBS     r0,r2,r0
0001f4  418b              SBCS     r3,r3,r1
0001f6  d33f              BCC      |L1.632|
;;;182            {
;;;183                /* double value of i */
;;;184                trickle->i_relative = (trickle->i_relative * 2 < g_i_max * g_i_min)?
0001f8  6925              LDR      r5,[r4,#0x10]
0001fa  6966              LDR      r6,[r4,#0x14]
0001fc  2702              MOVS     r7,#2
0001fe  2000              MOVS     r0,#0
000200  9000              STR      r0,[sp,#0]
000202  4628              MOV      r0,r5
000204  4631              MOV      r1,r6
000206  463a              MOV      r2,r7
000208  9b00              LDR      r3,[sp,#0]
00020a  f7fffffe          BL       __aeabi_lmul
00020e  4a26              LDR      r2,|L1.680|
000210  6812              LDR      r2,[r2,#0]  ; g_i_max
000212  4b24              LDR      r3,|L1.676|
000214  681b              LDR      r3,[r3,#0]  ; g_i_min
000216  435a              MULS     r2,r3,r2
000218  2300              MOVS     r3,#0
00021a  1a80              SUBS     r0,r0,r2
00021c  4199              SBCS     r1,r1,r3
00021e  d20a              BCS      |L1.566|
;;;185                                trickle->i_relative * 2 :
000220  6925              LDR      r5,[r4,#0x10]
000222  6966              LDR      r6,[r4,#0x14]
000224  2000              MOVS     r0,#0
000226  9000              STR      r0,[sp,#0]
000228  4628              MOV      r0,r5
00022a  4631              MOV      r1,r6
00022c  463a              MOV      r2,r7
00022e  9b00              LDR      r3,[sp,#0]
000230  f7fffffe          BL       __aeabi_lmul
000234  e005              B        |L1.578|
                  |L1.566|
;;;186                                g_i_max * g_i_min;
000236  481c              LDR      r0,|L1.680|
000238  6800              LDR      r0,[r0,#0]  ; g_i_max
00023a  491a              LDR      r1,|L1.676|
00023c  6809              LDR      r1,[r1,#0]  ; g_i_min
00023e  4348              MULS     r0,r1,r0
000240  2100              MOVS     r1,#0
                  |L1.578|
000242  6120              STR      r0,[r4,#0x10]
000244  6161              STR      r1,[r4,#0x14]
;;;187    
;;;188                trickle_interval_begin(trickle);
000246  4620              MOV      r0,r4
000248  f7fffffe          BL       trickle_interval_begin
00024c  e014              B        |L1.632|
                  |L1.590|
;;;189            }
;;;190        }
;;;191        else /* t is next timeout for this instance */
;;;192        {
;;;193            if (trickle->t <= g_trickle_time)
00024e  4a14              LDR      r2,|L1.672|
000250  6861              LDR      r1,[r4,#4]
000252  6820              LDR      r0,[r4,#0]
000254  6813              LDR      r3,[r2,#0]  ; g_trickle_time
000256  6852              LDR      r2,[r2,#4]  ; g_trickle_time
000258  1a18              SUBS     r0,r3,r0
00025a  418a              SBCS     r2,r2,r1
00025c  d30c              BCC      |L1.632|
;;;194            {
;;;195                if (trickle->c < g_k)
00025e  7e20              LDRB     r0,[r4,#0x18]
000260  4912              LDR      r1,|L1.684|
000262  7809              LDRB     r1,[r1,#0]  ; g_k
000264  4288              CMP      r0,r1
000266  da03              BGE      |L1.624|
;;;196                {
;;;197                    *out_do_tx = true;
000268  2101              MOVS     r1,#1
00026a  9802              LDR      r0,[sp,#8]
00026c  7001              STRB     r1,[r0,#0]
00026e  e003              B        |L1.632|
                  |L1.624|
;;;198                }
;;;199                else /* no tx this interval, tell trickle to prepare
;;;200                    for interval timeout*/
;;;201                {
;;;202                    trickle->trickle_flags |= (1 << TRICKLE_FLAGS_T_DONE_Pos);
000270  7e60              LDRB     r0,[r4,#0x19]
000272  2101              MOVS     r1,#1
000274  4308              ORRS     r0,r0,r1
000276  7660              STRB     r0,[r4,#0x19]
                  |L1.632|
;;;203                }
;;;204            }
;;;205        }
;;;206    }
000278  bdfe              POP      {r1-r7,pc}
;;;207    
                          ENDP

                  trickle_timestamp_get PROC
;;;208    uint64_t trickle_timestamp_get(void)
00027a  4909              LDR      r1,|L1.672|
;;;209    {
;;;210        return g_trickle_time;
00027c  c903              LDM      r1,{r0,r1}
;;;211    }
00027e  4770              BX       lr
;;;212    
                          ENDP

                  trickle_next_processing_get PROC
;;;213    uint64_t trickle_next_processing_get(trickle_t* trickle)
000280  4602              MOV      r2,r0
;;;214    {
;;;215        if (trickle->trickle_flags & (1 << TRICKLE_FLAGS_T_DONE_Pos)) /* i is next timeout for this instance */
000282  7e50              LDRB     r0,[r2,#0x19]
000284  07c0              LSLS     r0,r0,#31
000286  0fc0              LSRS     r0,r0,#31
000288  2800              CMP      r0,#0
00028a  d002              BEQ      |L1.658|
;;;216        {
;;;217            return trickle->i;
00028c  6890              LDR      r0,[r2,#8]
00028e  68d1              LDR      r1,[r2,#0xc]
                  |L1.656|
;;;218        }
;;;219        else /* t is next timeout for this instance */
;;;220        {
;;;221            return trickle->t;
;;;222        }
;;;223    }
000290  4770              BX       lr
                  |L1.658|
000292  6851              LDR      r1,[r2,#4]            ;221
000294  6810              LDR      r0,[r2,#0]            ;221
000296  e7fb              B        |L1.656|
                          ENDP

                  |L1.664|
                          DCD      rng_index
                  |L1.668|
                          DCD      rng_vals
                  |L1.672|
                          DCD      g_trickle_time
                  |L1.676|
                          DCD      g_i_min
                  |L1.680|
                          DCD      g_i_max
                  |L1.684|
                          DCD      g_k

                          AREA ||.bss||, DATA, NOINIT, ALIGN=0

                  rng_vals
                          %        64

                          AREA ||.data||, DATA, ALIGN=3

                  g_trickle_time
                          %        8
                  rng_index
000008  00000000          DCB      0x00,0x00,0x00,0x00
                  g_i_min
                          DCD      0x00000000
                  g_i_max
                          DCD      0x00000000
                  g_k
000014  00                DCB      0x00

;*** Start embedded assembler ***

#line 1 "..\\..\\..\\rbc_mesh\\src\\trickle.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___9_trickle_c_321a8af5____REV16|
#line 129 "..\\..\\..\\..\\..\\..\\components\\toolchain\\gcc\\core_cmInstr.h"
|__asm___9_trickle_c_321a8af5____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___9_trickle_c_321a8af5____REVSH|
#line 144
|__asm___9_trickle_c_321a8af5____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
