; generated by Component: ARM Compiler 5.04 update 1 (build 49) Tool: ArmCC [5040049]
; commandline ArmCC [--c99 --list --debug -c --asm --interleave -o.\_build\fifo.o --asm_dir=.\_build\ --list_dir=.\_build\ --depend=.\_build\fifo.d --cpu=Cortex-M0 --apcs=interwork -O0 -I..\include -I..\..\..\rbc_mesh -I..\..\..\rbc_mesh\include -I..\..\..\SDK\bsp -I..\..\..\..\..\..\components\softdevice\s110\headers -I..\..\..\..\..\..\components\toolchain\gcc -I..\..\..\..\..\..\components\libraries\util -I..\..\..\..\..\..\components\ble\common -I..\..\..\..\..\..\components\drivers_nrf\hal -I..\..\..\..\..\..\components\drivers_nrf\spi_slave -I..\..\..\..\..\..\components\softdevice\common\softdevice_handler -I..\..\..\..\..\..\components\libraries\fifo -I..\..\..\..\..\..\components\drivers_nrf\uart -I..\..\..\..\..\..\components\drivers_nrf\gpiote -I..\..\..\..\..\..\components\drivers_nrf\config -I..\..\..\..\..\..\components\drivers_nrf\common -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\4.1.0\CMSIS\Include -IC:\Keil_v5\ARM\PACK\NordicSemiconductor\nRF_DeviceFamilyPack\7.2.1\Device\Include -D__MICROLIB -DNRF51 -DBOARD_RHC -DNRF51 -DBLE_STACK_SUPPORT_REQD -DS110 -DSOFTDEVICE_PRESENT --omf_browse=.\_build\fifo.crf ..\..\..\rbc_mesh\src\fifo.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=1

                  s_fifo_at PROC
;;;42     *****************************************************************************/
;;;43     static void* s_fifo_at(fifo_t* p_fifo, uint32_t index)
000000  4602              MOV      r2,r0
;;;44     {
;;;45       return ((uint8_t*) p_fifo->elem_array + p_fifo->elem_size * index);
000002  6850              LDR      r0,[r2,#4]
000004  4348              MULS     r0,r1,r0
000006  6813              LDR      r3,[r2,#0]
000008  1818              ADDS     r0,r3,r0
;;;46     }
00000a  4770              BX       lr
;;;47     
                          ENDP

                  fifo_init PROC
;;;50     *****************************************************************************/
;;;51     void fifo_init(fifo_t* p_fifo)
00000c  2120              MOVS     r1,#0x20
;;;52     {
;;;53         /* round off to nearest(lower) size that can use & operator instead of modulo */
;;;54         uint32_t i = 32;
;;;55         while (!((p_fifo->array_len >> --i) & 0x01));
00000e  bf00              NOP      
                  |L1.16|
000010  1e4b              SUBS     r3,r1,#1
000012  4619              MOV      r1,r3
000014  6882              LDR      r2,[r0,#8]
000016  40da              LSRS     r2,r2,r3
000018  07d2              LSLS     r2,r2,#31
00001a  0fd2              LSRS     r2,r2,#31
00001c  2a00              CMP      r2,#0
00001e  d0f7              BEQ      |L1.16|
;;;56         p_fifo->array_len = (1 << i);
000020  2201              MOVS     r2,#1
000022  408a              LSLS     r2,r2,r1
000024  6082              STR      r2,[r0,#8]
;;;57     
;;;58         p_fifo->head = 0;
000026  2200              MOVS     r2,#0
000028  60c2              STR      r2,[r0,#0xc]
;;;59         p_fifo->tail = 0;
00002a  6102              STR      r2,[r0,#0x10]
;;;60     }
00002c  4770              BX       lr
;;;61     
                          ENDP

                  fifo_is_full PROC
;;;130    
;;;131    bool fifo_is_full(fifo_t* p_fifo)
00002e  4601              MOV      r1,r0
;;;132    {
;;;133      return (p_fifo->tail + p_fifo->array_len == p_fifo->head);
000030  688a              LDR      r2,[r1,#8]
000032  6908              LDR      r0,[r1,#0x10]
000034  1880              ADDS     r0,r0,r2
000036  68ca              LDR      r2,[r1,#0xc]
000038  4290              CMP      r0,r2
00003a  d101              BNE      |L1.64|
00003c  2001              MOVS     r0,#1
                  |L1.62|
;;;134    }
00003e  4770              BX       lr
                  |L1.64|
000040  2000              MOVS     r0,#0                 ;133
000042  e7fc              B        |L1.62|
;;;135    
                          ENDP

                  fifo_push PROC
;;;61     
;;;62     uint32_t fifo_push(fifo_t* p_fifo, const void* p_elem)
000044  b570              PUSH     {r4-r6,lr}
;;;63     {
000046  4604              MOV      r4,r0
000048  460d              MOV      r5,r1
;;;64         if (fifo_is_full(p_fifo))
00004a  4620              MOV      r0,r4
00004c  f7fffffe          BL       fifo_is_full
000050  2800              CMP      r0,#0
000052  d001              BEQ      |L1.88|
;;;65         {
;;;66             return NRF_ERROR_NO_MEM;
000054  2004              MOVS     r0,#4
                  |L1.86|
;;;67         }
;;;68     
;;;69       void* p_dest = s_fifo_at(p_fifo, p_fifo->head & (p_fifo->array_len - 1));
;;;70     
;;;71       if (p_fifo->memcpy_fptr)
;;;72         p_fifo->memcpy_fptr(p_dest, p_elem);
;;;73       else
;;;74         memcpy(p_dest, p_elem, p_fifo->elem_size);
;;;75     
;;;76       ++p_fifo->head;
;;;77       return NRF_SUCCESS;
;;;78     }
000056  bd70              POP      {r4-r6,pc}
                  |L1.88|
000058  68a2              LDR      r2,[r4,#8]            ;69
00005a  1e52              SUBS     r2,r2,#1              ;69
00005c  68e0              LDR      r0,[r4,#0xc]          ;69
00005e  4010              ANDS     r0,r0,r2              ;69
000060  4601              MOV      r1,r0                 ;69
000062  4620              MOV      r0,r4                 ;69
000064  f7fffffe          BL       s_fifo_at
000068  4606              MOV      r6,r0                 ;69
00006a  6960              LDR      r0,[r4,#0x14]         ;71
00006c  2800              CMP      r0,#0                 ;71
00006e  d004              BEQ      |L1.122|
000070  4629              MOV      r1,r5                 ;72
000072  4630              MOV      r0,r6                 ;72
000074  6962              LDR      r2,[r4,#0x14]         ;72
000076  4790              BLX      r2                    ;72
000078  e004              B        |L1.132|
                  |L1.122|
00007a  4629              MOV      r1,r5                 ;74
00007c  4630              MOV      r0,r6                 ;74
00007e  6862              LDR      r2,[r4,#4]            ;74
000080  f7fffffe          BL       __aeabi_memcpy
                  |L1.132|
000084  68e0              LDR      r0,[r4,#0xc]          ;76
000086  1c40              ADDS     r0,r0,#1              ;76
000088  60e0              STR      r0,[r4,#0xc]          ;76
00008a  2000              MOVS     r0,#0                 ;77
00008c  e7e3              B        |L1.86|
;;;79     
                          ENDP

                  fifo_is_empty PROC
;;;135    
;;;136    bool fifo_is_empty(fifo_t* p_fifo)
00008e  4601              MOV      r1,r0
;;;137    {
;;;138      return (p_fifo->tail == p_fifo->head);
000090  68ca              LDR      r2,[r1,#0xc]
000092  6908              LDR      r0,[r1,#0x10]
000094  4290              CMP      r0,r2
000096  d101              BNE      |L1.156|
000098  2001              MOVS     r0,#1
                  |L1.154|
;;;139    }
00009a  4770              BX       lr
                  |L1.156|
00009c  2000              MOVS     r0,#0                 ;138
00009e  e7fc              B        |L1.154|
                          ENDP

                  fifo_pop PROC
;;;79     
;;;80     uint32_t fifo_pop(fifo_t* p_fifo, void* p_elem)
0000a0  b570              PUSH     {r4-r6,lr}
;;;81     {
0000a2  4604              MOV      r4,r0
0000a4  460d              MOV      r5,r1
;;;82       if (fifo_is_empty(p_fifo))
0000a6  4620              MOV      r0,r4
0000a8  f7fffffe          BL       fifo_is_empty
0000ac  2800              CMP      r0,#0
0000ae  d001              BEQ      |L1.180|
;;;83       {
;;;84         return NRF_ERROR_NULL;
0000b0  200e              MOVS     r0,#0xe
                  |L1.178|
;;;85       }
;;;86     
;;;87       void* p_src = s_fifo_at(p_fifo, p_fifo->tail & (p_fifo->array_len - 1));
;;;88     
;;;89       if (p_fifo->memcpy_fptr)
;;;90         p_fifo->memcpy_fptr(p_elem, p_src);
;;;91       else
;;;92         memcpy(p_elem, p_src, p_fifo->elem_size);
;;;93     
;;;94       ++p_fifo->tail;
;;;95     
;;;96       return NRF_SUCCESS;
;;;97     }
0000b2  bd70              POP      {r4-r6,pc}
                  |L1.180|
0000b4  68a2              LDR      r2,[r4,#8]            ;87
0000b6  1e52              SUBS     r2,r2,#1              ;87
0000b8  6920              LDR      r0,[r4,#0x10]         ;87
0000ba  4010              ANDS     r0,r0,r2              ;87
0000bc  4601              MOV      r1,r0                 ;87
0000be  4620              MOV      r0,r4                 ;87
0000c0  f7fffffe          BL       s_fifo_at
0000c4  4606              MOV      r6,r0                 ;87
0000c6  6960              LDR      r0,[r4,#0x14]         ;89
0000c8  2800              CMP      r0,#0                 ;89
0000ca  d004              BEQ      |L1.214|
0000cc  4631              MOV      r1,r6                 ;90
0000ce  4628              MOV      r0,r5                 ;90
0000d0  6962              LDR      r2,[r4,#0x14]         ;90
0000d2  4790              BLX      r2                    ;90
0000d4  e004              B        |L1.224|
                  |L1.214|
0000d6  4631              MOV      r1,r6                 ;92
0000d8  4628              MOV      r0,r5                 ;92
0000da  6862              LDR      r2,[r4,#4]            ;92
0000dc  f7fffffe          BL       __aeabi_memcpy
                  |L1.224|
0000e0  6920              LDR      r0,[r4,#0x10]         ;94
0000e2  1c40              ADDS     r0,r0,#1              ;94
0000e4  6120              STR      r0,[r4,#0x10]         ;94
0000e6  2000              MOVS     r0,#0                 ;96
0000e8  e7e3              B        |L1.178|
;;;98     
                          ENDP

                  fifo_get_len PROC
;;;125    
;;;126    uint32_t fifo_get_len(fifo_t* p_fifo)
0000ea  4601              MOV      r1,r0
;;;127    {
;;;128      return (p_fifo->head - p_fifo->tail);
0000ec  690a              LDR      r2,[r1,#0x10]
0000ee  68c8              LDR      r0,[r1,#0xc]
0000f0  1a80              SUBS     r0,r0,r2
;;;129    }
0000f2  4770              BX       lr
;;;130    
                          ENDP

                  fifo_peek_at PROC
;;;98     
;;;99     uint32_t fifo_peek_at(fifo_t* p_fifo, void* p_elem, uint32_t elem)
0000f4  b5f8              PUSH     {r3-r7,lr}
;;;100    {
0000f6  4604              MOV      r4,r0
0000f8  460e              MOV      r6,r1
0000fa  4615              MOV      r5,r2
;;;101      if (fifo_get_len(p_fifo) <= elem)
0000fc  4620              MOV      r0,r4
0000fe  f7fffffe          BL       fifo_get_len
000102  42a8              CMP      r0,r5
000104  d801              BHI      |L1.266|
;;;102      {
;;;103        return NRF_ERROR_NULL;
000106  200e              MOVS     r0,#0xe
                  |L1.264|
;;;104      }
;;;105    
;;;106      void* p_src = s_fifo_at(p_fifo, (p_fifo->tail + elem) & (p_fifo->array_len - 1));
;;;107    
;;;108      if (p_fifo->memcpy_fptr)
;;;109        p_fifo->memcpy_fptr(p_elem, p_src);
;;;110      else
;;;111        memcpy(p_elem, p_src, p_fifo->elem_size);
;;;112    
;;;113      return NRF_SUCCESS;
;;;114    }
000108  bdf8              POP      {r3-r7,pc}
                  |L1.266|
00010a  6920              LDR      r0,[r4,#0x10]         ;106
00010c  1940              ADDS     r0,r0,r5              ;106
00010e  68a2              LDR      r2,[r4,#8]            ;106
000110  1e52              SUBS     r2,r2,#1              ;106
000112  4010              ANDS     r0,r0,r2              ;106
000114  4601              MOV      r1,r0                 ;106
000116  4620              MOV      r0,r4                 ;106
000118  f7fffffe          BL       s_fifo_at
00011c  4607              MOV      r7,r0                 ;106
00011e  6960              LDR      r0,[r4,#0x14]         ;108
000120  2800              CMP      r0,#0                 ;108
000122  d004              BEQ      |L1.302|
000124  4639              MOV      r1,r7                 ;109
000126  4630              MOV      r0,r6                 ;109
000128  6962              LDR      r2,[r4,#0x14]         ;109
00012a  4790              BLX      r2                    ;109
00012c  e004              B        |L1.312|
                  |L1.302|
00012e  4639              MOV      r1,r7                 ;111
000130  4630              MOV      r0,r6                 ;111
000132  6862              LDR      r2,[r4,#4]            ;111
000134  f7fffffe          BL       __aeabi_memcpy
                  |L1.312|
000138  2000              MOVS     r0,#0                 ;113
00013a  e7e5              B        |L1.264|
;;;115    
                          ENDP

                  fifo_peek PROC
;;;116    uint32_t fifo_peek(fifo_t* p_fifo, void* p_elem)
00013c  b570              PUSH     {r4-r6,lr}
;;;117    {
00013e  4604              MOV      r4,r0
000140  460d              MOV      r5,r1
;;;118      return fifo_peek_at(p_fifo, p_elem, 0);
000142  2200              MOVS     r2,#0
000144  4629              MOV      r1,r5
000146  4620              MOV      r0,r4
000148  f7fffffe          BL       fifo_peek_at
;;;119    }
00014c  bd70              POP      {r4-r6,pc}
;;;120    
                          ENDP

                  fifo_flush PROC
;;;121    void fifo_flush(fifo_t* p_fifo)
00014e  68c1              LDR      r1,[r0,#0xc]
;;;122    {
;;;123      p_fifo->tail = p_fifo->head;
000150  6101              STR      r1,[r0,#0x10]
;;;124    }
000152  4770              BX       lr
;;;125    
                          ENDP

