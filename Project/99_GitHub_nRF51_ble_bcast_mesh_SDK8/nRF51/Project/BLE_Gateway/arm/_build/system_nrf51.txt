; generated by Component: ARM Compiler 5.04 update 1 (build 49) Tool: ArmCC [5040049]
; commandline ArmCC [--c99 --list --debug -c --asm --interleave -o.\_build\system_nrf51.o --asm_dir=.\_build\ --list_dir=.\_build\ --depend=.\_build\system_nrf51.d --cpu=Cortex-M0 --apcs=interwork -O0 -I..\include -I..\..\..\rbc_mesh -I..\..\..\rbc_mesh\include -I..\..\..\SDK\bsp -I..\..\..\..\..\..\components\softdevice\s110\headers -I..\..\..\..\..\..\components\toolchain\gcc -I..\..\..\..\..\..\components\libraries\util -I..\..\..\..\..\..\components\ble\common -I..\..\..\..\..\..\components\drivers_nrf\hal -I..\..\..\..\..\..\components\drivers_nrf\spi_slave -I..\..\..\..\..\..\components\softdevice\common\softdevice_handler -I..\..\..\..\..\..\components\libraries\fifo -I..\..\..\..\..\..\components\drivers_nrf\uart -I..\..\..\..\..\..\components\drivers_nrf\gpiote -I..\..\..\..\..\..\components\drivers_nrf\config -I..\..\..\..\..\..\components\drivers_nrf\common -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\4.1.0\CMSIS\Include -IC:\Keil_v5\ARM\PACK\NordicSemiconductor\nRF_DeviceFamilyPack\7.2.1\Device\Include -D__MICROLIB -DNRF51 -DBOARD_RHC -DNRF51 -DBLE_STACK_SUPPORT_REQD -DS110 -DSOFTDEVICE_PRESENT --omf_browse=.\_build\system_nrf51.crf system_nrf51.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  SystemCoreClockUpdate PROC
;;;55     
;;;56     void SystemCoreClockUpdate(void)
000000  4832              LDR      r0,|L1.204|
;;;57     {
;;;58         SystemCoreClock = __SYSTEM_CLOCK;
000002  4933              LDR      r1,|L1.208|
000004  6008              STR      r0,[r1,#0]  ; SystemCoreClock
;;;59     }
000006  4770              BX       lr
;;;60     
                          ENDP

                  is_disabled_in_debug_needed PROC
;;;107    
;;;108    static bool is_disabled_in_debug_needed(void) 
000008  4832              LDR      r0,|L1.212|
;;;109    {
;;;110        if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x1) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0))
00000a  8c00              LDRH     r0,[r0,#0x20]
00000c  b2c0              UXTB     r0,r0
00000e  2801              CMP      r0,#1
000010  d112              BNE      |L1.56|
000012  4830              LDR      r0,|L1.212|
000014  8c80              LDRH     r0,[r0,#0x24]
000016  0700              LSLS     r0,r0,#28
000018  0f00              LSRS     r0,r0,#28
00001a  2800              CMP      r0,#0
00001c  d10c              BNE      |L1.56|
;;;111        {
;;;112            if ((((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x40) && (((*(uint32_t *)0xF0000FEC) & 0x000000F0) == 0x0))
00001e  482d              LDR      r0,|L1.212|
000020  6a80              LDR      r0,[r0,#0x28]
000022  21f0              MOVS     r1,#0xf0
000024  4008              ANDS     r0,r0,r1
000026  2840              CMP      r0,#0x40
000028  d106              BNE      |L1.56|
00002a  482a              LDR      r0,|L1.212|
00002c  6ac0              LDR      r0,[r0,#0x2c]
00002e  4008              ANDS     r0,r0,r1
000030  2800              CMP      r0,#0
000032  d101              BNE      |L1.56|
;;;113            {
;;;114                return true;
000034  2001              MOVS     r0,#1
                  |L1.54|
;;;115            }
;;;116        }
;;;117        
;;;118        return false;
;;;119    }
000036  4770              BX       lr
                  |L1.56|
000038  2000              MOVS     r0,#0                 ;118
00003a  e7fc              B        |L1.54|
;;;120    
                          ENDP

                  is_manual_peripheral_setup_needed PROC
;;;86     
;;;87     static bool is_manual_peripheral_setup_needed(void) 
00003c  4825              LDR      r0,|L1.212|
;;;88     {
;;;89         if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x1) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0))
00003e  8c00              LDRH     r0,[r0,#0x20]
000040  b2c0              UXTB     r0,r0
000042  2801              CMP      r0,#1
000044  d12c              BNE      |L1.160|
000046  4823              LDR      r0,|L1.212|
000048  8c80              LDRH     r0,[r0,#0x24]
00004a  0700              LSLS     r0,r0,#28
00004c  0f00              LSRS     r0,r0,#28
00004e  2800              CMP      r0,#0
000050  d126              BNE      |L1.160|
;;;90         {
;;;91             if ((((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x00) && (((*(uint32_t *)0xF0000FEC) & 0x000000F0) == 0x0))
000052  4820              LDR      r0,|L1.212|
000054  6a80              LDR      r0,[r0,#0x28]
000056  21f0              MOVS     r1,#0xf0
000058  4008              ANDS     r0,r0,r1
00005a  2800              CMP      r0,#0
00005c  d106              BNE      |L1.108|
00005e  481d              LDR      r0,|L1.212|
000060  6ac0              LDR      r0,[r0,#0x2c]
000062  4008              ANDS     r0,r0,r1
000064  2800              CMP      r0,#0
000066  d101              BNE      |L1.108|
;;;92             {
;;;93                 return true;
000068  2001              MOVS     r0,#1
                  |L1.106|
;;;94             }
;;;95             if ((((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x10) && (((*(uint32_t *)0xF0000FEC) & 0x000000F0) == 0x0))
;;;96             {
;;;97                 return true;
;;;98             }
;;;99             if ((((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30) && (((*(uint32_t *)0xF0000FEC) & 0x000000F0) == 0x0))
;;;100            {
;;;101                return true;
;;;102            }
;;;103        }
;;;104        
;;;105        return false;
;;;106    }
00006a  4770              BX       lr
                  |L1.108|
00006c  4819              LDR      r0,|L1.212|
00006e  6a80              LDR      r0,[r0,#0x28]         ;95
000070  21f0              MOVS     r1,#0xf0              ;95
000072  4008              ANDS     r0,r0,r1              ;95
000074  2810              CMP      r0,#0x10              ;95
000076  d106              BNE      |L1.134|
000078  4816              LDR      r0,|L1.212|
00007a  6ac0              LDR      r0,[r0,#0x2c]         ;95
00007c  4008              ANDS     r0,r0,r1              ;95
00007e  2800              CMP      r0,#0                 ;95
000080  d101              BNE      |L1.134|
000082  2001              MOVS     r0,#1                 ;97
000084  e7f1              B        |L1.106|
                  |L1.134|
000086  4813              LDR      r0,|L1.212|
000088  6a80              LDR      r0,[r0,#0x28]         ;99
00008a  21f0              MOVS     r1,#0xf0              ;99
00008c  4008              ANDS     r0,r0,r1              ;99
00008e  2830              CMP      r0,#0x30              ;99
000090  d106              BNE      |L1.160|
000092  4810              LDR      r0,|L1.212|
000094  6ac0              LDR      r0,[r0,#0x2c]         ;99
000096  4008              ANDS     r0,r0,r1              ;99
000098  2800              CMP      r0,#0                 ;99
00009a  d101              BNE      |L1.160|
00009c  2001              MOVS     r0,#1                 ;101
00009e  e7e4              B        |L1.106|
                  |L1.160|
0000a0  2000              MOVS     r0,#0                 ;105
0000a2  e7e2              B        |L1.106|
;;;107    
                          ENDP

                  SystemInit PROC
;;;60     
;;;61     void SystemInit(void)
0000a4  b510              PUSH     {r4,lr}
;;;62     {
;;;63         /* If desired, switch off the unused RAM to lower consumption by the use of RAMON register.
;;;64            It can also be done in the application main() function. */
;;;65     
;;;66         /* Prepare the peripherals for use as indicated by the PAN 26 "System: Manual setup is required
;;;67            to enable the use of peripherals" found at Product Anomaly document for your device found at
;;;68            https://www.nordicsemi.com/. The side effect of executing these instructions in the devices 
;;;69            that do not need it is that the new peripherals in the second generation devices (LPCOMP for
;;;70            example) will not be available. */
;;;71         if (is_manual_peripheral_setup_needed())
0000a6  f7fffffe          BL       is_manual_peripheral_setup_needed
0000aa  2800              CMP      r0,#0
0000ac  d005              BEQ      |L1.186|
;;;72         {
;;;73             *(uint32_t volatile *)0x40000504 = 0xC007FFDF;
0000ae  480a              LDR      r0,|L1.216|
0000b0  490a              LDR      r1,|L1.220|
0000b2  6048              STR      r0,[r1,#4]
;;;74             *(uint32_t volatile *)0x40006C18 = 0x00008000;
0000b4  13c8              ASRS     r0,r1,#15
0000b6  490a              LDR      r1,|L1.224|
0000b8  6188              STR      r0,[r1,#0x18]
                  |L1.186|
;;;75         }
;;;76         
;;;77         /* Disable PROTENSET registers under debug, as indicated by PAN 59 "MPU: Reset value of DISABLEINDEBUG
;;;78            register is incorrect" found at Product Anomaly document four your device found at 
;;;79            https://www.nordicsemi.com/. There is no side effect of using these instruction if not needed. */
;;;80         if (is_disabled_in_debug_needed())
0000ba  f7fffffe          BL       is_disabled_in_debug_needed
0000be  2800              CMP      r0,#0
0000c0  d002              BEQ      |L1.200|
;;;81         {
;;;82             NRF_MPU->DISABLEINDEBUG = MPU_DISABLEINDEBUG_DISABLEINDEBUG_Disabled << MPU_DISABLEINDEBUG_DISABLEINDEBUG_Pos;
0000c2  2001              MOVS     r0,#1
0000c4  4907              LDR      r1,|L1.228|
0000c6  6088              STR      r0,[r1,#8]
                  |L1.200|
;;;83         }
;;;84     }
0000c8  bd10              POP      {r4,pc}
;;;85     
                          ENDP

0000ca  0000              DCW      0x0000
                  |L1.204|
                          DCD      0x00f42400
                  |L1.208|
                          DCD      SystemCoreClock
                  |L1.212|
                          DCD      0xf0000fc0
                  |L1.216|
                          DCD      0xc007ffdf
                  |L1.220|
                          DCD      0x40000500
                  |L1.224|
                          DCD      0x40006c00
                  |L1.228|
                          DCD      0x40000600

                          AREA ||.data||, DATA, ALIGN=2

                  SystemCoreClock
                  ||__tagsym$$used||
                          DCD      0x00f42400

;*** Start embedded assembler ***

#line 1 "system_nrf51.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___14_system_nrf51_c_5d646a67____REV16|
#line 129 "..\\..\\..\\..\\..\\..\\components\\toolchain\\gcc\\core_cmInstr.h"
|__asm___14_system_nrf51_c_5d646a67____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___14_system_nrf51_c_5d646a67____REVSH|
#line 144
|__asm___14_system_nrf51_c_5d646a67____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
