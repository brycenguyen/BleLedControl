; generated by Component: ARM Compiler 5.04 update 1 (build 49) Tool: ArmCC [5040049]
; commandline ArmCC [--c99 --list --debug -c --asm --interleave -o.\_build\spi_slave.o --asm_dir=.\_build\ --list_dir=.\_build\ --depend=.\_build\spi_slave.d --cpu=Cortex-M0 --apcs=interwork -O0 -I..\include -I..\..\..\rbc_mesh -I..\..\..\rbc_mesh\include -I..\..\..\SDK\bsp -I..\..\..\..\..\..\components\softdevice\s110\headers -I..\..\..\..\..\..\components\toolchain\gcc -I..\..\..\..\..\..\components\libraries\util -I..\..\..\..\..\..\components\ble\common -I..\..\..\..\..\..\components\drivers_nrf\hal -I..\..\..\..\..\..\components\drivers_nrf\spi_slave -I..\..\..\..\..\..\components\softdevice\common\softdevice_handler -I..\..\..\..\..\..\components\libraries\fifo -I..\..\..\..\..\..\components\drivers_nrf\uart -I..\..\..\..\..\..\components\drivers_nrf\gpiote -I..\..\..\..\..\..\components\drivers_nrf\config -I..\..\..\..\..\..\components\drivers_nrf\common -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\4.1.0\CMSIS\Include -IC:\Keil_v5\ARM\PACK\NordicSemiconductor\nRF_DeviceFamilyPack\7.2.1\Device\Include -D__MICROLIB -DNRF51 -DBOARD_RHC -DNRF51 -DBLE_STACK_SUPPORT_REQD -DS110 -DSOFTDEVICE_PRESENT --omf_browse=.\_build\spi_slave.crf ..\..\..\..\..\..\components\drivers_nrf\spi_slave\spi_slave.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  spi_slave_evt_handler_register PROC
;;;44     
;;;45     uint32_t spi_slave_evt_handler_register(spi_slave_event_handler_t event_handler)
000000  4601              MOV      r1,r0
;;;46     {
;;;47         m_event_callback = event_handler;
000002  48ce              LDR      r0,|L1.828|
000004  6001              STR      r1,[r0,#0]  ; m_event_callback
;;;48         
;;;49         return (m_event_callback != NULL) ? NRF_SUCCESS : NRF_ERROR_NULL;
000006  6800              LDR      r0,[r0,#0]  ; m_event_callback
000008  2800              CMP      r0,#0
00000a  d001              BEQ      |L1.16|
00000c  2000              MOVS     r0,#0
                  |L1.14|
;;;50     }
00000e  4770              BX       lr
                  |L1.16|
000010  200e              MOVS     r0,#0xe               ;49
000012  e7fc              B        |L1.14|
;;;51     
                          ENDP

                  spi_slave_set_cs_pull_up_config PROC
;;;52     
;;;53     uint32_t spi_slave_set_cs_pull_up_config(uint32_t alternate_config)
000014  4601              MOV      r1,r0
;;;54     {
;;;55         m_cs_pullup_config = alternate_config;
000016  48ca              LDR      r0,|L1.832|
000018  6001              STR      r1,[r0,#0]  ; m_cs_pullup_config
;;;56         return NRF_SUCCESS;
00001a  2000              MOVS     r0,#0
;;;57     }
00001c  4770              BX       lr
;;;58     
                          ENDP

                  spi_slave_set_drive_config PROC
;;;59     uint32_t spi_slave_set_drive_config(uint32_t alternate_config)
00001e  4601              MOV      r1,r0
;;;60     {
;;;61         m_drive_config = alternate_config;
000020  48c8              LDR      r0,|L1.836|
000022  6001              STR      r1,[r0,#0]  ; m_drive_config
;;;62         return NRF_SUCCESS;
000024  2000              MOVS     r0,#0
;;;63     }
000026  4770              BX       lr
;;;64     
                          ENDP

                  spi_slave_init PROC
;;;65     uint32_t spi_slave_init(const spi_slave_config_t * p_spi_slave_config)
000028  b570              PUSH     {r4-r6,lr}
;;;66     {    
00002a  4604              MOV      r4,r0
;;;67         uint32_t err_code;
;;;68         uint32_t spi_mode_mask;
;;;69         
;;;70         if (p_spi_slave_config == NULL)
00002c  2c00              CMP      r4,#0
00002e  d101              BNE      |L1.52|
;;;71         {
;;;72             return NRF_ERROR_NULL;
000030  200e              MOVS     r0,#0xe
                  |L1.50|
;;;73         }
;;;74     
;;;75         // Configure the SPI pins for input.
;;;76         NRF_GPIO->PIN_CNF[p_spi_slave_config->pin_miso] = 
;;;77             (GPIO_PIN_CNF_SENSE_Disabled << GPIO_PIN_CNF_SENSE_Pos) |
;;;78             (m_drive_config << GPIO_PIN_CNF_DRIVE_Pos)              |
;;;79             (GPIO_PIN_CNF_PULL_Disabled << GPIO_PIN_CNF_PULL_Pos)   |
;;;80             (GPIO_PIN_CNF_INPUT_Connect << GPIO_PIN_CNF_INPUT_Pos)  |
;;;81             (GPIO_PIN_CNF_DIR_Input << GPIO_PIN_CNF_DIR_Pos);
;;;82     
;;;83         NRF_GPIO->PIN_CNF[p_spi_slave_config->pin_csn] = 
;;;84             (GPIO_PIN_CNF_SENSE_Disabled << GPIO_PIN_CNF_SENSE_Pos) |
;;;85             (GPIO_PIN_CNF_DRIVE_S0S1 << GPIO_PIN_CNF_DRIVE_Pos)     |
;;;86             (m_cs_pullup_config << GPIO_PIN_CNF_PULL_Pos)           |
;;;87             (GPIO_PIN_CNF_INPUT_Connect << GPIO_PIN_CNF_INPUT_Pos)  |
;;;88             (GPIO_PIN_CNF_DIR_Input << GPIO_PIN_CNF_DIR_Pos);
;;;89     
;;;90         NRF_GPIO->PIN_CNF[p_spi_slave_config->pin_mosi] = 
;;;91             (GPIO_PIN_CNF_SENSE_Disabled << GPIO_PIN_CNF_SENSE_Pos) |
;;;92             (GPIO_PIN_CNF_DRIVE_S0S1 << GPIO_PIN_CNF_DRIVE_Pos)     |
;;;93             (GPIO_PIN_CNF_PULL_Disabled << GPIO_PIN_CNF_PULL_Pos)   |
;;;94             (GPIO_PIN_CNF_INPUT_Connect << GPIO_PIN_CNF_INPUT_Pos)  |
;;;95             (GPIO_PIN_CNF_DIR_Input << GPIO_PIN_CNF_DIR_Pos);
;;;96     
;;;97         NRF_GPIO->PIN_CNF[p_spi_slave_config->pin_sck] = 
;;;98             (GPIO_PIN_CNF_SENSE_Disabled << GPIO_PIN_CNF_SENSE_Pos) |
;;;99             (GPIO_PIN_CNF_DRIVE_S0S1 << GPIO_PIN_CNF_DRIVE_Pos)     |
;;;100            (GPIO_PIN_CNF_PULL_Disabled << GPIO_PIN_CNF_PULL_Pos)   |
;;;101            (GPIO_PIN_CNF_INPUT_Connect << GPIO_PIN_CNF_INPUT_Pos)  |
;;;102            (GPIO_PIN_CNF_DIR_Input << GPIO_PIN_CNF_DIR_Pos);
;;;103    
;;;104        NRF_SPIS1->PSELCSN  = p_spi_slave_config->pin_csn;
;;;105        NRF_SPIS1->PSELSCK  = p_spi_slave_config->pin_sck;
;;;106        NRF_SPIS1->PSELMOSI = p_spi_slave_config->pin_mosi;
;;;107        NRF_SPIS1->PSELMISO = p_spi_slave_config->pin_miso;
;;;108        NRF_SPIS1->MAXRX    = 0;
;;;109        NRF_SPIS1->MAXTX    = 0;
;;;110        
;;;111        // Configure SPI mode.
;;;112        spi_mode_mask = 0;
;;;113        err_code      = NRF_SUCCESS;
;;;114        switch (p_spi_slave_config->mode)
;;;115        {
;;;116            case SPI_MODE_0:
;;;117                spi_mode_mask = ((SPIS_CONFIG_CPOL_ActiveHigh << SPIS_CONFIG_CPOL_Pos) |
;;;118                                 (SPIS_CONFIG_CPHA_Leading << SPIS_CONFIG_CPHA_Pos));
;;;119                break;
;;;120    
;;;121            case SPI_MODE_1:
;;;122                spi_mode_mask = ((SPIS_CONFIG_CPOL_ActiveHigh << SPIS_CONFIG_CPOL_Pos) |
;;;123                                 (SPIS_CONFIG_CPHA_Trailing << SPIS_CONFIG_CPHA_Pos));
;;;124                break;
;;;125    
;;;126            case SPI_MODE_2:
;;;127                spi_mode_mask = ((SPIS_CONFIG_CPOL_ActiveLow << SPIS_CONFIG_CPOL_Pos)  |
;;;128                                 (SPIS_CONFIG_CPHA_Leading << SPIS_CONFIG_CPHA_Pos));
;;;129                break;
;;;130    
;;;131            case SPI_MODE_3:
;;;132                spi_mode_mask = ((SPIS_CONFIG_CPOL_ActiveLow << SPIS_CONFIG_CPOL_Pos)  |
;;;133                                 (SPIS_CONFIG_CPHA_Trailing << SPIS_CONFIG_CPHA_Pos));
;;;134                break;
;;;135    
;;;136            default:
;;;137                err_code = NRF_ERROR_INVALID_PARAM;
;;;138                break;
;;;139        }
;;;140    
;;;141        if (err_code != NRF_SUCCESS)
;;;142        {
;;;143            return err_code;
;;;144        }
;;;145        
;;;146        // Configure bit order.    
;;;147        if (p_spi_slave_config->bit_order == SPIM_LSB_FIRST)
;;;148        {
;;;149            NRF_SPIS1->CONFIG = (spi_mode_mask | (SPIS_CONFIG_ORDER_LsbFirst << SPIS_CONFIG_ORDER_Pos));
;;;150            NRF_SPIS1->DEF    = p_spi_slave_config->def_tx_character;
;;;151            NRF_SPIS1->ORC    = p_spi_slave_config->orc_tx_character;
;;;152        }
;;;153        else
;;;154        {
;;;155            NRF_SPIS1->CONFIG = (spi_mode_mask | (SPIS_CONFIG_ORDER_MsbFirst << SPIS_CONFIG_ORDER_Pos));
;;;156            NRF_SPIS1->DEF    = p_spi_slave_config->def_tx_character;
;;;157            NRF_SPIS1->ORC    = p_spi_slave_config->orc_tx_character;
;;;158        }
;;;159    
;;;160        // Clear possible pending events.
;;;161        NRF_SPIS1->EVENTS_END      = 0;
;;;162        NRF_SPIS1->EVENTS_ACQUIRED = 0;
;;;163        
;;;164        // Enable END_ACQUIRE shortcut.        
;;;165        NRF_SPIS1->SHORTS = (SPIS_SHORTS_END_ACQUIRE_Enabled << SPIS_SHORTS_END_ACQUIRE_Pos);
;;;166        
;;;167        m_spi_state = SPI_STATE_INIT; 
;;;168    
;;;169        // Set correct IRQ priority and clear any possible pending interrupt.
;;;170        NVIC_SetPriority(SPI1_TWI1_IRQn, SPI1_TWI1_IRQ_PRI);    
;;;171        NVIC_ClearPendingIRQ(SPI1_TWI1_IRQn);
;;;172        
;;;173        // Enable IRQ.    
;;;174        NRF_SPIS1->INTENSET = (SPIS_INTENSET_ACQUIRED_Enabled << SPIS_INTENSET_ACQUIRED_Pos) |
;;;175                              (SPIS_INTENSET_END_Enabled << SPIS_INTENSET_END_Pos);
;;;176        NVIC_EnableIRQ(SPI1_TWI1_IRQn);
;;;177        
;;;178        // Enable SPI slave device.        
;;;179        NRF_SPIS1->ENABLE = (SPIS_ENABLE_ENABLE_Enabled << SPIS_ENABLE_ENABLE_Pos);        
;;;180        
;;;181        return err_code;
;;;182    }
000032  bd70              POP      {r4-r6,pc}
                  |L1.52|
000034  48c3              LDR      r0,|L1.836|
000036  6800              LDR      r0,[r0,#0]            ;76  ; m_drive_config
000038  0200              LSLS     r0,r0,#8              ;76
00003a  2105              MOVS     r1,#5                 ;76
00003c  0709              LSLS     r1,r1,#28             ;76
00003e  2207              MOVS     r2,#7                 ;76
000040  0212              LSLS     r2,r2,#8              ;76
000042  1889              ADDS     r1,r1,r2              ;76
000044  6822              LDR      r2,[r4,#0]            ;76
000046  0092              LSLS     r2,r2,#2              ;76
000048  5088              STR      r0,[r1,r2]            ;76
00004a  48bd              LDR      r0,|L1.832|
00004c  6800              LDR      r0,[r0,#0]            ;83  ; m_cs_pullup_config
00004e  0080              LSLS     r0,r0,#2              ;83
000050  2105              MOVS     r1,#5                 ;83
000052  0709              LSLS     r1,r1,#28             ;83
000054  2207              MOVS     r2,#7                 ;83
000056  0212              LSLS     r2,r2,#8              ;83
000058  1889              ADDS     r1,r1,r2              ;83
00005a  68e2              LDR      r2,[r4,#0xc]          ;83
00005c  0092              LSLS     r2,r2,#2              ;83
00005e  5088              STR      r0,[r1,r2]            ;83
000060  2000              MOVS     r0,#0                 ;90
000062  2105              MOVS     r1,#5                 ;90
000064  0709              LSLS     r1,r1,#28             ;90
000066  2207              MOVS     r2,#7                 ;90
000068  0212              LSLS     r2,r2,#8              ;90
00006a  1889              ADDS     r1,r1,r2              ;90
00006c  6862              LDR      r2,[r4,#4]            ;90
00006e  0092              LSLS     r2,r2,#2              ;90
000070  5088              STR      r0,[r1,r2]            ;90
000072  2100              MOVS     r1,#0                 ;97
000074  2005              MOVS     r0,#5                 ;97
000076  0700              LSLS     r0,r0,#28             ;97
000078  2207              MOVS     r2,#7                 ;97
00007a  0212              LSLS     r2,r2,#8              ;97
00007c  1880              ADDS     r0,r0,r2              ;97
00007e  68a2              LDR      r2,[r4,#8]            ;97
000080  0092              LSLS     r2,r2,#2              ;97
000082  5081              STR      r1,[r0,r2]            ;97
000084  49b0              LDR      r1,|L1.840|
000086  68e0              LDR      r0,[r4,#0xc]          ;104
000088  6148              STR      r0,[r1,#0x14]         ;104
00008a  68a0              LDR      r0,[r4,#8]            ;105
00008c  6088              STR      r0,[r1,#8]            ;105
00008e  6860              LDR      r0,[r4,#4]            ;106
000090  6108              STR      r0,[r1,#0x10]         ;106
000092  6820              LDR      r0,[r4,#0]            ;107
000094  60c8              STR      r0,[r1,#0xc]          ;107
000096  2000              MOVS     r0,#0                 ;108
000098  6388              STR      r0,[r1,#0x38]         ;108
00009a  49ab              LDR      r1,|L1.840|
00009c  3140              ADDS     r1,r1,#0x40           ;109
00009e  6088              STR      r0,[r1,#8]            ;109
0000a0  2500              MOVS     r5,#0                 ;112
0000a2  2600              MOVS     r6,#0                 ;113
0000a4  7c20              LDRB     r0,[r4,#0x10]         ;114
0000a6  2800              CMP      r0,#0                 ;114
0000a8  d006              BEQ      |L1.184|
0000aa  2801              CMP      r0,#1                 ;114
0000ac  d006              BEQ      |L1.188|
0000ae  2802              CMP      r0,#2                 ;114
0000b0  d006              BEQ      |L1.192|
0000b2  2803              CMP      r0,#3                 ;114
0000b4  d108              BNE      |L1.200|
0000b6  e005              B        |L1.196|
                  |L1.184|
0000b8  2500              MOVS     r5,#0                 ;117
0000ba  e007              B        |L1.204|
                  |L1.188|
0000bc  2502              MOVS     r5,#2                 ;122
0000be  e005              B        |L1.204|
                  |L1.192|
0000c0  2504              MOVS     r5,#4                 ;127
0000c2  e003              B        |L1.204|
                  |L1.196|
0000c4  2506              MOVS     r5,#6                 ;132
0000c6  e001              B        |L1.204|
                  |L1.200|
0000c8  2607              MOVS     r6,#7                 ;137
0000ca  bf00              NOP                            ;138
                  |L1.204|
0000cc  bf00              NOP                            ;119
0000ce  2e00              CMP      r6,#0                 ;141
0000d0  d001              BEQ      |L1.214|
0000d2  4630              MOV      r0,r6                 ;143
0000d4  e7ad              B        |L1.50|
                  |L1.214|
0000d6  7c60              LDRB     r0,[r4,#0x11]         ;147
0000d8  2800              CMP      r0,#0                 ;147
0000da  d10b              BNE      |L1.244|
0000dc  2001              MOVS     r0,#1                 ;149
0000de  4328              ORRS     r0,r0,r5              ;149
0000e0  4999              LDR      r1,|L1.840|
0000e2  3140              ADDS     r1,r1,#0x40           ;149
0000e4  6148              STR      r0,[r1,#0x14]         ;149
0000e6  7ca0              LDRB     r0,[r4,#0x12]         ;150
0000e8  61c8              STR      r0,[r1,#0x1c]         ;150
0000ea  7ce0              LDRB     r0,[r4,#0x13]         ;151
0000ec  4996              LDR      r1,|L1.840|
0000ee  31c0              ADDS     r1,r1,#0xc0           ;151
0000f0  6008              STR      r0,[r1,#0]            ;151
0000f2  e00a              B        |L1.266|
                  |L1.244|
0000f4  4894              LDR      r0,|L1.840|
0000f6  3040              ADDS     r0,r0,#0x40           ;155
0000f8  6145              STR      r5,[r0,#0x14]         ;155
0000fa  7ca0              LDRB     r0,[r4,#0x12]         ;156
0000fc  4992              LDR      r1,|L1.840|
0000fe  3140              ADDS     r1,r1,#0x40           ;156
000100  61c8              STR      r0,[r1,#0x1c]         ;156
000102  7ce0              LDRB     r0,[r4,#0x13]         ;157
000104  4990              LDR      r1,|L1.840|
000106  31c0              ADDS     r1,r1,#0xc0           ;157
000108  6008              STR      r0,[r1,#0]            ;157
                  |L1.266|
00010a  2000              MOVS     r0,#0                 ;161
00010c  498f              LDR      r1,|L1.844|
00010e  6048              STR      r0,[r1,#4]            ;161
000110  6288              STR      r0,[r1,#0x28]         ;162
000112  2004              MOVS     r0,#4                 ;165
000114  498e              LDR      r1,|L1.848|
000116  6008              STR      r0,[r1,#0]            ;165
000118  2000              MOVS     r0,#0                 ;167
00011a  498e              LDR      r1,|L1.852|
00011c  7008              STRB     r0,[r1,#0]            ;167
00011e  2103              MOVS     r1,#3                 ;170
000120  2004              MOVS     r0,#4                 ;170
000122  f7fffffe          BL       NVIC_SetPriority
000126  2004              MOVS     r0,#4                 ;171
000128  2101              MOVS     r1,#1                 ;171
00012a  4081              LSLS     r1,r1,r0              ;171
00012c  4a8a              LDR      r2,|L1.856|
00012e  6011              STR      r1,[r2,#0]            ;171
000130  bf00              NOP                            ;171
000132  488a              LDR      r0,|L1.860|
000134  498a              LDR      r1,|L1.864|
000136  6048              STR      r0,[r1,#4]            ;174
000138  2004              MOVS     r0,#4                 ;176
00013a  2101              MOVS     r1,#1                 ;176
00013c  4081              LSLS     r1,r1,r0              ;176
00013e  4a89              LDR      r2,|L1.868|
000140  6011              STR      r1,[r2,#0]            ;176
000142  bf00              NOP                            ;176
000144  2002              MOVS     r0,#2                 ;179
000146  4980              LDR      r1,|L1.840|
000148  6008              STR      r0,[r1,#0]            ;179
00014a  4630              MOV      r0,r6                 ;181
00014c  e771              B        |L1.50|
;;;183    
                          ENDP

                  sm_state_change PROC
;;;225     */
;;;226    static void sm_state_change(spi_state_t new_state)
00014e  b510              PUSH     {r4,lr}
;;;227    {
000150  4604              MOV      r4,r0
;;;228        m_spi_state = new_state;
000152  4880              LDR      r0,|L1.852|
000154  7004              STRB     r4,[r0,#0]
;;;229        state_entry_action_execute();
000156  f7fffffe          BL       state_entry_action_execute
;;;230    }
00015a  bd10              POP      {r4,pc}
;;;231    
                          ENDP

                  spi_slave_buffers_set PROC
;;;232    
;;;233    uint32_t spi_slave_buffers_set(uint8_t * p_tx_buf, 
00015c  b5ff              PUSH     {r0-r7,lr}
;;;234                                   uint8_t * p_rx_buf, 
;;;235                                   uint8_t   tx_buf_length, 
;;;236                                   uint8_t   rx_buf_length)
;;;237    {
00015e  b081              SUB      sp,sp,#4
000160  4605              MOV      r5,r0
000162  460e              MOV      r6,r1
000164  4617              MOV      r7,r2
;;;238        uint32_t err_code;
;;;239    
;;;240        if ((p_tx_buf == NULL) || (p_rx_buf == NULL))
000166  2d00              CMP      r5,#0
000168  d001              BEQ      |L1.366|
00016a  2e00              CMP      r6,#0
00016c  d102              BNE      |L1.372|
                  |L1.366|
;;;241        {
;;;242            return NRF_ERROR_NULL;
00016e  200e              MOVS     r0,#0xe
                  |L1.368|
;;;243        }
;;;244        
;;;245        switch (m_spi_state)
;;;246        {
;;;247            case SPI_STATE_INIT:
;;;248            case SPI_XFER_COMPLETED:
;;;249            case SPI_BUFFER_RESOURCE_CONFIGURED:        
;;;250                mp_spi_tx_buf     = p_tx_buf;
;;;251                mp_spi_rx_buf     = p_rx_buf;
;;;252                m_spi_tx_buf_size = tx_buf_length;
;;;253                m_spi_rx_buf_size = rx_buf_length;        
;;;254                err_code          = NRF_SUCCESS;            
;;;255                            
;;;256                sm_state_change(SPI_BUFFER_RESOURCE_REQUESTED);             
;;;257                break;
;;;258    
;;;259            case SPI_BUFFER_RESOURCE_REQUESTED:
;;;260                err_code = NRF_ERROR_INVALID_STATE; 
;;;261                break;
;;;262                            
;;;263            default:
;;;264                // @note: execution of this code path would imply internal error in the design.
;;;265                err_code = NRF_ERROR_INTERNAL;             
;;;266                break;
;;;267        }
;;;268        
;;;269        return err_code;
;;;270    }
000170  b005              ADD      sp,sp,#0x14
000172  bdf0              POP      {r4-r7,pc}
                  |L1.372|
000174  4877              LDR      r0,|L1.852|
000176  7800              LDRB     r0,[r0,#0]            ;245  ; m_spi_state
000178  2800              CMP      r0,#0                 ;245
00017a  d006              BEQ      |L1.394|
00017c  2801              CMP      r0,#1                 ;245
00017e  d014              BEQ      |L1.426|
000180  2802              CMP      r0,#2                 ;245
000182  d004              BEQ      |L1.398|
000184  2803              CMP      r0,#3                 ;245
000186  d112              BNE      |L1.430|
000188  e000              B        |L1.396|
                  |L1.394|
00018a  bf00              NOP                            ;248
                  |L1.396|
00018c  bf00              NOP                            ;249
                  |L1.398|
00018e  4876              LDR      r0,|L1.872|
000190  6005              STR      r5,[r0,#0]            ;250  ; mp_spi_tx_buf
000192  4876              LDR      r0,|L1.876|
000194  6006              STR      r6,[r0,#0]            ;251  ; mp_spi_rx_buf
000196  4876              LDR      r0,|L1.880|
000198  6007              STR      r7,[r0,#0]            ;252  ; m_spi_tx_buf_size
00019a  4976              LDR      r1,|L1.884|
00019c  9804              LDR      r0,[sp,#0x10]         ;253
00019e  6008              STR      r0,[r1,#0]            ;253  ; m_spi_rx_buf_size
0001a0  2400              MOVS     r4,#0                 ;254
0001a2  2001              MOVS     r0,#1                 ;256
0001a4  f7fffffe          BL       sm_state_change
0001a8  e003              B        |L1.434|
                  |L1.426|
0001aa  2408              MOVS     r4,#8                 ;260
0001ac  e001              B        |L1.434|
                  |L1.430|
0001ae  2403              MOVS     r4,#3                 ;265
0001b0  bf00              NOP                            ;266
                  |L1.434|
0001b2  bf00              NOP                            ;257
0001b4  4620              MOV      r0,r4                 ;269
0001b6  e7db              B        |L1.368|
;;;271    
                          ENDP

                  SPI1_TWI1_IRQHandler PROC
;;;276     */
;;;277    void SPI1_TWI1_IRQHandler(void)
0001b8  b510              PUSH     {r4,lr}
;;;278    {        
;;;279        // @note: as multiple events can be pending for processing, the correct event processing order 
;;;280        // is as follows:
;;;281        // - SPI semaphore acquired event.
;;;282        // - SPI transaction complete event.
;;;283        
;;;284        // Check for SPI semaphore acquired event.
;;;285        if (NRF_SPIS1->EVENTS_ACQUIRED != 0)
0001ba  4864              LDR      r0,|L1.844|
0001bc  6a80              LDR      r0,[r0,#0x28]
0001be  2800              CMP      r0,#0
0001c0  d020              BEQ      |L1.516|
;;;286        {            
;;;287            NRF_SPIS1->EVENTS_ACQUIRED = 0;                     
0001c2  2000              MOVS     r0,#0
0001c4  4961              LDR      r1,|L1.844|
0001c6  6288              STR      r0,[r1,#0x28]
;;;288            
;;;289            switch (m_spi_state)
0001c8  4862              LDR      r0,|L1.852|
0001ca  7800              LDRB     r0,[r0,#0]  ; m_spi_state
0001cc  2801              CMP      r0,#1
0001ce  d117              BNE      |L1.512|
;;;290            {                
;;;291                case SPI_BUFFER_RESOURCE_REQUESTED:                
;;;292                    NRF_SPIS1->TXDPTR = (uint32_t)mp_spi_tx_buf;
0001d0  4865              LDR      r0,|L1.872|
0001d2  6800              LDR      r0,[r0,#0]  ; mp_spi_tx_buf
0001d4  495c              LDR      r1,|L1.840|
0001d6  3140              ADDS     r1,r1,#0x40
0001d8  6048              STR      r0,[r1,#4]
;;;293                    NRF_SPIS1->RXDPTR = (uint32_t)mp_spi_rx_buf;
0001da  4864              LDR      r0,|L1.876|
0001dc  6800              LDR      r0,[r0,#0]  ; mp_spi_rx_buf
0001de  495a              LDR      r1,|L1.840|
0001e0  6348              STR      r0,[r1,#0x34]
;;;294                    NRF_SPIS1->MAXRX  = m_spi_rx_buf_size;
0001e2  4864              LDR      r0,|L1.884|
0001e4  6800              LDR      r0,[r0,#0]  ; m_spi_rx_buf_size
0001e6  6388              STR      r0,[r1,#0x38]
;;;295                    NRF_SPIS1->MAXTX  = m_spi_tx_buf_size;
0001e8  4861              LDR      r0,|L1.880|
0001ea  6800              LDR      r0,[r0,#0]  ; m_spi_tx_buf_size
0001ec  4956              LDR      r1,|L1.840|
0001ee  3140              ADDS     r1,r1,#0x40
0001f0  6088              STR      r0,[r1,#8]
;;;296                    
;;;297                    NRF_SPIS1->TASKS_RELEASE = 1u;
0001f2  2001              MOVS     r0,#1
0001f4  4960              LDR      r1,|L1.888|
0001f6  6288              STR      r0,[r1,#0x28]
;;;298                    
;;;299                    sm_state_change(SPI_BUFFER_RESOURCE_CONFIGURED);                                                                         
0001f8  2002              MOVS     r0,#2
0001fa  f7fffffe          BL       sm_state_change
;;;300                    break;
0001fe  e000              B        |L1.514|
                  |L1.512|
;;;301                    
;;;302                default:
;;;303                    // No implementation required.                    
;;;304                    break;
000200  bf00              NOP      
                  |L1.514|
000202  bf00              NOP                            ;300
                  |L1.516|
;;;305            }
;;;306        }
;;;307    
;;;308        // Check for SPI transaction complete event.
;;;309        if (NRF_SPIS1->EVENTS_END != 0)
000204  4851              LDR      r0,|L1.844|
000206  6840              LDR      r0,[r0,#4]
000208  2800              CMP      r0,#0
00020a  d00c              BEQ      |L1.550|
;;;310        {
;;;311            NRF_SPIS1->EVENTS_END = 0;            
00020c  2000              MOVS     r0,#0
00020e  494f              LDR      r1,|L1.844|
000210  6048              STR      r0,[r1,#4]
;;;312            
;;;313            switch (m_spi_state)
000212  4850              LDR      r0,|L1.852|
000214  7800              LDRB     r0,[r0,#0]  ; m_spi_state
000216  2802              CMP      r0,#2
000218  d103              BNE      |L1.546|
;;;314            {
;;;315                case SPI_BUFFER_RESOURCE_CONFIGURED:                                  
;;;316                    sm_state_change(SPI_XFER_COMPLETED);                                                             
00021a  2003              MOVS     r0,#3
00021c  f7fffffe          BL       sm_state_change
;;;317                    break;
000220  e000              B        |L1.548|
                  |L1.546|
;;;318    
;;;319                default:
;;;320                    // No implementation required.                    
;;;321                    break;                
000222  bf00              NOP      
                  |L1.548|
000224  bf00              NOP                            ;317
                  |L1.550|
;;;322            }    
;;;323        }    
;;;324    }
000226  bd10              POP      {r4,pc}
                          ENDP

                  NVIC_SetPriority PROC
;;;581     */
;;;582    __STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
000228  b510              PUSH     {r4,lr}
;;;583    {
;;;584      if(IRQn < 0) {
00022a  2800              CMP      r0,#0
00022c  da19              BGE      |L1.610|
;;;585        SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
00022e  4a53              LDR      r2,|L1.892|
000230  0703              LSLS     r3,r0,#28
000232  0f1b              LSRS     r3,r3,#28
000234  3b08              SUBS     r3,r3,#8
000236  089b              LSRS     r3,r3,#2
000238  009b              LSLS     r3,r3,#2
00023a  58d2              LDR      r2,[r2,r3]
00023c  0783              LSLS     r3,r0,#30
00023e  0edc              LSRS     r4,r3,#27
000240  23ff              MOVS     r3,#0xff
000242  40a3              LSLS     r3,r3,r4
000244  439a              BICS     r2,r2,r3
000246  078b              LSLS     r3,r1,#30
000248  0e1b              LSRS     r3,r3,#24
00024a  0784              LSLS     r4,r0,#30
00024c  0ee4              LSRS     r4,r4,#27
00024e  40a3              LSLS     r3,r3,r4
000250  431a              ORRS     r2,r2,r3
000252  4b4a              LDR      r3,|L1.892|
000254  0704              LSLS     r4,r0,#28
000256  0f24              LSRS     r4,r4,#28
000258  3c08              SUBS     r4,r4,#8
00025a  08a4              LSRS     r4,r4,#2
00025c  00a4              LSLS     r4,r4,#2
00025e  511a              STR      r2,[r3,r4]
000260  e018              B        |L1.660|
                  |L1.610|
;;;586            (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
;;;587      else {
;;;588        NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
000262  4a40              LDR      r2,|L1.868|
000264  2303              MOVS     r3,#3
000266  021b              LSLS     r3,r3,#8
000268  18d2              ADDS     r2,r2,r3
00026a  0883              LSRS     r3,r0,#2
00026c  009b              LSLS     r3,r3,#2
00026e  58d2              LDR      r2,[r2,r3]
000270  0783              LSLS     r3,r0,#30
000272  0edc              LSRS     r4,r3,#27
000274  23ff              MOVS     r3,#0xff
000276  40a3              LSLS     r3,r3,r4
000278  439a              BICS     r2,r2,r3
00027a  078b              LSLS     r3,r1,#30
00027c  0e1b              LSRS     r3,r3,#24
00027e  0784              LSLS     r4,r0,#30
000280  0ee4              LSRS     r4,r4,#27
000282  40a3              LSLS     r3,r3,r4
000284  431a              ORRS     r2,r2,r3
000286  4b37              LDR      r3,|L1.868|
000288  2403              MOVS     r4,#3
00028a  0224              LSLS     r4,r4,#8
00028c  191b              ADDS     r3,r3,r4
00028e  0884              LSRS     r4,r0,#2
000290  00a4              LSLS     r4,r4,#2
000292  511a              STR      r2,[r3,r4]
                  |L1.660|
;;;589            (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
;;;590    }
000294  bd10              POP      {r4,pc}
;;;591    
                          ENDP

                  state_entry_action_execute PROC
;;;186     */
;;;187    static __INLINE void state_entry_action_execute(void)
000296  b53e              PUSH     {r1-r5,lr}
;;;188    {
;;;189        spi_slave_evt_t event;
;;;190        
;;;191        switch (m_spi_state)
000298  482e              LDR      r0,|L1.852|
00029a  7800              LDRB     r0,[r0,#0]  ; m_spi_state
00029c  2801              CMP      r0,#1
00029e  d004              BEQ      |L1.682|
0002a0  2802              CMP      r0,#2
0002a2  d006              BEQ      |L1.690|
0002a4  2803              CMP      r0,#3
0002a6  d145              BNE      |L1.820|
0002a8  e021              B        |L1.750|
                  |L1.682|
;;;192        {                             
;;;193            case SPI_BUFFER_RESOURCE_REQUESTED:
;;;194                NRF_SPIS1->TASKS_ACQUIRE = 1u;                                  
0002aa  2001              MOVS     r0,#1
0002ac  4932              LDR      r1,|L1.888|
0002ae  6248              STR      r0,[r1,#0x24]
;;;195                break;            
0002b0  e041              B        |L1.822|
                  |L1.690|
;;;196         
;;;197            case SPI_BUFFER_RESOURCE_CONFIGURED:
;;;198                event.evt_type  = SPI_SLAVE_BUFFERS_SET_DONE;
0002b2  2000              MOVS     r0,#0
0002b4  4669              MOV      r1,sp
0002b6  7008              STRB     r0,[r1,#0]
;;;199                event.rx_amount = 0;
0002b8  9001              STR      r0,[sp,#4]
;;;200                event.tx_amount = 0;     
0002ba  9002              STR      r0,[sp,#8]
;;;201                
;;;202                APP_ERROR_CHECK_BOOL(m_event_callback != NULL);
0002bc  bf00              NOP      
0002be  481f              LDR      r0,|L1.828|
0002c0  6800              LDR      r0,[r0,#0]  ; m_event_callback
0002c2  2800              CMP      r0,#0
0002c4  d001              BEQ      |L1.714|
0002c6  2001              MOVS     r0,#1
0002c8  e000              B        |L1.716|
                  |L1.714|
0002ca  2000              MOVS     r0,#0
                  |L1.716|
0002cc  4604              MOV      r4,r0
0002ce  2c00              CMP      r4,#0
0002d0  d106              BNE      |L1.736|
0002d2  bf00              NOP      
0002d4  2200              MOVS     r2,#0
0002d6  4611              MOV      r1,r2
0002d8  4610              MOV      r0,r2
0002da  f7fffffe          BL       app_error_handler
0002de  bf00              NOP      
                  |L1.736|
0002e0  bf00              NOP      
;;;203                m_event_callback(event);         
0002e2  4b16              LDR      r3,|L1.828|
0002e4  4668              MOV      r0,sp
0002e6  c807              LDM      r0,{r0-r2}
0002e8  681b              LDR      r3,[r3,#0]  ; m_event_callback
0002ea  4798              BLX      r3
;;;204                break;
0002ec  e023              B        |L1.822|
                  |L1.750|
;;;205                
;;;206            case SPI_XFER_COMPLETED:        
;;;207                event.evt_type  = SPI_SLAVE_XFER_DONE;
0002ee  2001              MOVS     r0,#1
0002f0  4669              MOV      r1,sp
0002f2  7008              STRB     r0,[r1,#0]
;;;208                event.rx_amount = NRF_SPIS1->AMOUNTRX;
0002f4  4814              LDR      r0,|L1.840|
0002f6  6bc0              LDR      r0,[r0,#0x3c]
0002f8  9001              STR      r0,[sp,#4]
;;;209                event.tx_amount = NRF_SPIS1->AMOUNTTX;
0002fa  4813              LDR      r0,|L1.840|
0002fc  3040              ADDS     r0,r0,#0x40
0002fe  68c0              LDR      r0,[r0,#0xc]
000300  9002              STR      r0,[sp,#8]
;;;210                
;;;211                APP_ERROR_CHECK_BOOL(m_event_callback != NULL);
000302  bf00              NOP      
000304  480d              LDR      r0,|L1.828|
000306  6800              LDR      r0,[r0,#0]  ; m_event_callback
000308  2800              CMP      r0,#0
00030a  d001              BEQ      |L1.784|
00030c  2001              MOVS     r0,#1
00030e  e000              B        |L1.786|
                  |L1.784|
000310  2000              MOVS     r0,#0
                  |L1.786|
000312  4604              MOV      r4,r0
000314  2c00              CMP      r4,#0
000316  d106              BNE      |L1.806|
000318  bf00              NOP      
00031a  2200              MOVS     r2,#0
00031c  4611              MOV      r1,r2
00031e  4610              MOV      r0,r2
000320  f7fffffe          BL       app_error_handler
000324  bf00              NOP      
                  |L1.806|
000326  bf00              NOP      
;;;212                m_event_callback(event);
000328  4b04              LDR      r3,|L1.828|
00032a  4668              MOV      r0,sp
00032c  c807              LDM      r0,{r0-r2}
00032e  681b              LDR      r3,[r3,#0]  ; m_event_callback
000330  4798              BLX      r3
;;;213                break;
000332  e000              B        |L1.822|
                  |L1.820|
;;;214                
;;;215            default:
;;;216                // No implementation required.            
;;;217                break;
000334  bf00              NOP      
                  |L1.822|
000336  bf00              NOP                            ;195
;;;218        }
;;;219    }
000338  bd3e              POP      {r1-r5,pc}
;;;220    
                          ENDP

00033a  0000              DCW      0x0000
                  |L1.828|
                          DCD      m_event_callback
                  |L1.832|
                          DCD      m_cs_pullup_config
                  |L1.836|
                          DCD      m_drive_config
                  |L1.840|
                          DCD      0x40004500
                  |L1.844|
                          DCD      0x40004100
                  |L1.848|
                          DCD      0x40004200
                  |L1.852|
                          DCD      m_spi_state
                  |L1.856|
                          DCD      0xe000e280
                  |L1.860|
                          DCD      0x00000402
                  |L1.864|
                          DCD      0x40004300
                  |L1.868|
                          DCD      0xe000e100
                  |L1.872|
                          DCD      mp_spi_tx_buf
                  |L1.876|
                          DCD      mp_spi_rx_buf
                  |L1.880|
                          DCD      m_spi_tx_buf_size
                  |L1.884|
                          DCD      m_spi_rx_buf_size
                  |L1.888|
                          DCD      0x40004000
                  |L1.892|
                          DCD      0xe000ed1c

                          AREA ||.data||, DATA, ALIGN=2

                  m_cs_pullup_config
                          DCD      0x00000000
                  m_drive_config
                          DCD      0x00000000
                  mp_spi_tx_buf
                          DCD      0x00000000
                  mp_spi_rx_buf
                          DCD      0x00000000
                  m_spi_tx_buf_size
                          DCD      0x00000000
                  m_spi_rx_buf_size
                          DCD      0x00000000
                  m_spi_state
000018  00000000          DCB      0x00,0x00,0x00,0x00
                  m_event_callback
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "..\\..\\..\\..\\..\\..\\components\\drivers_nrf\\spi_slave\\spi_slave.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___11_spi_slave_c_29d9a3c3____REV16|
#line 129 "..\\..\\..\\..\\..\\..\\components\\toolchain\\gcc\\core_cmInstr.h"
|__asm___11_spi_slave_c_29d9a3c3____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___11_spi_slave_c_29d9a3c3____REVSH|
#line 144
|__asm___11_spi_slave_c_29d9a3c3____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
