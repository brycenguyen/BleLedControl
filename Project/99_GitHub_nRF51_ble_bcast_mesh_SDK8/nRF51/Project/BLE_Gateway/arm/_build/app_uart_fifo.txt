; generated by Component: ARM Compiler 5.04 update 1 (build 49) Tool: ArmCC [5040049]
; commandline ArmCC [--c99 --list --debug -c --asm --interleave -o.\_build\app_uart_fifo.o --asm_dir=.\_build\ --list_dir=.\_build\ --depend=.\_build\app_uart_fifo.d --cpu=Cortex-M0 --apcs=interwork -O0 -I..\include -I..\..\..\rbc_mesh -I..\..\..\rbc_mesh\include -I..\..\..\SDK\bsp -I..\..\..\..\..\..\components\softdevice\s110\headers -I..\..\..\..\..\..\components\toolchain\gcc -I..\..\..\..\..\..\components\libraries\util -I..\..\..\..\..\..\components\ble\common -I..\..\..\..\..\..\components\drivers_nrf\hal -I..\..\..\..\..\..\components\drivers_nrf\spi_slave -I..\..\..\..\..\..\components\softdevice\common\softdevice_handler -I..\..\..\..\..\..\components\libraries\fifo -I..\..\..\..\..\..\components\drivers_nrf\uart -I..\..\..\..\..\..\components\drivers_nrf\gpiote -I..\..\..\..\..\..\components\drivers_nrf\config -I..\..\..\..\..\..\components\drivers_nrf\common -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\4.1.0\CMSIS\Include -IC:\Keil_v5\ARM\PACK\NordicSemiconductor\nRF_DeviceFamilyPack\7.2.1\Device\Include -D__MICROLIB -DNRF51 -DBOARD_RHC -DNRF51 -DBLE_STACK_SUPPORT_REQD -DS110 -DSOFTDEVICE_PRESENT --omf_browse=.\_build\app_uart_fifo.crf ..\..\..\..\..\..\components\drivers_nrf\uart\app_uart_fifo.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  action_uart_deactivate PROC
;;;60      */
;;;61     static void action_uart_deactivate(void)
000000  2000              MOVS     r0,#0
;;;62     {
;;;63         m_current_state         = UART_OFF;
000002  49fe              LDR      r1,|L1.1020|
000004  7008              STRB     r0,[r1,#0]
;;;64         NRF_UART0->TASKS_STOPTX = 1;
000006  2001              MOVS     r0,#1
000008  49fd              LDR      r1,|L1.1024|
00000a  60c8              STR      r0,[r1,#0xc]
;;;65         NRF_UART0->TASKS_STOPRX = 1;
00000c  6048              STR      r0,[r1,#4]
;;;66         NRF_UART0->ENABLE       = (UART_ENABLE_ENABLE_Disabled << UART_ENABLE_ENABLE_Pos);
00000e  2000              MOVS     r0,#0
000010  49fc              LDR      r1,|L1.1028|
000012  6008              STR      r0,[r1,#0]
;;;67     }
000014  4770              BX       lr
;;;68     
                          ENDP

                  action_tx_stop PROC
;;;69     
;;;70     void action_tx_stop()
000016  b51c              PUSH     {r2-r4,lr}
;;;71     {
;;;72         app_uart_evt_t app_uart_event;
;;;73         // No more bytes in FIFO, terminate transmission.
;;;74         NRF_UART0->TASKS_STOPTX = 1;
000018  2001              MOVS     r0,#1
00001a  49f9              LDR      r1,|L1.1024|
00001c  60c8              STR      r0,[r1,#0xc]
;;;75         m_current_state         = UART_READY;
00001e  49f7              LDR      r1,|L1.1020|
000020  7008              STRB     r0,[r1,#0]
;;;76         // Last byte from FIFO transmitted, notify the application.
;;;77         // Notify that new data is available if this was first byte put in the buffer.
;;;78         app_uart_event.evt_type = APP_UART_TX_EMPTY;
000022  2003              MOVS     r0,#3
000024  4669              MOV      r1,sp
000026  7008              STRB     r0,[r1,#0]
;;;79         m_event_handler(&app_uart_event);
000028  4668              MOV      r0,sp
00002a  49f7              LDR      r1,|L1.1032|
00002c  6809              LDR      r1,[r1,#0]  ; m_event_handler
00002e  4788              BLX      r1
;;;80     }
000030  bd1c              POP      {r2-r4,pc}
;;;81     
                          ENDP

                  action_tx_send PROC
;;;85      */
;;;86     static void action_tx_send()
000032  b508              PUSH     {r3,lr}
;;;87     {
;;;88         uint8_t tx_byte;
;;;89     
;;;90         if (m_current_state != UART_ON)
000034  48f1              LDR      r0,|L1.1020|
000036  7800              LDRB     r0,[r0,#0]  ; m_current_state
000038  2802              CMP      r0,#2
00003a  d002              BEQ      |L1.66|
;;;91         {
;;;92             // Start the UART.
;;;93             NRF_UART0->TASKS_STARTTX = 1;
00003c  2001              MOVS     r0,#1
00003e  49f0              LDR      r1,|L1.1024|
000040  6088              STR      r0,[r1,#8]
                  |L1.66|
;;;94         }
;;;95     
;;;96         if (app_fifo_get(&m_tx_fifo, &tx_byte) != NRF_SUCCESS)
000042  4669              MOV      r1,sp
000044  48f1              LDR      r0,|L1.1036|
000046  f7fffffe          BL       app_fifo_get
00004a  2800              CMP      r0,#0
00004c  d002              BEQ      |L1.84|
;;;97         {
;;;98             action_tx_stop();
00004e  f7fffffe          BL       action_tx_stop
                  |L1.82|
;;;99             return;
;;;100        }
;;;101    
;;;102        NRF_UART0->INTENCLR = (UART_INTENSET_TXDRDY_Set << UART_INTENSET_TXDRDY_Pos);
;;;103        NRF_UART0->TXD      = tx_byte;
;;;104        m_current_state     = UART_ON;
;;;105        NRF_UART0->INTENSET = (UART_INTENSET_TXDRDY_Set << UART_INTENSET_TXDRDY_Pos);
;;;106    }
000052  bd08              POP      {r3,pc}
                  |L1.84|
000054  2080              MOVS     r0,#0x80              ;102
000056  49ee              LDR      r1,|L1.1040|
000058  6088              STR      r0,[r1,#8]            ;102
00005a  4668              MOV      r0,sp                 ;103
00005c  7800              LDRB     r0,[r0,#0]            ;103
00005e  49e9              LDR      r1,|L1.1028|
000060  61c8              STR      r0,[r1,#0x1c]         ;103
000062  2002              MOVS     r0,#2                 ;104
000064  49e5              LDR      r1,|L1.1020|
000066  7008              STRB     r0,[r1,#0]            ;104
000068  2080              MOVS     r0,#0x80              ;105
00006a  49e9              LDR      r1,|L1.1040|
00006c  6048              STR      r0,[r1,#4]            ;105
00006e  bf00              NOP      
000070  e7ef              B        |L1.82|
;;;107    
                          ENDP

                  action_tx_ready PROC
;;;108    
;;;109    static void action_tx_ready()
000072  b510              PUSH     {r4,lr}
;;;110    {
;;;111        // Get next byte from FIFO.
;;;112        if (FIFO_LENGTH(m_tx_fifo) != 0)
000074  48e5              LDR      r0,|L1.1036|
000076  f7fffffe          BL       fifo_length
00007a  2800              CMP      r0,#0
00007c  d002              BEQ      |L1.132|
;;;113        {
;;;114            action_tx_send();
00007e  f7fffffe          BL       action_tx_send
000082  e001              B        |L1.136|
                  |L1.132|
;;;115        }
;;;116        else
;;;117        {
;;;118            action_tx_stop();
000084  f7fffffe          BL       action_tx_stop
                  |L1.136|
;;;119        }
;;;120    }
000088  bd10              POP      {r4,pc}
;;;121    
                          ENDP

                  on_cts_high PROC
;;;124     */
;;;125    static void on_cts_high(void)
00008a  b510              PUSH     {r4,lr}
;;;126    {
;;;127        switch (m_current_state)
00008c  48db              LDR      r0,|L1.1020|
00008e  7800              LDRB     r0,[r0,#0]  ; m_current_state
000090  2801              CMP      r0,#1
000092  d002              BEQ      |L1.154|
000094  2802              CMP      r0,#2
000096  d107              BNE      |L1.168|
000098  e002              B        |L1.160|
                  |L1.154|
;;;128        {
;;;129            case UART_READY:
;;;130                action_uart_deactivate();
00009a  f7fffffe          BL       action_uart_deactivate
;;;131                break;
00009e  e004              B        |L1.170|
                  |L1.160|
;;;132    
;;;133            case UART_ON:
;;;134                m_current_state = UART_WAIT_CLOSE;
0000a0  2003              MOVS     r0,#3
0000a2  49d6              LDR      r1,|L1.1020|
0000a4  7008              STRB     r0,[r1,#0]
;;;135                break;
0000a6  e000              B        |L1.170|
                  |L1.168|
;;;136    
;;;137            default:
;;;138                // Nothing to do.
;;;139                break;
0000a8  bf00              NOP      
                  |L1.170|
0000aa  bf00              NOP                            ;131
;;;140        }
;;;141    }
0000ac  bd10              POP      {r4,pc}
;;;142    
                          ENDP

                  on_cts_low PROC
;;;145     */
;;;146    static void on_cts_low(void)
0000ae  b510              PUSH     {r4,lr}
;;;147    {
;;;148        switch (m_current_state)
0000b0  48d2              LDR      r0,|L1.1020|
0000b2  7800              LDRB     r0,[r0,#0]  ; m_current_state
0000b4  2800              CMP      r0,#0
0000b6  d002              BEQ      |L1.190|
0000b8  2803              CMP      r0,#3
0000ba  d116              BNE      |L1.234|
0000bc  e011              B        |L1.226|
                  |L1.190|
;;;149        {
;;;150            case UART_OFF:
;;;151                NRF_UART0->ENABLE        = (UART_ENABLE_ENABLE_Enabled << UART_ENABLE_ENABLE_Pos);
0000be  2004              MOVS     r0,#4
0000c0  49d0              LDR      r1,|L1.1028|
0000c2  6008              STR      r0,[r1,#0]
;;;152                NRF_UART0->TASKS_STARTRX = 1;
0000c4  2001              MOVS     r0,#1
0000c6  49ce              LDR      r1,|L1.1024|
0000c8  6008              STR      r0,[r1,#0]
;;;153    
;;;154                if (FIFO_LENGTH(m_tx_fifo) != 0)
0000ca  48d0              LDR      r0,|L1.1036|
0000cc  f7fffffe          BL       fifo_length
0000d0  2800              CMP      r0,#0
0000d2  d002              BEQ      |L1.218|
;;;155                {
;;;156                    action_tx_send();
0000d4  f7fffffe          BL       action_tx_send
0000d8  e002              B        |L1.224|
                  |L1.218|
;;;157                }
;;;158                else
;;;159                {
;;;160                    m_current_state = UART_READY;
0000da  2001              MOVS     r0,#1
0000dc  49c7              LDR      r1,|L1.1020|
0000de  7008              STRB     r0,[r1,#0]
                  |L1.224|
;;;161                }
;;;162                break;
0000e0  e004              B        |L1.236|
                  |L1.226|
;;;163    
;;;164            case UART_WAIT_CLOSE:
;;;165                m_current_state = UART_ON;
0000e2  2002              MOVS     r0,#2
0000e4  49c5              LDR      r1,|L1.1020|
0000e6  7008              STRB     r0,[r1,#0]
;;;166                break;
0000e8  e000              B        |L1.236|
                  |L1.234|
;;;167    
;;;168            default:
;;;169                // Nothing to do.
;;;170                break;
0000ea  bf00              NOP      
                  |L1.236|
0000ec  bf00              NOP                            ;162
;;;171        }
;;;172    }
0000ee  bd10              POP      {r4,pc}
;;;173    
                          ENDP

                  on_tx_ready PROC
;;;176     */
;;;177    static void on_tx_ready(void)
0000f0  b510              PUSH     {r4,lr}
;;;178    {
;;;179        switch (m_current_state)
0000f2  48c2              LDR      r0,|L1.1020|
0000f4  7800              LDRB     r0,[r0,#0]  ; m_current_state
0000f6  2801              CMP      r0,#1
0000f8  d007              BEQ      |L1.266|
0000fa  2802              CMP      r0,#2
0000fc  d004              BEQ      |L1.264|
0000fe  2803              CMP      r0,#3
000100  d106              BNE      |L1.272|
;;;180        {
;;;181            case UART_WAIT_CLOSE:
;;;182                action_uart_deactivate();
000102  f7fffffe          BL       action_uart_deactivate
;;;183                break;
000106  e004              B        |L1.274|
                  |L1.264|
;;;184    
;;;185            case UART_ON:
;;;186            case UART_READY:
000108  bf00              NOP      
                  |L1.266|
;;;187                action_tx_ready();
00010a  f7fffffe          BL       action_tx_ready
;;;188                break;
00010e  e000              B        |L1.274|
                  |L1.272|
;;;189    
;;;190            default:
;;;191                // Nothing to do.
;;;192                break;
000110  bf00              NOP      
                  |L1.274|
000112  bf00              NOP                            ;183
;;;193        }
;;;194    }
000114  bd10              POP      {r4,pc}
;;;195    
                          ENDP

                  on_uart_put PROC
;;;198     */
;;;199    static void on_uart_put(void)
000116  b510              PUSH     {r4,lr}
;;;200    {
;;;201        if (m_current_state == UART_READY)
000118  48b8              LDR      r0,|L1.1020|
00011a  7800              LDRB     r0,[r0,#0]  ; m_current_state
00011c  2801              CMP      r0,#1
00011e  d101              BNE      |L1.292|
;;;202        {
;;;203            action_tx_send();
000120  f7fffffe          BL       action_tx_send
                  |L1.292|
;;;204        }
;;;205    }
000124  bd10              POP      {r4,pc}
;;;206    
                          ENDP

                  on_uart_close PROC
;;;209     */
;;;210    static void on_uart_close(void)
000126  b510              PUSH     {r4,lr}
;;;211    {
;;;212        action_uart_deactivate();
000128  f7fffffe          BL       action_uart_deactivate
;;;213    }
00012c  bd10              POP      {r4,pc}
;;;214    
                          ENDP

                  on_uart_event PROC
;;;219     */
;;;220    static void on_uart_event(app_uart_state_event_t event)
00012e  b510              PUSH     {r4,lr}
;;;221    {
000130  4604              MOV      r4,r0
;;;222        switch (event)
000132  0023              MOVS     r3,r4
000134  f7fffffe          BL       __ARM_common_switch8
000138  0504070d          DCB      0x05,0x04,0x07,0x0d
00013c  0a101300          DCB      0x0a,0x10,0x13,0x00
;;;223        {
;;;224            case ON_CTS_HIGH:
;;;225                on_cts_high();
000140  f7fffffe          BL       on_cts_high
;;;226                break;
000144  e00c              B        |L1.352|
;;;227    
;;;228            case ON_CTS_LOW:
;;;229                on_cts_low();
000146  f7fffffe          BL       on_cts_low
;;;230                break;
00014a  e009              B        |L1.352|
;;;231    
;;;232            case ON_TX_READY:
;;;233                on_tx_ready();
00014c  f7fffffe          BL       on_tx_ready
;;;234                break;
000150  e006              B        |L1.352|
;;;235    
;;;236            case ON_UART_PUT:
;;;237                on_uart_put();
000152  f7fffffe          BL       on_uart_put
;;;238                break;
000156  e003              B        |L1.352|
;;;239    
;;;240            case ON_UART_CLOSE:
;;;241                on_uart_close();
000158  f7fffffe          BL       on_uart_close
;;;242                break;
00015c  e000              B        |L1.352|
;;;243    
;;;244            default:
;;;245                // All valid events are handled above.
;;;246                break;
00015e  bf00              NOP      
                  |L1.352|
000160  bf00              NOP                            ;226
;;;247        }
;;;248    }
000162  bd10              POP      {r4,pc}
;;;249    
                          ENDP

                  gpiote_uart_event_handler PROC
;;;252     */
;;;253    static void gpiote_uart_event_handler(nrf_drv_gpiote_pin_t pin, nrf_gpiote_polarity_t action)
000164  b570              PUSH     {r4-r6,lr}
;;;254    {
000166  4604              MOV      r4,r0
000168  460d              MOV      r5,r1
;;;255        if (nrf_drv_gpiote_in_is_set(pin))
00016a  4620              MOV      r0,r4
00016c  f7fffffe          BL       nrf_drv_gpiote_in_is_set
000170  2800              CMP      r0,#0
000172  d003              BEQ      |L1.380|
;;;256        {
;;;257            on_uart_event(ON_CTS_HIGH);
000174  2000              MOVS     r0,#0
000176  f7fffffe          BL       on_uart_event
00017a  e002              B        |L1.386|
                  |L1.380|
;;;258        }
;;;259        else
;;;260        {
;;;261            on_uart_event(ON_CTS_LOW);
00017c  2001              MOVS     r0,#1
00017e  f7fffffe          BL       on_uart_event
                  |L1.386|
;;;262        }
;;;263    }
000182  bd70              POP      {r4-r6,pc}
;;;264    
                          ENDP

                  UART0_IRQHandler PROC
;;;270     */
;;;271    void UART0_IRQHandler(void)
000184  b51c              PUSH     {r2-r4,lr}
;;;272    {
;;;273        // Handle reception
;;;274        if (NRF_UART0->EVENTS_RXDRDY != 0)
000186  48a3              LDR      r0,|L1.1044|
000188  6880              LDR      r0,[r0,#8]
00018a  2800              CMP      r0,#0
00018c  d022              BEQ      |L1.468|
;;;275        {
;;;276            uint32_t err_code;
;;;277    
;;;278            // Clear UART RX event flag
;;;279            NRF_UART0->EVENTS_RXDRDY = 0;
00018e  2000              MOVS     r0,#0
000190  49a0              LDR      r1,|L1.1044|
000192  6088              STR      r0,[r1,#8]
;;;280    
;;;281            // Write received byte to FIFO
;;;282            err_code = app_fifo_put(&m_rx_fifo, (uint8_t)NRF_UART0->RXD);
000194  489b              LDR      r0,|L1.1028|
000196  6980              LDR      r0,[r0,#0x18]
000198  b2c1              UXTB     r1,r0
00019a  489f              LDR      r0,|L1.1048|
00019c  f7fffffe          BL       app_fifo_put
0001a0  4604              MOV      r4,r0
;;;283            if (err_code != NRF_SUCCESS)
0001a2  2c00              CMP      r4,#0
0001a4  d008              BEQ      |L1.440|
;;;284            {
;;;285                app_uart_evt_t app_uart_event;
;;;286                app_uart_event.evt_type          = APP_UART_FIFO_ERROR;
0001a6  2001              MOVS     r0,#1
0001a8  4669              MOV      r1,sp
0001aa  7008              STRB     r0,[r1,#0]
;;;287                app_uart_event.data.error_code   = err_code;
0001ac  9401              STR      r4,[sp,#4]
;;;288                m_event_handler(&app_uart_event);
0001ae  4668              MOV      r0,sp
0001b0  4995              LDR      r1,|L1.1032|
0001b2  6809              LDR      r1,[r1,#0]  ; m_event_handler
0001b4  4788              BLX      r1
;;;289            }
0001b6  e00c              B        |L1.466|
                  |L1.440|
;;;290            // Notify that new data is available if this was first byte put in the buffer.
;;;291            else if (FIFO_LENGTH(m_rx_fifo) == 1)
0001b8  4897              LDR      r0,|L1.1048|
0001ba  f7fffffe          BL       fifo_length
0001be  2801              CMP      r0,#1
0001c0  d107              BNE      |L1.466|
;;;292            {
;;;293                app_uart_evt_t app_uart_event;
;;;294                app_uart_event.evt_type = APP_UART_DATA_READY;
0001c2  2000              MOVS     r0,#0
0001c4  4669              MOV      r1,sp
0001c6  7008              STRB     r0,[r1,#0]
;;;295                m_event_handler(&app_uart_event);
0001c8  4668              MOV      r0,sp
0001ca  498f              LDR      r1,|L1.1032|
0001cc  6809              LDR      r1,[r1,#0]  ; m_event_handler
0001ce  4788              BLX      r1
;;;296            }
0001d0  bf00              NOP      
                  |L1.466|
;;;297            else
;;;298            {
;;;299                // Do nothing, only send event if first byte was added or overflow in FIFO occurred.
;;;300            }
;;;301        }
0001d2  bf00              NOP      
                  |L1.468|
;;;302    
;;;303        // Handle transmission.
;;;304        if (NRF_UART0->EVENTS_TXDRDY != 0)
0001d4  488f              LDR      r0,|L1.1044|
0001d6  69c0              LDR      r0,[r0,#0x1c]
0001d8  2800              CMP      r0,#0
0001da  d005              BEQ      |L1.488|
;;;305        {
;;;306            // Clear UART TX event flag.
;;;307            NRF_UART0->EVENTS_TXDRDY = 0;
0001dc  2000              MOVS     r0,#0
0001de  498d              LDR      r1,|L1.1044|
0001e0  61c8              STR      r0,[r1,#0x1c]
;;;308            on_uart_event(ON_TX_READY);
0001e2  2003              MOVS     r0,#3
0001e4  f7fffffe          BL       on_uart_event
                  |L1.488|
;;;309        }
;;;310    
;;;311        // Handle errors.
;;;312        if (NRF_UART0->EVENTS_ERROR != 0)
0001e8  488a              LDR      r0,|L1.1044|
0001ea  6a40              LDR      r0,[r0,#0x24]
0001ec  2800              CMP      r0,#0
0001ee  d00f              BEQ      |L1.528|
;;;313        {
;;;314            uint32_t       error_source;
;;;315            app_uart_evt_t app_uart_event;
;;;316    
;;;317            // Clear UART ERROR event flag.
;;;318            NRF_UART0->EVENTS_ERROR = 0;
0001f0  2000              MOVS     r0,#0
0001f2  4988              LDR      r1,|L1.1044|
0001f4  6248              STR      r0,[r1,#0x24]
;;;319    
;;;320            // Clear error source.
;;;321            error_source        = NRF_UART0->ERRORSRC;
0001f6  4883              LDR      r0,|L1.1028|
0001f8  3880              SUBS     r0,r0,#0x80
0001fa  6804              LDR      r4,[r0,#0]
;;;322            NRF_UART0->ERRORSRC = error_source;
0001fc  6004              STR      r4,[r0,#0]
;;;323    
;;;324            app_uart_event.evt_type                 = APP_UART_COMMUNICATION_ERROR;
0001fe  2002              MOVS     r0,#2
000200  4669              MOV      r1,sp
000202  7008              STRB     r0,[r1,#0]
;;;325            app_uart_event.data.error_communication = error_source;
000204  9401              STR      r4,[sp,#4]
;;;326    
;;;327            m_event_handler(&app_uart_event);
000206  4668              MOV      r0,sp
000208  497f              LDR      r1,|L1.1032|
00020a  6809              LDR      r1,[r1,#0]  ; m_event_handler
00020c  4788              BLX      r1
;;;328        }
00020e  bf00              NOP      
                  |L1.528|
;;;329    }
000210  bd1c              POP      {r2-r4,pc}
;;;330    
                          ENDP

                  uart_no_flow_control_init PROC
;;;333     */
;;;334    static void uart_no_flow_control_init(void)
000212  2004              MOVS     r0,#4
;;;335    {
;;;336        NRF_UART0->ENABLE        = (UART_ENABLE_ENABLE_Enabled << UART_ENABLE_ENABLE_Pos);
000214  497b              LDR      r1,|L1.1028|
000216  6008              STR      r0,[r1,#0]
;;;337        NRF_UART0->EVENTS_RXDRDY = 0;
000218  2000              MOVS     r0,#0
00021a  497e              LDR      r1,|L1.1044|
00021c  6088              STR      r0,[r1,#8]
;;;338        NRF_UART0->EVENTS_TXDRDY = 0;
00021e  61c8              STR      r0,[r1,#0x1c]
;;;339    
;;;340        NRF_UART0->CONFIG       &= ~(UART_CONFIG_HWFC_Enabled << UART_CONFIG_HWFC_Pos);
000220  4878              LDR      r0,|L1.1028|
000222  3040              ADDS     r0,r0,#0x40
000224  6ac0              LDR      r0,[r0,#0x2c]
000226  0840              LSRS     r0,r0,#1
000228  0040              LSLS     r0,r0,#1
00022a  4976              LDR      r1,|L1.1028|
00022c  3140              ADDS     r1,r1,#0x40
00022e  62c8              STR      r0,[r1,#0x2c]
;;;341    
;;;342        NRF_UART0->PSELRTS       = UART_PIN_DISCONNECTED;
000230  2000              MOVS     r0,#0
000232  43c0              MVNS     r0,r0
000234  4973              LDR      r1,|L1.1028|
000236  6088              STR      r0,[r1,#8]
;;;343        NRF_UART0->PSELCTS       = UART_PIN_DISCONNECTED;
000238  6108              STR      r0,[r1,#0x10]
;;;344    
;;;345        NRF_UART0->TASKS_STARTTX = 1;
00023a  2001              MOVS     r0,#1
00023c  4970              LDR      r1,|L1.1024|
00023e  6088              STR      r0,[r1,#8]
;;;346        NRF_UART0->TASKS_STARTRX = 1;
000240  6008              STR      r0,[r1,#0]
;;;347    }
000242  4770              BX       lr
;;;348    
                          ENDP

                  uart_standard_flow_control_init PROC
;;;351     */
;;;352    static void uart_standard_flow_control_init(const app_uart_comm_params_t * p_comm_params)
000244  2104              MOVS     r1,#4
;;;353    {
;;;354        NRF_UART0->ENABLE        = (UART_ENABLE_ENABLE_Enabled << UART_ENABLE_ENABLE_Pos);
000246  4a6f              LDR      r2,|L1.1028|
000248  6011              STR      r1,[r2,#0]
;;;355        NRF_UART0->EVENTS_RXDRDY = 0;
00024a  2100              MOVS     r1,#0
00024c  4a71              LDR      r2,|L1.1044|
00024e  6091              STR      r1,[r2,#8]
;;;356        NRF_UART0->EVENTS_TXDRDY = 0;
000250  61d1              STR      r1,[r2,#0x1c]
;;;357    
;;;358        NRF_UART0->CONFIG       |= (UART_CONFIG_HWFC_Enabled << UART_CONFIG_HWFC_Pos);
000252  496c              LDR      r1,|L1.1028|
000254  3140              ADDS     r1,r1,#0x40
000256  6ac9              LDR      r1,[r1,#0x2c]
000258  2201              MOVS     r2,#1
00025a  4311              ORRS     r1,r1,r2
00025c  4a69              LDR      r2,|L1.1028|
00025e  3240              ADDS     r2,r2,#0x40
000260  62d1              STR      r1,[r2,#0x2c]
;;;359    
;;;360        NRF_UART0->PSELCTS       = p_comm_params->cts_pin_no;
000262  78c1              LDRB     r1,[r0,#3]
000264  4a67              LDR      r2,|L1.1028|
000266  6111              STR      r1,[r2,#0x10]
;;;361        NRF_UART0->PSELRTS       = p_comm_params->rts_pin_no;
000268  7881              LDRB     r1,[r0,#2]
00026a  6091              STR      r1,[r2,#8]
;;;362    
;;;363        NRF_UART0->TASKS_STARTTX = 1;
00026c  2101              MOVS     r1,#1
00026e  4a64              LDR      r2,|L1.1024|
000270  6091              STR      r1,[r2,#8]
;;;364        NRF_UART0->TASKS_STARTRX = 1;
000272  6011              STR      r1,[r2,#0]
;;;365    }
000274  4770              BX       lr
;;;366    
                          ENDP

                  app_uart_init PROC
;;;367    
;;;368    uint32_t app_uart_init(const app_uart_comm_params_t * p_comm_params,
000276  b5ff              PUSH     {r0-r7,lr}
;;;369                                 app_uart_buffers_t *     p_buffers,
;;;370                                 app_uart_event_handler_t event_handler,
;;;371                                 app_irq_priority_t       irq_priority,
;;;372                                 uint16_t *               p_app_uart_uid)
;;;373    {
000278  b083              SUB      sp,sp,#0xc
00027a  4604              MOV      r4,r0
00027c  460e              MOV      r6,r1
;;;374        uint32_t err_code;
;;;375    
;;;376        m_current_state = UART_OFF;
00027e  2000              MOVS     r0,#0
000280  495e              LDR      r1,|L1.1020|
000282  7008              STRB     r0,[r1,#0]
;;;377        m_event_handler = event_handler;
000284  4960              LDR      r1,|L1.1032|
000286  9805              LDR      r0,[sp,#0x14]
000288  6008              STR      r0,[r1,#0]  ; m_event_handler
;;;378    
;;;379        if (p_buffers == NULL)
00028a  2e00              CMP      r6,#0
00028c  d102              BNE      |L1.660|
;;;380        {
;;;381            return NRF_ERROR_INVALID_PARAM;
00028e  2007              MOVS     r0,#7
                  |L1.656|
;;;382        }
;;;383    
;;;384        // Configure buffer RX buffer.
;;;385        err_code = app_fifo_init(&m_rx_fifo, p_buffers->rx_buf, p_buffers->rx_buf_size);
;;;386        if (err_code != NRF_SUCCESS)
;;;387        {
;;;388            // Propagate error code.
;;;389            return err_code;
;;;390        }
;;;391    
;;;392        // Configure buffer TX buffer.
;;;393        err_code = app_fifo_init(&m_tx_fifo, p_buffers->tx_buf, p_buffers->tx_buf_size);
;;;394        if (err_code != NRF_SUCCESS)
;;;395        {
;;;396            // Propagate error code.
;;;397            return err_code;
;;;398        }
;;;399    
;;;400        // Configure RX and TX pins.
;;;401        nrf_gpio_cfg_output(p_comm_params->tx_pin_no);
;;;402        nrf_gpio_cfg_input(p_comm_params->rx_pin_no, NRF_GPIO_PIN_NOPULL);
;;;403    
;;;404        NRF_UART0->PSELTXD = p_comm_params->tx_pin_no;
;;;405        NRF_UART0->PSELRXD = p_comm_params->rx_pin_no;
;;;406    
;;;407        // Configure baud rate and parity.
;;;408        NRF_UART0->BAUDRATE = (p_comm_params->baud_rate << UART_BAUDRATE_BAUDRATE_Pos);
;;;409        if (p_comm_params->use_parity)
;;;410        {
;;;411            NRF_UART0->CONFIG = (UART_CONFIG_PARITY_Included << UART_CONFIG_PARITY_Pos);
;;;412        }
;;;413        else
;;;414        {
;;;415            NRF_UART0->CONFIG = (UART_CONFIG_PARITY_Excluded << UART_CONFIG_PARITY_Pos);
;;;416        }
;;;417    
;;;418        if (p_comm_params->flow_control == APP_UART_FLOW_CONTROL_LOW_POWER)
;;;419        {
;;;420            if (!nrf_drv_gpiote_is_init())
;;;421            {
;;;422                err_code = nrf_drv_gpiote_init();
;;;423                if (err_code != NRF_SUCCESS)
;;;424                {
;;;425                    return err_code;
;;;426                }
;;;427            }
;;;428    
;;;429            // Configure hardware flow control.
;;;430            nrf_drv_gpiote_out_config_t rts_config = GPIOTE_CONFIG_OUT_SIMPLE(true);
;;;431            err_code = nrf_drv_gpiote_out_init(p_comm_params->rts_pin_no, &rts_config);
;;;432            if (err_code != NRF_SUCCESS)
;;;433            {
;;;434                return err_code;
;;;435            }
;;;436    
;;;437            NRF_UART0->PSELCTS = UART_PIN_DISCONNECTED;
;;;438            NRF_UART0->PSELRTS = p_comm_params->rts_pin_no;
;;;439            NRF_UART0->CONFIG |= (UART_CONFIG_HWFC_Enabled << UART_CONFIG_HWFC_Pos);
;;;440    
;;;441            // Setup the gpiote to handle pin events on cts-pin.
;;;442            // For the UART we want to detect both low->high and high->low transitions in order to
;;;443            // know when to activate/de-activate the TX/RX in the UART.
;;;444            // Configure pin.
;;;445            nrf_drv_gpiote_in_config_t cts_config = GPIOTE_CONFIG_IN_SENSE_TOGGLE(false);
;;;446            err_code = nrf_drv_gpiote_in_init(p_comm_params->cts_pin_no, &cts_config, gpiote_uart_event_handler);
;;;447            if (err_code != NRF_SUCCESS)
;;;448            {
;;;449                return err_code;
;;;450            }
;;;451    
;;;452            nrf_drv_gpiote_in_event_enable(p_comm_params->cts_pin_no, true);
;;;453    
;;;454            // UART CTS pin is active when low.
;;;455            if (nrf_drv_gpiote_in_is_set(p_comm_params->cts_pin_no))
;;;456            {
;;;457                on_uart_event(ON_CTS_HIGH);
;;;458            }
;;;459            else
;;;460            {
;;;461                on_uart_event(ON_CTS_LOW);
;;;462            }
;;;463    
;;;464        }
;;;465        else if (p_comm_params->flow_control == APP_UART_FLOW_CONTROL_ENABLED)
;;;466        {
;;;467            uart_standard_flow_control_init(p_comm_params);
;;;468            m_current_state = UART_READY;
;;;469        }
;;;470        else
;;;471        {
;;;472            uart_no_flow_control_init();
;;;473            m_current_state = UART_READY;
;;;474        }
;;;475    
;;;476        if (*p_app_uart_uid == UART_INSTANCE_ID_INVALID)
;;;477        {
;;;478            *p_app_uart_uid = m_instance_counter++;
;;;479        }
;;;480    
;;;481        // Enable UART interrupt
;;;482        NRF_UART0->INTENCLR = 0xffffffffUL;
;;;483        NRF_UART0->INTENSET = (UART_INTENSET_RXDRDY_Set << UART_INTENSET_RXDRDY_Pos) |
;;;484                              (UART_INTENSET_TXDRDY_Set << UART_INTENSET_TXDRDY_Pos) |
;;;485                              (UART_INTENSET_ERROR_Set << UART_INTENSET_ERROR_Pos);
;;;486    
;;;487        NVIC_ClearPendingIRQ(UART0_IRQn);
;;;488        NVIC_SetPriority(UART0_IRQn, irq_priority);
;;;489        NVIC_EnableIRQ(UART0_IRQn);
;;;490    
;;;491        return NRF_SUCCESS;
;;;492    }
000290  b007              ADD      sp,sp,#0x1c
000292  bdf0              POP      {r4-r7,pc}
                  |L1.660|
000294  88b0              LDRH     r0,[r6,#4]            ;385
000296  b282              UXTH     r2,r0                 ;385
000298  485f              LDR      r0,|L1.1048|
00029a  6831              LDR      r1,[r6,#0]            ;385
00029c  f7fffffe          BL       app_fifo_init
0002a0  4605              MOV      r5,r0                 ;385
0002a2  2d00              CMP      r5,#0                 ;386
0002a4  d001              BEQ      |L1.682|
0002a6  4628              MOV      r0,r5                 ;389
0002a8  e7f2              B        |L1.656|
                  |L1.682|
0002aa  89b0              LDRH     r0,[r6,#0xc]          ;393
0002ac  b282              UXTH     r2,r0                 ;393
0002ae  4857              LDR      r0,|L1.1036|
0002b0  68b1              LDR      r1,[r6,#8]            ;393
0002b2  f7fffffe          BL       app_fifo_init
0002b6  4605              MOV      r5,r0                 ;393
0002b8  2d00              CMP      r5,#0                 ;394
0002ba  d001              BEQ      |L1.704|
0002bc  4628              MOV      r0,r5                 ;397
0002be  e7e7              B        |L1.656|
                  |L1.704|
0002c0  7860              LDRB     r0,[r4,#1]            ;401
0002c2  2203              MOVS     r2,#3                 ;401
0002c4  2105              MOVS     r1,#5                 ;401
0002c6  0709              LSLS     r1,r1,#28             ;401
0002c8  2307              MOVS     r3,#7                 ;401
0002ca  021b              LSLS     r3,r3,#8              ;401
0002cc  18c9              ADDS     r1,r1,r3              ;401
0002ce  0083              LSLS     r3,r0,#2              ;401
0002d0  50ca              STR      r2,[r1,r3]            ;401
0002d2  bf00              NOP                            ;401
0002d4  7820              LDRB     r0,[r4,#0]            ;402
0002d6  2100              MOVS     r1,#0                 ;402
0002d8  008a              LSLS     r2,r1,#2              ;402
0002da  2305              MOVS     r3,#5                 ;402
0002dc  071b              LSLS     r3,r3,#28             ;402
0002de  2707              MOVS     r7,#7                 ;402
0002e0  023f              LSLS     r7,r7,#8              ;402
0002e2  19db              ADDS     r3,r3,r7              ;402
0002e4  0087              LSLS     r7,r0,#2              ;402
0002e6  51da              STR      r2,[r3,r7]            ;402
0002e8  bf00              NOP                            ;402
0002ea  7860              LDRB     r0,[r4,#1]            ;404
0002ec  4945              LDR      r1,|L1.1028|
0002ee  60c8              STR      r0,[r1,#0xc]          ;404
0002f0  7820              LDRB     r0,[r4,#0]            ;405
0002f2  6148              STR      r0,[r1,#0x14]         ;405
0002f4  68a0              LDR      r0,[r4,#8]            ;408
0002f6  6248              STR      r0,[r1,#0x24]         ;408
0002f8  7960              LDRB     r0,[r4,#5]            ;409
0002fa  2800              CMP      r0,#0                 ;409
0002fc  d004              BEQ      |L1.776|
0002fe  200e              MOVS     r0,#0xe               ;411
000300  4940              LDR      r1,|L1.1028|
000302  3140              ADDS     r1,r1,#0x40           ;411
000304  62c8              STR      r0,[r1,#0x2c]         ;411
000306  e003              B        |L1.784|
                  |L1.776|
000308  2000              MOVS     r0,#0                 ;415
00030a  493e              LDR      r1,|L1.1028|
00030c  3140              ADDS     r1,r1,#0x40           ;415
00030e  62c8              STR      r0,[r1,#0x2c]         ;415
                  |L1.784|
000310  7920              LDRB     r0,[r4,#4]            ;418
000312  2802              CMP      r0,#2                 ;418
000314  d143              BNE      |L1.926|
000316  f7fffffe          BL       nrf_drv_gpiote_is_init
00031a  2800              CMP      r0,#0                 ;420
00031c  d106              BNE      |L1.812|
00031e  f7fffffe          BL       nrf_drv_gpiote_init
000322  4605              MOV      r5,r0                 ;422
000324  2d00              CMP      r5,#0                 ;423
000326  d001              BEQ      |L1.812|
000328  4628              MOV      r0,r5                 ;425
00032a  e7b1              B        |L1.656|
                  |L1.812|
00032c  483b              LDR      r0,|L1.1052|
00032e  6800              LDR      r0,[r0,#0]            ;430  ; <Data5>
000330  9002              STR      r0,[sp,#8]            ;430
000332  78a0              LDRB     r0,[r4,#2]            ;431
000334  a902              ADD      r1,sp,#8              ;431
000336  f7fffffe          BL       nrf_drv_gpiote_out_init
00033a  4605              MOV      r5,r0                 ;431
00033c  2d00              CMP      r5,#0                 ;432
00033e  d001              BEQ      |L1.836|
000340  4628              MOV      r0,r5                 ;434
000342  e7a5              B        |L1.656|
                  |L1.836|
000344  2000              MOVS     r0,#0                 ;437
000346  43c0              MVNS     r0,r0                 ;437
000348  492e              LDR      r1,|L1.1028|
00034a  6108              STR      r0,[r1,#0x10]         ;437
00034c  78a0              LDRB     r0,[r4,#2]            ;438
00034e  6088              STR      r0,[r1,#8]            ;438
000350  482c              LDR      r0,|L1.1028|
000352  3040              ADDS     r0,r0,#0x40           ;439
000354  6ac0              LDR      r0,[r0,#0x2c]         ;439
000356  2101              MOVS     r1,#1                 ;439
000358  4308              ORRS     r0,r0,r1              ;439
00035a  492a              LDR      r1,|L1.1028|
00035c  3140              ADDS     r1,r1,#0x40           ;439
00035e  62c8              STR      r0,[r1,#0x2c]         ;439
000360  482e              LDR      r0,|L1.1052|
000362  1d00              ADDS     r0,r0,#4              ;445
000364  6800              LDR      r0,[r0,#0]            ;445  ; <Data6>
000366  9001              STR      r0,[sp,#4]            ;445
000368  78e0              LDRB     r0,[r4,#3]            ;446
00036a  4a2d              LDR      r2,|L1.1056|
00036c  a901              ADD      r1,sp,#4              ;446
00036e  f7fffffe          BL       nrf_drv_gpiote_in_init
000372  4605              MOV      r5,r0                 ;446
000374  2d00              CMP      r5,#0                 ;447
000376  d001              BEQ      |L1.892|
000378  4628              MOV      r0,r5                 ;449
00037a  e789              B        |L1.656|
                  |L1.892|
00037c  78e0              LDRB     r0,[r4,#3]            ;452
00037e  2101              MOVS     r1,#1                 ;452
000380  f7fffffe          BL       nrf_drv_gpiote_in_event_enable
000384  78e0              LDRB     r0,[r4,#3]            ;455
000386  f7fffffe          BL       nrf_drv_gpiote_in_is_set
00038a  2800              CMP      r0,#0                 ;455
00038c  d003              BEQ      |L1.918|
00038e  2000              MOVS     r0,#0                 ;457
000390  f7fffffe          BL       on_uart_event
000394  e002              B        |L1.924|
                  |L1.918|
000396  2001              MOVS     r0,#1                 ;461
000398  f7fffffe          BL       on_uart_event
                  |L1.924|
00039c  e00e              B        |L1.956|
                  |L1.926|
00039e  7920              LDRB     r0,[r4,#4]            ;465
0003a0  2801              CMP      r0,#1                 ;465
0003a2  d106              BNE      |L1.946|
0003a4  4620              MOV      r0,r4                 ;467
0003a6  f7fffffe          BL       uart_standard_flow_control_init
0003aa  2001              MOVS     r0,#1                 ;468
0003ac  4913              LDR      r1,|L1.1020|
0003ae  7008              STRB     r0,[r1,#0]            ;468
0003b0  e004              B        |L1.956|
                  |L1.946|
0003b2  f7fffffe          BL       uart_no_flow_control_init
0003b6  2001              MOVS     r0,#1                 ;473
0003b8  4910              LDR      r1,|L1.1020|
0003ba  7008              STRB     r0,[r1,#0]            ;473
                  |L1.956|
0003bc  980c              LDR      r0,[sp,#0x30]         ;476
0003be  8800              LDRH     r0,[r0,#0]            ;476
0003c0  2800              CMP      r0,#0                 ;476
0003c2  d108              BNE      |L1.982|
0003c4  4817              LDR      r0,|L1.1060|
0003c6  7801              LDRB     r1,[r0,#0]            ;478  ; m_instance_counter
0003c8  980c              LDR      r0,[sp,#0x30]         ;478
0003ca  8001              STRH     r1,[r0,#0]            ;478
0003cc  4815              LDR      r0,|L1.1060|
0003ce  7800              LDRB     r0,[r0,#0]            ;478  ; m_instance_counter
0003d0  1c40              ADDS     r0,r0,#1              ;478
0003d2  4914              LDR      r1,|L1.1060|
0003d4  7008              STRB     r0,[r1,#0]            ;478
                  |L1.982|
0003d6  2000              MOVS     r0,#0                 ;482
0003d8  43c0              MVNS     r0,r0                 ;482
0003da  490d              LDR      r1,|L1.1040|
0003dc  6088              STR      r0,[r1,#8]            ;482
0003de  20a1              MOVS     r0,#0xa1              ;483
0003e0  0080              LSLS     r0,r0,#2              ;483
0003e2  6048              STR      r0,[r1,#4]            ;483
0003e4  2002              MOVS     r0,#2                 ;487
0003e6  2101              MOVS     r1,#1                 ;487
0003e8  4081              LSLS     r1,r1,r0              ;487
0003ea  4a0f              LDR      r2,|L1.1064|
0003ec  6011              STR      r1,[r2,#0]            ;487
0003ee  bf00              NOP                            ;487
0003f0  9906              LDR      r1,[sp,#0x18]         ;488
0003f2  f7fffffe          BL       NVIC_SetPriority
0003f6  2002              MOVS     r0,#2                 ;489
0003f8  2101              MOVS     r1,#1                 ;489
0003fa  e017              B        |L1.1068|
                  |L1.1020|
                          DCD      m_current_state
                  |L1.1024|
                          DCD      0x40002000
                  |L1.1028|
                          DCD      0x40002500
                  |L1.1032|
                          DCD      m_event_handler
                  |L1.1036|
                          DCD      m_tx_fifo
                  |L1.1040|
                          DCD      0x40002300
                  |L1.1044|
                          DCD      0x40002100
                  |L1.1048|
                          DCD      m_rx_fifo
                  |L1.1052|
                          DCD      ||.constdata||
                  |L1.1056|
                          DCD      gpiote_uart_event_handler
                  |L1.1060|
                          DCD      m_instance_counter
                  |L1.1064|
                          DCD      0xe000e280
                  |L1.1068|
00042c  4081              LSLS     r1,r1,r0              ;489
00042e  4a42              LDR      r2,|L1.1336|
000430  6011              STR      r1,[r2,#0]            ;489
000432  bf00              NOP                            ;489
000434  2000              MOVS     r0,#0                 ;491
000436  e72b              B        |L1.656|
;;;493    
                          ENDP

                  app_uart_get PROC
;;;494    
;;;495    uint32_t app_uart_get(uint8_t * p_byte)
000438  b510              PUSH     {r4,lr}
;;;496    {
00043a  4604              MOV      r4,r0
;;;497        return app_fifo_get(&m_rx_fifo, p_byte);
00043c  4621              MOV      r1,r4
00043e  483f              LDR      r0,|L1.1340|
000440  f7fffffe          BL       app_fifo_get
;;;498    }
000444  bd10              POP      {r4,pc}
;;;499    
                          ENDP

                  app_uart_put PROC
;;;500    
;;;501    uint32_t app_uart_put(uint8_t byte)
000446  b570              PUSH     {r4-r6,lr}
;;;502    {
000448  4604              MOV      r4,r0
;;;503        uint32_t err_code;
;;;504    
;;;505        err_code = app_fifo_put(&m_tx_fifo, byte);
00044a  4621              MOV      r1,r4
00044c  483c              LDR      r0,|L1.1344|
00044e  f7fffffe          BL       app_fifo_put
000452  4605              MOV      r5,r0
;;;506    
;;;507        on_uart_event(ON_UART_PUT);
000454  2002              MOVS     r0,#2
000456  f7fffffe          BL       on_uart_event
;;;508    
;;;509        return err_code;
00045a  4628              MOV      r0,r5
;;;510    }
00045c  bd70              POP      {r4-r6,pc}
;;;511    
                          ENDP

                  app_uart_flush PROC
;;;512    
;;;513    uint32_t app_uart_flush(void)
00045e  b510              PUSH     {r4,lr}
;;;514    {
;;;515        uint32_t err_code;
;;;516    
;;;517        err_code = app_fifo_flush(&m_rx_fifo);
000460  4836              LDR      r0,|L1.1340|
000462  f7fffffe          BL       app_fifo_flush
000466  4604              MOV      r4,r0
;;;518        if (err_code != NRF_SUCCESS)
000468  2c00              CMP      r4,#0
00046a  d001              BEQ      |L1.1136|
;;;519        {
;;;520            return err_code;
00046c  4620              MOV      r0,r4
                  |L1.1134|
;;;521        }
;;;522    
;;;523        err_code = app_fifo_flush(&m_tx_fifo);
;;;524        if (err_code != NRF_SUCCESS)
;;;525        {
;;;526            return err_code;
;;;527        }
;;;528    
;;;529        return NRF_SUCCESS;
;;;530    }
00046e  bd10              POP      {r4,pc}
                  |L1.1136|
000470  4833              LDR      r0,|L1.1344|
000472  f7fffffe          BL       app_fifo_flush
000476  4604              MOV      r4,r0                 ;523
000478  2c00              CMP      r4,#0                 ;524
00047a  d001              BEQ      |L1.1152|
00047c  4620              MOV      r0,r4                 ;526
00047e  e7f6              B        |L1.1134|
                  |L1.1152|
000480  2000              MOVS     r0,#0                 ;529
000482  e7f4              B        |L1.1134|
;;;531    
                          ENDP

                  app_uart_get_connection_state PROC
;;;532    
;;;533    uint32_t app_uart_get_connection_state(app_uart_connection_state_t * p_conn_state)
000484  4601              MOV      r1,r0
;;;534    {
;;;535        *p_conn_state = ((m_current_state == UART_OFF) ? APP_UART_DISCONNECTED : APP_UART_CONNECTED);
000486  482f              LDR      r0,|L1.1348|
000488  7800              LDRB     r0,[r0,#0]  ; m_current_state
00048a  2800              CMP      r0,#0
00048c  d001              BEQ      |L1.1170|
00048e  2001              MOVS     r0,#1
000490  e000              B        |L1.1172|
                  |L1.1170|
000492  2000              MOVS     r0,#0
                  |L1.1172|
000494  7008              STRB     r0,[r1,#0]
;;;536    
;;;537        return NRF_SUCCESS;
000496  2000              MOVS     r0,#0
;;;538    }
000498  4770              BX       lr
;;;539    
                          ENDP

                  app_uart_close PROC
;;;540    uint32_t app_uart_close(uint16_t app_uart_uid)
00049a  b510              PUSH     {r4,lr}
;;;541    {
00049c  4604              MOV      r4,r0
;;;542        if (app_uart_uid < UART_INSTANCE_GPIOTE_BASE)
00049e  2cff              CMP      r4,#0xff
0004a0  da04              BGE      |L1.1196|
;;;543        {
;;;544            on_uart_event(ON_UART_CLOSE);
0004a2  2004              MOVS     r0,#4
0004a4  f7fffffe          BL       on_uart_event
;;;545            return NRF_SUCCESS;
0004a8  2000              MOVS     r0,#0
                  |L1.1194|
;;;546        }
;;;547    
;;;548        on_uart_event(ON_UART_CLOSE);
;;;549    
;;;550        nrf_drv_gpiote_in_uninit(NRF_UART0->PSELCTS);
;;;551        return NRF_SUCCESS;
;;;552    }
0004aa  bd10              POP      {r4,pc}
                  |L1.1196|
0004ac  2004              MOVS     r0,#4                 ;548
0004ae  f7fffffe          BL       on_uart_event
0004b2  4925              LDR      r1,|L1.1352|
0004b4  6908              LDR      r0,[r1,#0x10]         ;550
0004b6  f7fffffe          BL       nrf_drv_gpiote_in_uninit
0004ba  2000              MOVS     r0,#0                 ;551
0004bc  e7f5              B        |L1.1194|
;;;553    
                          ENDP

                  NVIC_SetPriority PROC
;;;581     */
;;;582    __STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
0004be  b510              PUSH     {r4,lr}
;;;583    {
;;;584      if(IRQn < 0) {
0004c0  2800              CMP      r0,#0
0004c2  da19              BGE      |L1.1272|
;;;585        SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
0004c4  4a21              LDR      r2,|L1.1356|
0004c6  0703              LSLS     r3,r0,#28
0004c8  0f1b              LSRS     r3,r3,#28
0004ca  3b08              SUBS     r3,r3,#8
0004cc  089b              LSRS     r3,r3,#2
0004ce  009b              LSLS     r3,r3,#2
0004d0  58d2              LDR      r2,[r2,r3]
0004d2  0783              LSLS     r3,r0,#30
0004d4  0edc              LSRS     r4,r3,#27
0004d6  23ff              MOVS     r3,#0xff
0004d8  40a3              LSLS     r3,r3,r4
0004da  439a              BICS     r2,r2,r3
0004dc  078b              LSLS     r3,r1,#30
0004de  0e1b              LSRS     r3,r3,#24
0004e0  0784              LSLS     r4,r0,#30
0004e2  0ee4              LSRS     r4,r4,#27
0004e4  40a3              LSLS     r3,r3,r4
0004e6  431a              ORRS     r2,r2,r3
0004e8  4b18              LDR      r3,|L1.1356|
0004ea  0704              LSLS     r4,r0,#28
0004ec  0f24              LSRS     r4,r4,#28
0004ee  3c08              SUBS     r4,r4,#8
0004f0  08a4              LSRS     r4,r4,#2
0004f2  00a4              LSLS     r4,r4,#2
0004f4  511a              STR      r2,[r3,r4]
0004f6  e018              B        |L1.1322|
                  |L1.1272|
;;;586            (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
;;;587      else {
;;;588        NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
0004f8  4a0f              LDR      r2,|L1.1336|
0004fa  2303              MOVS     r3,#3
0004fc  021b              LSLS     r3,r3,#8
0004fe  18d2              ADDS     r2,r2,r3
000500  0883              LSRS     r3,r0,#2
000502  009b              LSLS     r3,r3,#2
000504  58d2              LDR      r2,[r2,r3]
000506  0783              LSLS     r3,r0,#30
000508  0edc              LSRS     r4,r3,#27
00050a  23ff              MOVS     r3,#0xff
00050c  40a3              LSLS     r3,r3,r4
00050e  439a              BICS     r2,r2,r3
000510  078b              LSLS     r3,r1,#30
000512  0e1b              LSRS     r3,r3,#24
000514  0784              LSLS     r4,r0,#30
000516  0ee4              LSRS     r4,r4,#27
000518  40a3              LSLS     r3,r3,r4
00051a  431a              ORRS     r2,r2,r3
00051c  4b06              LDR      r3,|L1.1336|
00051e  2403              MOVS     r4,#3
000520  0224              LSLS     r4,r4,#8
000522  191b              ADDS     r3,r3,r4
000524  0884              LSRS     r4,r0,#2
000526  00a4              LSLS     r4,r4,#2
000528  511a              STR      r2,[r3,r4]
                  |L1.1322|
;;;589            (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
;;;590    }
00052a  bd10              POP      {r4,pc}
;;;591    
                          ENDP

                  fifo_length PROC
;;;20     
;;;21     static __INLINE uint32_t fifo_length(app_fifo_t * const fifo)
00052c  4601              MOV      r1,r0
;;;22     {
;;;23       uint32_t tmp = fifo->read_pos;
00052e  688a              LDR      r2,[r1,#8]
;;;24       return fifo->write_pos - tmp;
000530  68c8              LDR      r0,[r1,#0xc]
000532  1a80              SUBS     r0,r0,r2
;;;25     }
000534  4770              BX       lr
;;;26     
                          ENDP

000536  0000              DCW      0x0000
                  |L1.1336|
                          DCD      0xe000e100
                  |L1.1340|
                          DCD      m_rx_fifo
                  |L1.1344|
                          DCD      m_tx_fifo
                  |L1.1348|
                          DCD      m_current_state
                  |L1.1352|
                          DCD      0x40002500
                  |L1.1356|
                          DCD      0xe000ed1c

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  m_rx_fifo
                          %        16
                  m_tx_fifo
                          %        16

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

000000  00010000          DCB      0x00,0x01,0x00,0x00
000004  03000000          DCB      0x03,0x00,0x00,0x00

                          AREA ||.data||, DATA, ALIGN=2

                  m_instance_counter
000000  01000000          DCB      0x01,0x00,0x00,0x00
                  m_event_handler
                          DCD      0x00000000
                  m_current_state
000008  00                DCB      0x00

                          AREA ||i.__ARM_common_switch8||, COMGROUP=__ARM_common_switch8, CODE, READONLY, ALIGN=1

                  __ARM_common_switch8 PROC
000000  b430              PUSH     {r4,r5}
000002  4674              MOV      r4,lr
000004  1e64              SUBS     r4,r4,#1
000006  7825              LDRB     r5,[r4,#0]
000008  1c64              ADDS     r4,r4,#1
00000a  42ab              CMP      r3,r5
00000c  d304              BCC      |L17.24|
                  |L17.14|
00000e  5d63              LDRB     r3,[r4,r5]
000010  005b              LSLS     r3,r3,#1
000012  18e3              ADDS     r3,r4,r3
000014  bc30              POP      {r4,r5}
000016  4718              BX       r3
                  |L17.24|
000018  461d              MOV      r5,r3
00001a  e7f8              B        |L17.14|
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\..\\..\\..\\..\\..\\components\\drivers_nrf\\uart\\app_uart_fifo.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___15_app_uart_fifo_c_9ac9bdbb____REV16|
#line 129 "..\\..\\..\\..\\..\\..\\components\\toolchain\\gcc\\core_cmInstr.h"
|__asm___15_app_uart_fifo_c_9ac9bdbb____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___15_app_uart_fifo_c_9ac9bdbb____REVSH|
#line 144
|__asm___15_app_uart_fifo_c_9ac9bdbb____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
