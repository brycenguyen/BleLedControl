; generated by Component: ARM Compiler 5.04 update 1 (build 49) Tool: ArmCC [5040049]
; commandline ArmCC [--c99 --list --debug -c --asm --interleave -o.\_build\mesh_srv.o --asm_dir=.\_build\ --list_dir=.\_build\ --depend=.\_build\mesh_srv.d --cpu=Cortex-M0 --apcs=interwork -O0 -I..\include -I..\..\..\rbc_mesh -I..\..\..\rbc_mesh\include -I..\..\..\SDK\bsp -I..\..\..\..\..\..\components\softdevice\s110\headers -I..\..\..\..\..\..\components\toolchain\gcc -I..\..\..\..\..\..\components\libraries\util -I..\..\..\..\..\..\components\ble\common -I..\..\..\..\..\..\components\drivers_nrf\hal -I..\..\..\..\..\..\components\drivers_nrf\spi_slave -I..\..\..\..\..\..\components\softdevice\common\softdevice_handler -I..\..\..\..\..\..\components\libraries\fifo -I..\..\..\..\..\..\components\drivers_nrf\uart -I..\..\..\..\..\..\components\drivers_nrf\gpiote -I..\..\..\..\..\..\components\drivers_nrf\config -I..\..\..\..\..\..\components\drivers_nrf\common -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\4.1.0\CMSIS\Include -IC:\Keil_v5\ARM\PACK\NordicSemiconductor\nRF_DeviceFamilyPack\7.2.1\Device\Include -D__MICROLIB -DNRF51 -DBOARD_RHC -DNRF51 -DBLE_STACK_SUPPORT_REQD -DS110 -DSOFTDEVICE_PRESENT --omf_browse=.\_build\mesh_srv.crf ..\..\..\rbc_mesh\src\mesh_srv.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  version_increase PROC
;;;98     *****************************************************************************/
;;;99     static void version_increase(uint16_t* version)
000000  8801              LDRH     r1,[r0,#0]
;;;100    {
;;;101    #if MESH_VERSION_SCHEME_LOLLIPOP    
;;;102        if (*version == UINT16_MAX)
000002  4afd              LDR      r2,|L1.1016|
000004  4291              CMP      r1,r2
000006  d102              BNE      |L1.14|
;;;103        {
;;;104            *version = MESH_VALUE_LOLLIPOP_LIMIT;
000008  21c8              MOVS     r1,#0xc8
00000a  8001              STRH     r1,[r0,#0]
00000c  e002              B        |L1.20|
                  |L1.14|
;;;105        }
;;;106        else
;;;107        {
;;;108            (*version)++;
00000e  8801              LDRH     r1,[r0,#0]
000010  1c49              ADDS     r1,r1,#1
000012  8001              STRH     r1,[r0,#0]
                  |L1.20|
;;;109        }
;;;110    #else
;;;111        (*version)++;
;;;112    #endif    
;;;113    }
000014  4770              BX       lr
;;;114                                                
                          ENDP

                  mesh_md_char_add PROC
;;;119    */
;;;120    static uint32_t mesh_md_char_add(mesh_metadata_char_t* metadata)
000016  b530              PUSH     {r4,r5,lr}
;;;121    {
000018  b093              SUB      sp,sp,#0x4c
00001a  4604              MOV      r4,r0
;;;122        /**@TODO: put ranges in public #defines */
;;;123        if (metadata->mesh_channel > 39 ||
00001c  7a60              LDRB     r0,[r4,#9]
00001e  2827              CMP      r0,#0x27
000020  dc06              BGT      |L1.48|
;;;124            metadata->mesh_adv_int_ms < 5 ||
000022  6860              LDR      r0,[r4,#4]
000024  2805              CMP      r0,#5
000026  d303              BCC      |L1.48|
;;;125            metadata->mesh_adv_int_ms > 60000)
000028  49f4              LDR      r1,|L1.1020|
00002a  6860              LDR      r0,[r4,#4]
00002c  4288              CMP      r0,r1
00002e  d902              BLS      |L1.54|
                  |L1.48|
;;;126        {
;;;127            return NRF_ERROR_INVALID_PARAM;
000030  2007              MOVS     r0,#7
                  |L1.50|
;;;128        }
;;;129    
;;;130        /* cccd for metadata char */
;;;131        ble_gatts_attr_md_t cccd_md;
;;;132    
;;;133        memset(&cccd_md, 0, sizeof(cccd_md));
;;;134    
;;;135        BLE_GAP_CONN_SEC_MODE_SET_OPEN(&cccd_md.read_perm);
;;;136        BLE_GAP_CONN_SEC_MODE_SET_OPEN(&cccd_md.write_perm);
;;;137        cccd_md.vloc = BLE_GATTS_VLOC_STACK;
;;;138    
;;;139        /* metadata char */
;;;140        ble_gatts_char_md_t ble_char_md;
;;;141    
;;;142        memset(&ble_char_md, 0, sizeof(ble_char_md));
;;;143    
;;;144        ble_char_md.char_props.read = 1;
;;;145        ble_char_md.char_props.notify = 1;
;;;146    
;;;147        ble_char_md.p_char_pf = NULL;
;;;148        ble_char_md.p_cccd_md = &cccd_md;
;;;149        ble_char_md.p_char_user_desc = NULL;
;;;150        ble_char_md.p_user_desc_md = NULL;
;;;151    
;;;152        /* ATT metadata */
;;;153        ble_gatts_attr_md_t ble_attr_md;
;;;154    
;;;155        memset(&ble_attr_md, 0, sizeof(ble_attr_md));
;;;156    
;;;157        ble_attr_md.read_perm.lv = 1;
;;;158        ble_attr_md.read_perm.sm = 1;
;;;159        ble_attr_md.write_perm.lv = 1;
;;;160        ble_attr_md.write_perm.sm = 1;
;;;161    
;;;162        ble_attr_md.rd_auth = 0;
;;;163        ble_attr_md.wr_auth = 0;
;;;164        ble_attr_md.vlen = 0;
;;;165        ble_attr_md.vloc = BLE_GATTS_VLOC_STACK;
;;;166    
;;;167        /* ble characteristic UUID */
;;;168        ble_uuid_t ble_uuid;
;;;169    
;;;170        ble_uuid.type = mesh_base_uuid_type;
;;;171        ble_uuid.uuid = MESH_MD_CHAR_UUID;
;;;172    
;;;173        /* metadata contents */
;;;174        uint8_t value_array[MESH_MD_CHAR_LEN];
;;;175    
;;;176        memcpy(&value_array[MESH_MD_CHAR_AA_OFFSET],
;;;177            &metadata->mesh_access_addr,
;;;178            sizeof(metadata->mesh_access_addr));
;;;179    
;;;180        memcpy(&value_array[MESH_MD_CHAR_ADV_INT_OFFSET],
;;;181            &metadata->mesh_adv_int_ms,
;;;182            sizeof(metadata->mesh_adv_int_ms));
;;;183    
;;;184        memcpy(&value_array[MESH_MD_CHAR_COUNT_OFFSET],
;;;185            &metadata->mesh_value_count,
;;;186            sizeof(metadata->mesh_value_count));
;;;187    
;;;188        memcpy(&value_array[MESH_MD_CHAR_CH_OFFSET],
;;;189            &metadata->mesh_channel,
;;;190            sizeof(metadata->mesh_channel));
;;;191    
;;;192    
;;;193        /* ble attribute */
;;;194        ble_gatts_attr_t ble_attr;
;;;195    
;;;196        memset(&ble_attr, 0, sizeof(ble_attr));
;;;197    
;;;198        ble_attr.init_len = MESH_MD_CHAR_LEN;
;;;199        ble_attr.init_offs = 0;
;;;200        ble_attr.max_len = MESH_MD_CHAR_LEN;
;;;201        ble_attr.p_uuid = &ble_uuid;
;;;202        ble_attr.p_value = value_array;
;;;203        ble_attr.p_attr_md = &ble_attr_md;
;;;204    
;;;205        /* add characteristic */
;;;206        uint32_t error_code = sd_ble_gatts_characteristic_add(
;;;207            g_mesh_service.service_handle,
;;;208            &ble_char_md,
;;;209            &ble_attr,
;;;210            &g_mesh_service.ble_md_char_handles);
;;;211    
;;;212        if (error_code != NRF_SUCCESS)
;;;213        {
;;;214            return NRF_ERROR_INTERNAL;
;;;215        }
;;;216    
;;;217    
;;;218    
;;;219        return NRF_SUCCESS;
;;;220    }
000032  b013              ADD      sp,sp,#0x4c
000034  bd30              POP      {r4,r5,pc}
                  |L1.54|
000036  2000              MOVS     r0,#0                 ;133
000038  9012              STR      r0,[sp,#0x48]         ;133
00003a  bf00              NOP                            ;135
00003c  a810              ADD      r0,sp,#0x40           ;135
00003e  7a00              LDRB     r0,[r0,#8]            ;135
000040  0901              LSRS     r1,r0,#4              ;135
000042  0109              LSLS     r1,r1,#4              ;135
000044  1c49              ADDS     r1,r1,#1              ;135
000046  a810              ADD      r0,sp,#0x40           ;135
000048  7201              STRB     r1,[r0,#8]            ;135
00004a  7a00              LDRB     r0,[r0,#8]            ;135
00004c  21f0              MOVS     r1,#0xf0              ;135
00004e  4388              BICS     r0,r0,r1              ;135
000050  3010              ADDS     r0,r0,#0x10           ;135
000052  a910              ADD      r1,sp,#0x40           ;135
000054  7208              STRB     r0,[r1,#8]            ;135
000056  bf00              NOP                            ;135
000058  bf00              NOP                            ;136
00005a  a810              ADD      r0,sp,#0x40           ;136
00005c  7a40              LDRB     r0,[r0,#9]            ;136
00005e  0901              LSRS     r1,r0,#4              ;136
000060  0109              LSLS     r1,r1,#4              ;136
000062  1c49              ADDS     r1,r1,#1              ;136
000064  a810              ADD      r0,sp,#0x40           ;136
000066  7241              STRB     r1,[r0,#9]            ;136
000068  7a40              LDRB     r0,[r0,#9]            ;136
00006a  21f0              MOVS     r1,#0xf0              ;136
00006c  4388              BICS     r0,r0,r1              ;136
00006e  3010              ADDS     r0,r0,#0x10           ;136
000070  a910              ADD      r1,sp,#0x40           ;136
000072  7248              STRB     r0,[r1,#9]            ;136
000074  bf00              NOP                            ;136
000076  a810              ADD      r0,sp,#0x40           ;137
000078  7a80              LDRB     r0,[r0,#0xa]          ;137
00007a  2106              MOVS     r1,#6                 ;137
00007c  4388              BICS     r0,r0,r1              ;137
00007e  1c81              ADDS     r1,r0,#2              ;137
000080  a810              ADD      r0,sp,#0x40           ;137
000082  7281              STRB     r1,[r0,#0xa]          ;137
000084  211c              MOVS     r1,#0x1c              ;142
000086  a80b              ADD      r0,sp,#0x2c           ;142
000088  f7fffffe          BL       __aeabi_memclr4
00008c  a808              ADD      r0,sp,#0x20           ;144
00008e  7b00              LDRB     r0,[r0,#0xc]          ;144
000090  2102              MOVS     r1,#2                 ;144
000092  4388              BICS     r0,r0,r1              ;144
000094  1c81              ADDS     r1,r0,#2              ;144
000096  a808              ADD      r0,sp,#0x20           ;144
000098  7301              STRB     r1,[r0,#0xc]          ;144
00009a  7b00              LDRB     r0,[r0,#0xc]          ;145
00009c  2110              MOVS     r1,#0x10              ;145
00009e  4388              BICS     r0,r0,r1              ;145
0000a0  1841              ADDS     r1,r0,r1              ;145
0000a2  a808              ADD      r0,sp,#0x20           ;145
0000a4  7301              STRB     r1,[r0,#0xc]          ;145
0000a6  2000              MOVS     r0,#0                 ;147
0000a8  900e              STR      r0,[sp,#0x38]         ;147
0000aa  a812              ADD      r0,sp,#0x48           ;148
0000ac  9010              STR      r0,[sp,#0x40]         ;148
0000ae  2000              MOVS     r0,#0                 ;149
0000b0  900c              STR      r0,[sp,#0x30]         ;149
0000b2  900f              STR      r0,[sp,#0x3c]         ;150
0000b4  900a              STR      r0,[sp,#0x28]         ;155
0000b6  a808              ADD      r0,sp,#0x20           ;157
0000b8  7a00              LDRB     r0,[r0,#8]            ;157
0000ba  21f0              MOVS     r1,#0xf0              ;157
0000bc  4388              BICS     r0,r0,r1              ;157
0000be  4601              MOV      r1,r0                 ;157
0000c0  3110              ADDS     r1,r1,#0x10           ;157
0000c2  a808              ADD      r0,sp,#0x20           ;157
0000c4  7201              STRB     r1,[r0,#8]            ;157
0000c6  7a00              LDRB     r0,[r0,#8]            ;158
0000c8  0901              LSRS     r1,r0,#4              ;158
0000ca  0109              LSLS     r1,r1,#4              ;158
0000cc  1c49              ADDS     r1,r1,#1              ;158
0000ce  a808              ADD      r0,sp,#0x20           ;158
0000d0  7201              STRB     r1,[r0,#8]            ;158
0000d2  7a40              LDRB     r0,[r0,#9]            ;159
0000d4  21f0              MOVS     r1,#0xf0              ;159
0000d6  4388              BICS     r0,r0,r1              ;159
0000d8  4601              MOV      r1,r0                 ;159
0000da  3110              ADDS     r1,r1,#0x10           ;159
0000dc  a808              ADD      r0,sp,#0x20           ;159
0000de  7241              STRB     r1,[r0,#9]            ;159
0000e0  7a40              LDRB     r0,[r0,#9]            ;160
0000e2  0901              LSRS     r1,r0,#4              ;160
0000e4  0109              LSLS     r1,r1,#4              ;160
0000e6  1c49              ADDS     r1,r1,#1              ;160
0000e8  a808              ADD      r0,sp,#0x20           ;160
0000ea  7241              STRB     r1,[r0,#9]            ;160
0000ec  7a80              LDRB     r0,[r0,#0xa]          ;162
0000ee  2108              MOVS     r1,#8                 ;162
0000f0  4388              BICS     r0,r0,r1              ;162
0000f2  4601              MOV      r1,r0                 ;162
0000f4  a808              ADD      r0,sp,#0x20           ;162
0000f6  7281              STRB     r1,[r0,#0xa]          ;162
0000f8  7a80              LDRB     r0,[r0,#0xa]          ;163
0000fa  2110              MOVS     r1,#0x10              ;163
0000fc  4388              BICS     r0,r0,r1              ;163
0000fe  4601              MOV      r1,r0                 ;163
000100  a808              ADD      r0,sp,#0x20           ;163
000102  7281              STRB     r1,[r0,#0xa]          ;163
000104  7a80              LDRB     r0,[r0,#0xa]          ;164
000106  0841              LSRS     r1,r0,#1              ;164
000108  0049              LSLS     r1,r1,#1              ;164
00010a  a808              ADD      r0,sp,#0x20           ;164
00010c  7281              STRB     r1,[r0,#0xa]          ;164
00010e  7a80              LDRB     r0,[r0,#0xa]          ;165
000110  2106              MOVS     r1,#6                 ;165
000112  4388              BICS     r0,r0,r1              ;165
000114  1c81              ADDS     r1,r0,#2              ;165
000116  a808              ADD      r0,sp,#0x20           ;165
000118  7281              STRB     r1,[r0,#0xa]          ;165
00011a  48b9              LDR      r0,|L1.1024|
00011c  7801              LDRB     r1,[r0,#0]            ;170  ; mesh_base_uuid_type
00011e  a808              ADD      r0,sp,#0x20           ;170
000120  7181              STRB     r1,[r0,#6]            ;170
000122  2102              MOVS     r1,#2                 ;171
000124  4668              MOV      r0,sp                 ;171
000126  8481              STRH     r1,[r0,#0x24]         ;171
000128  6820              LDR      r0,[r4,#0]            ;176
00012a  9006              STR      r0,[sp,#0x18]         ;176
00012c  6860              LDR      r0,[r4,#4]            ;180
00012e  9007              STR      r0,[sp,#0x1c]         ;180
000130  7a21              LDRB     r1,[r4,#8]            ;184
000132  a808              ADD      r0,sp,#0x20           ;184
000134  7001              STRB     r1,[r0,#0]            ;184
000136  7a61              LDRB     r1,[r4,#9]            ;188
000138  7041              STRB     r1,[r0,#1]            ;188
00013a  2114              MOVS     r1,#0x14              ;196
00013c  a801              ADD      r0,sp,#4              ;196
00013e  f7fffffe          BL       __aeabi_memclr4
000142  210a              MOVS     r1,#0xa               ;198
000144  4668              MOV      r0,sp                 ;198
000146  8181              STRH     r1,[r0,#0xc]          ;198
000148  2100              MOVS     r1,#0                 ;199
00014a  81c1              STRH     r1,[r0,#0xe]          ;199
00014c  210a              MOVS     r1,#0xa               ;200
00014e  8201              STRH     r1,[r0,#0x10]         ;200
000150  a809              ADD      r0,sp,#0x24           ;201
000152  9001              STR      r0,[sp,#4]            ;201
000154  a806              ADD      r0,sp,#0x18           ;202
000156  9005              STR      r0,[sp,#0x14]         ;202
000158  a80a              ADD      r0,sp,#0x28           ;203
00015a  9002              STR      r0,[sp,#8]            ;203
00015c  49a9              LDR      r1,|L1.1028|
00015e  8908              LDRH     r0,[r1,#8]            ;206  ; g_mesh_service
000160  460b              MOV      r3,r1                 ;206
000162  330a              ADDS     r3,r3,#0xa            ;206
000164  aa01              ADD      r2,sp,#4              ;206
000166  a90b              ADD      r1,sp,#0x2c           ;206
000168  dfa2              SVC      #0xa2                 ;206
00016a  4605              MOV      r5,r0                 ;206
00016c  2d00              CMP      r5,#0                 ;212
00016e  d001              BEQ      |L1.372|
000170  2003              MOVS     r0,#3                 ;214
000172  e75e              B        |L1.50|
                  |L1.372|
000174  2000              MOVS     r0,#0                 ;219
000176  e75c              B        |L1.50|
;;;221    
                          ENDP

                  mesh_value_char_add PROC
;;;225    */
;;;226    static uint32_t mesh_value_char_add(uint8_t index)
000178  b530              PUSH     {r4,r5,lr}
;;;227    {
00017a  b093              SUB      sp,sp,#0x4c
00017c  4604              MOV      r4,r0
;;;228        if (index >= MAX_VALUE_COUNT)
00017e  2c9b              CMP      r4,#0x9b
000180  db02              BLT      |L1.392|
;;;229        {
;;;230            return NRF_ERROR_INVALID_PARAM;
000182  2007              MOVS     r0,#7
                  |L1.388|
;;;231        }
;;;232    
;;;233        /* metadata presentation format */
;;;234        ble_gatts_char_pf_t ble_char_pf;
;;;235    
;;;236        memset(&ble_char_pf, 0, sizeof(ble_char_pf));
;;;237    
;;;238        ble_char_pf.name_space = BLE_GATT_CPF_NAMESPACE_BTSIG;
;;;239        ble_char_pf.exponent = 0;
;;;240        ble_char_pf.format = BLE_GATT_CPF_FORMAT_UINT8;
;;;241        ble_char_pf.desc = index + 1; /* trickle instance id/handle */
;;;242    
;;;243    
;;;244        /* BLE GATT metadata */
;;;245        ble_gatts_char_md_t ble_char_md;
;;;246    
;;;247        memset(&ble_char_md, 0, sizeof(ble_char_md));
;;;248    
;;;249        ble_char_md.p_char_pf = &ble_char_pf;
;;;250        ble_char_md.char_props.read = 1;
;;;251        ble_char_md.char_props.write_wo_resp = 1;
;;;252        ble_char_md.char_props.notify = 1;
;;;253    
;;;254        ble_char_md.p_cccd_md = NULL;
;;;255        ble_char_md.p_sccd_md = NULL;
;;;256        ble_char_md.p_char_user_desc = NULL;
;;;257        ble_char_md.p_user_desc_md = NULL;
;;;258    
;;;259        /* ATT metadata */
;;;260    
;;;261        ble_gatts_attr_md_t ble_attr_md;
;;;262    
;;;263        memset(&ble_attr_md, 0, sizeof(ble_attr_md));
;;;264    
;;;265        /* No security is required whatsoever, needs to be changed when encryption
;;;266            is added */
;;;267        ble_attr_md.read_perm.lv = 1;
;;;268        ble_attr_md.read_perm.sm = 1;
;;;269        ble_attr_md.write_perm.lv = 1;
;;;270        ble_attr_md.write_perm.sm = 1;
;;;271    
;;;272        ble_attr_md.vloc = BLE_GATTS_VLOC_STACK;
;;;273        ble_attr_md.rd_auth = 0;
;;;274        ble_attr_md.wr_auth = 0;
;;;275        ble_attr_md.vlen = 1;
;;;276    
;;;277        /* ble characteristic UUID */
;;;278        ble_uuid_t ble_uuid;
;;;279    
;;;280        ble_uuid.type = mesh_base_uuid_type;
;;;281        ble_uuid.uuid = MESH_VALUE_CHAR_UUID;
;;;282    
;;;283        /* ble attribute */
;;;284        ble_gatts_attr_t ble_attr;
;;;285        uint8_t default_value = 0;
;;;286    
;;;287        memset(&ble_attr, 0, sizeof(ble_attr));
;;;288    
;;;289        ble_attr.init_len = 1;
;;;290        ble_attr.init_offs = 0;
;;;291        ble_attr.max_len = MAX_VALUE_LENGTH;
;;;292        ble_attr.p_attr_md = &ble_attr_md;
;;;293        ble_attr.p_uuid = &ble_uuid;
;;;294        ble_attr.p_value = &default_value;
;;;295    
;;;296    
;;;297        /* add to service */
;;;298        ble_gatts_char_handles_t ble_value_char_handles;
;;;299    
;;;300        uint32_t error_code = sd_ble_gatts_characteristic_add(
;;;301            g_mesh_service.service_handle,
;;;302            &ble_char_md,
;;;303            &ble_attr,
;;;304            &ble_value_char_handles);
;;;305    
;;;306        if (error_code != NRF_SUCCESS)
;;;307        {
;;;308            return NRF_ERROR_INTERNAL;
;;;309        }
;;;310    
;;;311        g_mesh_service.char_metadata[index].char_value_handle =  ble_value_char_handles.value_handle;
;;;312    
;;;313        return NRF_SUCCESS;
;;;314    }
000184  b013              ADD      sp,sp,#0x4c
000186  bd30              POP      {r4,r5,pc}
                  |L1.392|
000188  2000              MOVS     r0,#0                 ;236
00018a  9011              STR      r0,[sp,#0x44]         ;236
00018c  9012              STR      r0,[sp,#0x48]         ;236
00018e  2101              MOVS     r1,#1                 ;238
000190  a810              ADD      r0,sp,#0x40           ;238
000192  7201              STRB     r1,[r0,#8]            ;238
000194  2100              MOVS     r1,#0                 ;239
000196  7141              STRB     r1,[r0,#5]            ;239
000198  2104              MOVS     r1,#4                 ;240
00019a  7101              STRB     r1,[r0,#4]            ;240
00019c  1c61              ADDS     r1,r4,#1              ;241
00019e  8141              STRH     r1,[r0,#0xa]          ;241
0001a0  211c              MOVS     r1,#0x1c              ;247
0001a2  a80a              ADD      r0,sp,#0x28           ;247
0001a4  f7fffffe          BL       __aeabi_memclr4
0001a8  a811              ADD      r0,sp,#0x44           ;249
0001aa  900d              STR      r0,[sp,#0x34]         ;249
0001ac  a808              ADD      r0,sp,#0x20           ;250
0001ae  7a00              LDRB     r0,[r0,#8]            ;250
0001b0  2102              MOVS     r1,#2                 ;250
0001b2  4388              BICS     r0,r0,r1              ;250
0001b4  1c81              ADDS     r1,r0,#2              ;250
0001b6  a808              ADD      r0,sp,#0x20           ;250
0001b8  7201              STRB     r1,[r0,#8]            ;250
0001ba  7a00              LDRB     r0,[r0,#8]            ;251
0001bc  2104              MOVS     r1,#4                 ;251
0001be  4388              BICS     r0,r0,r1              ;251
0001c0  1d01              ADDS     r1,r0,#4              ;251
0001c2  a808              ADD      r0,sp,#0x20           ;251
0001c4  7201              STRB     r1,[r0,#8]            ;251
0001c6  7a00              LDRB     r0,[r0,#8]            ;252
0001c8  2110              MOVS     r1,#0x10              ;252
0001ca  4388              BICS     r0,r0,r1              ;252
0001cc  1841              ADDS     r1,r0,r1              ;252
0001ce  a808              ADD      r0,sp,#0x20           ;252
0001d0  7201              STRB     r1,[r0,#8]            ;252
0001d2  2000              MOVS     r0,#0                 ;254
0001d4  900f              STR      r0,[sp,#0x3c]         ;254
0001d6  9010              STR      r0,[sp,#0x40]         ;255
0001d8  900b              STR      r0,[sp,#0x2c]         ;256
0001da  900e              STR      r0,[sp,#0x38]         ;257
0001dc  9009              STR      r0,[sp,#0x24]         ;263
0001de  a808              ADD      r0,sp,#0x20           ;267
0001e0  7900              LDRB     r0,[r0,#4]            ;267
0001e2  21f0              MOVS     r1,#0xf0              ;267
0001e4  4388              BICS     r0,r0,r1              ;267
0001e6  4601              MOV      r1,r0                 ;267
0001e8  3110              ADDS     r1,r1,#0x10           ;267
0001ea  a808              ADD      r0,sp,#0x20           ;267
0001ec  7101              STRB     r1,[r0,#4]            ;267
0001ee  7900              LDRB     r0,[r0,#4]            ;268
0001f0  0901              LSRS     r1,r0,#4              ;268
0001f2  0109              LSLS     r1,r1,#4              ;268
0001f4  1c49              ADDS     r1,r1,#1              ;268
0001f6  a808              ADD      r0,sp,#0x20           ;268
0001f8  7101              STRB     r1,[r0,#4]            ;268
0001fa  7940              LDRB     r0,[r0,#5]            ;269
0001fc  21f0              MOVS     r1,#0xf0              ;269
0001fe  4388              BICS     r0,r0,r1              ;269
000200  4601              MOV      r1,r0                 ;269
000202  3110              ADDS     r1,r1,#0x10           ;269
000204  a808              ADD      r0,sp,#0x20           ;269
000206  7141              STRB     r1,[r0,#5]            ;269
000208  7940              LDRB     r0,[r0,#5]            ;270
00020a  0901              LSRS     r1,r0,#4              ;270
00020c  0109              LSLS     r1,r1,#4              ;270
00020e  1c49              ADDS     r1,r1,#1              ;270
000210  a808              ADD      r0,sp,#0x20           ;270
000212  7141              STRB     r1,[r0,#5]            ;270
000214  7980              LDRB     r0,[r0,#6]            ;272
000216  2106              MOVS     r1,#6                 ;272
000218  4388              BICS     r0,r0,r1              ;272
00021a  1c81              ADDS     r1,r0,#2              ;272
00021c  a808              ADD      r0,sp,#0x20           ;272
00021e  7181              STRB     r1,[r0,#6]            ;272
000220  7980              LDRB     r0,[r0,#6]            ;273
000222  2108              MOVS     r1,#8                 ;273
000224  4388              BICS     r0,r0,r1              ;273
000226  4601              MOV      r1,r0                 ;273
000228  a808              ADD      r0,sp,#0x20           ;273
00022a  7181              STRB     r1,[r0,#6]            ;273
00022c  7980              LDRB     r0,[r0,#6]            ;274
00022e  2110              MOVS     r1,#0x10              ;274
000230  4388              BICS     r0,r0,r1              ;274
000232  4601              MOV      r1,r0                 ;274
000234  a808              ADD      r0,sp,#0x20           ;274
000236  7181              STRB     r1,[r0,#6]            ;274
000238  7980              LDRB     r0,[r0,#6]            ;275
00023a  0841              LSRS     r1,r0,#1              ;275
00023c  0049              LSLS     r1,r1,#1              ;275
00023e  1c49              ADDS     r1,r1,#1              ;275
000240  a808              ADD      r0,sp,#0x20           ;275
000242  7181              STRB     r1,[r0,#6]            ;275
000244  486e              LDR      r0,|L1.1024|
000246  7801              LDRB     r1,[r0,#0]            ;280  ; mesh_base_uuid_type
000248  a808              ADD      r0,sp,#0x20           ;280
00024a  7081              STRB     r1,[r0,#2]            ;280
00024c  2103              MOVS     r1,#3                 ;281
00024e  4668              MOV      r0,sp                 ;281
000250  8401              STRH     r1,[r0,#0x20]         ;281
000252  2100              MOVS     r1,#0                 ;285
000254  9102              STR      r1,[sp,#8]            ;285
000256  2114              MOVS     r1,#0x14              ;287
000258  a803              ADD      r0,sp,#0xc            ;287
00025a  f7fffffe          BL       __aeabi_memclr4
00025e  2101              MOVS     r1,#1                 ;289
000260  4668              MOV      r0,sp                 ;289
000262  8281              STRH     r1,[r0,#0x14]         ;289
000264  2100              MOVS     r1,#0                 ;290
000266  82c1              STRH     r1,[r0,#0x16]         ;290
000268  211c              MOVS     r1,#0x1c              ;291
00026a  8301              STRH     r1,[r0,#0x18]         ;291
00026c  a809              ADD      r0,sp,#0x24           ;292
00026e  9004              STR      r0,[sp,#0x10]         ;292
000270  a808              ADD      r0,sp,#0x20           ;293
000272  9003              STR      r0,[sp,#0xc]          ;293
000274  a802              ADD      r0,sp,#8              ;294
000276  9007              STR      r0,[sp,#0x1c]         ;294
000278  4962              LDR      r1,|L1.1028|
00027a  8908              LDRH     r0,[r1,#8]            ;300  ; g_mesh_service
00027c  466b              MOV      r3,sp                 ;300
00027e  aa03              ADD      r2,sp,#0xc            ;300
000280  a90a              ADD      r1,sp,#0x28           ;300
000282  dfa2              SVC      #0xa2                 ;300
000284  4605              MOV      r5,r0                 ;300
000286  2d00              CMP      r5,#0                 ;306
000288  d001              BEQ      |L1.654|
00028a  2003              MOVS     r0,#3                 ;308
00028c  e77a              B        |L1.388|
                  |L1.654|
00028e  4668              MOV      r0,sp                 ;311
000290  8800              LDRH     r0,[r0,#0]            ;311
000292  b2c1              UXTB     r1,r0                 ;311
000294  485b              LDR      r0,|L1.1028|
000296  6842              LDR      r2,[r0,#4]            ;311  ; g_mesh_service
000298  2030              MOVS     r0,#0x30              ;311
00029a  4360              MULS     r0,r4,r0              ;311
00029c  1810              ADDS     r0,r2,r0              ;311
00029e  7081              STRB     r1,[r0,#2]            ;311
0002a0  2000              MOVS     r0,#0                 ;313
0002a2  e76f              B        |L1.388|
;;;315    
                          ENDP

                  mesh_srv_init PROC
;;;319    
;;;320    uint32_t mesh_srv_init(uint8_t mesh_value_count,
0002a4  b5ff              PUSH     {r0-r7,lr}
;;;321        uint32_t access_address, uint8_t channel, uint32_t adv_int_ms)
;;;322    {
0002a6  b087              SUB      sp,sp,#0x1c
0002a8  4605              MOV      r5,r0
0002aa  461e              MOV      r6,r3
;;;323        if (mesh_value_count > MAX_VALUE_COUNT || mesh_value_count == 0)
0002ac  2d9b              CMP      r5,#0x9b
0002ae  dc01              BGT      |L1.692|
0002b0  2d00              CMP      r5,#0
0002b2  d102              BNE      |L1.698|
                  |L1.692|
;;;324        {
;;;325            return NRF_ERROR_INVALID_PARAM;
0002b4  2007              MOVS     r0,#7
                  |L1.694|
;;;326        }
;;;327    
;;;328        if (is_initialized)
;;;329        {
;;;330            return NRF_ERROR_INVALID_STATE;
;;;331        }
;;;332    
;;;333        is_initialized = true;
;;;334    
;;;335        ble_enable_params_t ble_enable_params;
;;;336        ble_enable_params.gatts_enable_params.attr_tab_size = RBC_MESH_GATTS_ATTR_TABLE_SIZE_DEFAULT;
;;;337        ble_enable_params.gatts_enable_params.service_changed = 0;
;;;338    
;;;339        uint32_t error_code = sd_ble_enable(&ble_enable_params);
;;;340        if (error_code != NRF_SUCCESS)
;;;341        {
;;;342            return NRF_ERROR_INTERNAL;
;;;343        }
;;;344    
;;;345        g_mesh_service.value_count = mesh_value_count;
;;;346    
;;;347        ble_uuid_t ble_srv_uuid;
;;;348        mesh_base_uuid_type = BLE_UUID_TYPE_UNKNOWN;
;;;349        /* add the mesh base UUID */
;;;350    
;;;351        error_code = sd_ble_uuid_vs_add(&mesh_base_uuid, &mesh_base_uuid_type);
;;;352        if (error_code != NRF_SUCCESS)
;;;353        {
;;;354            return NRF_ERROR_INTERNAL;
;;;355        }
;;;356    
;;;357        ble_srv_uuid.type = mesh_base_uuid_type;
;;;358        ble_srv_uuid.uuid = MESH_SRV_UUID;
;;;359    
;;;360        error_code = sd_ble_gatts_service_add(BLE_GATTS_SRVC_TYPE_PRIMARY,
;;;361            &ble_srv_uuid, &g_mesh_service.service_handle);
;;;362    
;;;363        if (error_code != NRF_SUCCESS)
;;;364        {
;;;365            return NRF_ERROR_INTERNAL;
;;;366        }
;;;367    
;;;368        /* Add metadata characteristic */
;;;369        mesh_metadata_char_t mesh_metadata;
;;;370        mesh_metadata.mesh_access_addr = access_address;
;;;371        mesh_metadata.mesh_adv_int_ms = adv_int_ms;
;;;372        mesh_metadata.mesh_channel = channel;
;;;373        mesh_metadata.mesh_value_count = mesh_value_count;
;;;374    
;;;375        error_code = mesh_md_char_add(&mesh_metadata);
;;;376        if (error_code != NRF_SUCCESS)
;;;377        {
;;;378            return error_code;
;;;379        }
;;;380    
;;;381        uint32_t md_len = sizeof(mesh_char_metadata_t) * g_mesh_service.value_count;
;;;382    
;;;383        /* allocate metadata array */
;;;384        g_mesh_service.char_metadata = (mesh_char_metadata_t*) malloc(md_len);
;;;385        memset(g_mesh_service.char_metadata, 0, md_len);
;;;386    
;;;387        /* add characteristics to mesh service */
;;;388        for (uint8_t i = 0; i < g_mesh_service.value_count; ++i)
;;;389        {
;;;390            error_code = mesh_value_char_add(i);
;;;391    
;;;392            if (error_code != NRF_SUCCESS)
;;;393            {
;;;394                return error_code;
;;;395            }
;;;396        }
;;;397    
;;;398        trickle_setup(1000 * adv_int_ms, 600, 3);
;;;399    
;;;400        return NRF_SUCCESS;
;;;401    }
0002b6  b00b              ADD      sp,sp,#0x2c
0002b8  bdf0              POP      {r4-r7,pc}
                  |L1.698|
0002ba  4853              LDR      r0,|L1.1032|
0002bc  7800              LDRB     r0,[r0,#0]            ;328  ; is_initialized
0002be  2800              CMP      r0,#0                 ;328
0002c0  d001              BEQ      |L1.710|
0002c2  2008              MOVS     r0,#8                 ;330
0002c4  e7f7              B        |L1.694|
                  |L1.710|
0002c6  2001              MOVS     r0,#1                 ;333
0002c8  494f              LDR      r1,|L1.1032|
0002ca  7008              STRB     r0,[r1,#0]            ;333
0002cc  02c0              LSLS     r0,r0,#11             ;336
0002ce  9006              STR      r0,[sp,#0x18]         ;336
0002d0  2000              MOVS     r0,#0                 ;337
0002d2  4669              MOV      r1,sp                 ;337
0002d4  7508              STRB     r0,[r1,#0x14]         ;337
0002d6  a805              ADD      r0,sp,#0x14           ;339
0002d8  df60              SVC      #0x60                 ;339
0002da  4604              MOV      r4,r0                 ;339
0002dc  2c00              CMP      r4,#0                 ;340
0002de  d001              BEQ      |L1.740|
0002e0  2003              MOVS     r0,#3                 ;342
0002e2  e7e8              B        |L1.694|
                  |L1.740|
0002e4  4847              LDR      r0,|L1.1028|
0002e6  7005              STRB     r5,[r0,#0]            ;345
0002e8  2000              MOVS     r0,#0                 ;348
0002ea  4945              LDR      r1,|L1.1024|
0002ec  7008              STRB     r0,[r1,#0]            ;348
0002ee  4847              LDR      r0,|L1.1036|
0002f0  df63              SVC      #0x63                 ;351
0002f2  4604              MOV      r4,r0                 ;351
0002f4  2c00              CMP      r4,#0                 ;352
0002f6  d001              BEQ      |L1.764|
0002f8  2003              MOVS     r0,#3                 ;354
0002fa  e7dc              B        |L1.694|
                  |L1.764|
0002fc  4840              LDR      r0,|L1.1024|
0002fe  7801              LDRB     r1,[r0,#0]            ;357  ; mesh_base_uuid_type
000300  4668              MOV      r0,sp                 ;357
000302  7481              STRB     r1,[r0,#0x12]         ;357
000304  2101              MOVS     r1,#1                 ;358
000306  8201              STRH     r1,[r0,#0x10]         ;358
000308  4a3e              LDR      r2,|L1.1028|
00030a  3208              ADDS     r2,r2,#8              ;360
00030c  a904              ADD      r1,sp,#0x10           ;360
00030e  2001              MOVS     r0,#1                 ;360
000310  dfa0              SVC      #0xa0                 ;360
000312  4604              MOV      r4,r0                 ;360
000314  2c00              CMP      r4,#0                 ;363
000316  d001              BEQ      |L1.796|
000318  2003              MOVS     r0,#3                 ;365
00031a  e7cc              B        |L1.694|
                  |L1.796|
00031c  9808              LDR      r0,[sp,#0x20]         ;370
00031e  9001              STR      r0,[sp,#4]            ;370
000320  9602              STR      r6,[sp,#8]            ;371
000322  4669              MOV      r1,sp                 ;372
000324  9809              LDR      r0,[sp,#0x24]         ;372
000326  7348              STRB     r0,[r1,#0xd]          ;372
000328  730d              STRB     r5,[r1,#0xc]          ;373
00032a  a801              ADD      r0,sp,#4              ;375
00032c  f7fffffe          BL       mesh_md_char_add
000330  4604              MOV      r4,r0                 ;375
000332  2c00              CMP      r4,#0                 ;376
000334  d001              BEQ      |L1.826|
000336  4620              MOV      r0,r4                 ;378
000338  e7bd              B        |L1.694|
                  |L1.826|
00033a  4832              LDR      r0,|L1.1028|
00033c  7800              LDRB     r0,[r0,#0]            ;381  ; g_mesh_service
00033e  2130              MOVS     r1,#0x30              ;381
000340  4348              MULS     r0,r1,r0              ;381
000342  9000              STR      r0,[sp,#0]            ;381
000344  9800              LDR      r0,[sp,#0]            ;384
000346  f7fffffe          BL       malloc
00034a  492e              LDR      r1,|L1.1028|
00034c  6048              STR      r0,[r1,#4]            ;384  ; g_mesh_service
00034e  6848              LDR      r0,[r1,#4]            ;385  ; g_mesh_service
000350  9900              LDR      r1,[sp,#0]            ;385
000352  f7fffffe          BL       __aeabi_memclr4
000356  2700              MOVS     r7,#0                 ;388
000358  e009              B        |L1.878|
                  |L1.858|
00035a  4638              MOV      r0,r7                 ;390
00035c  f7fffffe          BL       mesh_value_char_add
000360  4604              MOV      r4,r0                 ;390
000362  2c00              CMP      r4,#0                 ;392
000364  d001              BEQ      |L1.874|
000366  4620              MOV      r0,r4                 ;394
000368  e7a5              B        |L1.694|
                  |L1.874|
00036a  1c78              ADDS     r0,r7,#1              ;388
00036c  b2c7              UXTB     r7,r0                 ;388
                  |L1.878|
00036e  4825              LDR      r0,|L1.1028|
000370  7800              LDRB     r0,[r0,#0]            ;388  ; g_mesh_service
000372  42b8              CMP      r0,r7                 ;388
000374  dcf1              BGT      |L1.858|
000376  217d              MOVS     r1,#0x7d              ;398
000378  00c9              LSLS     r1,r1,#3              ;398
00037a  4371              MULS     r1,r6,r1              ;398
00037c  4608              MOV      r0,r1                 ;398
00037e  2203              MOVS     r2,#3                 ;398
000380  214b              MOVS     r1,#0x4b              ;398
000382  00c9              LSLS     r1,r1,#3              ;398
000384  f7fffffe          BL       trickle_setup
000388  2000              MOVS     r0,#0                 ;400
00038a  e794              B        |L1.694|
;;;402    
                          ENDP

                  mesh_srv_char_val_set PROC
;;;403    
;;;404    uint32_t mesh_srv_char_val_set(uint8_t index, uint8_t* data, uint16_t len, bool update_sender)
00038c  b5ff              PUSH     {r0-r7,lr}
;;;405    {
00038e  b085              SUB      sp,sp,#0x14
000390  4606              MOV      r6,r0
000392  460f              MOV      r7,r1
;;;406        if (!is_initialized)
000394  481c              LDR      r0,|L1.1032|
000396  7800              LDRB     r0,[r0,#0]  ; is_initialized
000398  2800              CMP      r0,#0
00039a  d102              BNE      |L1.930|
;;;407        {
;;;408            return NRF_ERROR_INVALID_STATE;
00039c  2008              MOVS     r0,#8
                  |L1.926|
;;;409        }
;;;410    
;;;411        if (index > g_mesh_service.value_count || index == 0)
;;;412        {
;;;413            return NRF_ERROR_INVALID_ADDR;
;;;414        }
;;;415    
;;;416        if (len > MAX_VALUE_LENGTH)
;;;417        {
;;;418            return NRF_ERROR_INVALID_LENGTH;
;;;419        }
;;;420        uint32_t error_code = 0;
;;;421    
;;;422        mesh_char_metadata_t* ch_md = &g_mesh_service.char_metadata[index - 1];
;;;423    
;;;424        /* this is now a new version of this data, signal to the rest of the mesh */
;;;425        version_increase(&ch_md->version_number);
;;;426    
;;;427        bool first_time =
;;;428            (ch_md->flags &
;;;429            (1 << MESH_MD_FLAGS_USED_POS)) == 0;
;;;430    
;;;431        if (first_time)
;;;432        {
;;;433            ch_md->flags |=
;;;434                (1 << MESH_MD_FLAGS_INITIALIZED_POS) |
;;;435                (1 << MESH_MD_FLAGS_USED_POS);
;;;436            trickle_init(&ch_md->trickle);
;;;437        }
;;;438        else
;;;439        {
;;;440            trickle_rx_inconsistent(&ch_md->trickle);
;;;441        }
;;;442    
;;;443        if (update_sender || first_time)
;;;444        {
;;;445            ble_gap_addr_t my_addr;
;;;446            sd_ble_gap_address_get(&my_addr);
;;;447            memcpy(&ch_md->last_sender_addr, &my_addr, sizeof(ble_gap_addr_t));
;;;448            ch_md->flags |= (1 << MESH_MD_FLAGS_IS_ORIGIN_POS);
;;;449        }
;;;450    
;;;451        /* notify the connected central node, if any */
;;;452        if (g_active_conn_handle != CONN_HANDLE_INVALID)
;;;453        {
;;;454            ble_gatts_hvx_params_t notify_params;
;;;455            notify_params.handle = ch_md->char_value_handle;
;;;456            notify_params.offset = 0;
;;;457            notify_params.p_data = data;
;;;458            notify_params.p_len = &len;
;;;459            notify_params.type = BLE_GATT_HVX_NOTIFICATION;
;;;460            error_code = sd_ble_gatts_hvx(g_active_conn_handle, &notify_params);
;;;461            if (error_code != NRF_SUCCESS)
;;;462            {
;;;463                if (error_code == BLE_ERROR_INVALID_CONN_HANDLE)
;;;464                {
;;;465                    g_active_conn_handle = CONN_HANDLE_INVALID;
;;;466                }
;;;467                else if (error_code == BLE_GATTS_EVT_SYS_ATTR_MISSING)
;;;468                {
;;;469                    sd_ble_gatts_sys_attr_set(g_active_conn_handle, NULL, 0, BLE_GATTS_SYS_ATTR_FLAG_USR_SRVCS);
;;;470                }
;;;471                else
;;;472                {
;;;473                    return NRF_ERROR_INTERNAL;
;;;474                }
;;;475            }
;;;476        }
;;;477        else
;;;478        {
;;;479            ble_gatts_value_t gatts_value_set;
;;;480            gatts_value_set.len = len;
;;;481            gatts_value_set.offset = 0;
;;;482            gatts_value_set.p_value = data;
;;;483            error_code = sd_ble_gatts_value_set(
;;;484    						BLE_CONN_HANDLE_INVALID,
;;;485                ch_md->char_value_handle,
;;;486                &gatts_value_set);
;;;487    
;;;488            if (error_code != NRF_SUCCESS)
;;;489            {
;;;490                return NRF_ERROR_INTERNAL;
;;;491            }
;;;492        }
;;;493    
;;;494        return NRF_SUCCESS;
;;;495    }
00039e  b009              ADD      sp,sp,#0x24
0003a0  bdf0              POP      {r4-r7,pc}
                  |L1.930|
0003a2  4818              LDR      r0,|L1.1028|
0003a4  7800              LDRB     r0,[r0,#0]            ;411  ; g_mesh_service
0003a6  42b0              CMP      r0,r6                 ;411
0003a8  db01              BLT      |L1.942|
0003aa  2e00              CMP      r6,#0                 ;411
0003ac  d101              BNE      |L1.946|
                  |L1.942|
0003ae  2010              MOVS     r0,#0x10              ;413
0003b0  e7f5              B        |L1.926|
                  |L1.946|
0003b2  4668              MOV      r0,sp                 ;416
0003b4  8b80              LDRH     r0,[r0,#0x1c]         ;416
0003b6  281c              CMP      r0,#0x1c              ;416
0003b8  dd01              BLE      |L1.958|
0003ba  2009              MOVS     r0,#9                 ;418
0003bc  e7ef              B        |L1.926|
                  |L1.958|
0003be  2500              MOVS     r5,#0                 ;420
0003c0  4810              LDR      r0,|L1.1028|
0003c2  6841              LDR      r1,[r0,#4]            ;422  ; g_mesh_service
0003c4  1e70              SUBS     r0,r6,#1              ;422
0003c6  2230              MOVS     r2,#0x30              ;422
0003c8  4350              MULS     r0,r2,r0              ;422
0003ca  180c              ADDS     r4,r1,r0              ;422
0003cc  4620              MOV      r0,r4                 ;425
0003ce  f7fffffe          BL       version_increase
0003d2  78e0              LDRB     r0,[r4,#3]            ;427
0003d4  07c0              LSLS     r0,r0,#31             ;427
0003d6  0fc0              LSRS     r0,r0,#31             ;427
0003d8  2101              MOVS     r1,#1                 ;427
0003da  4048              EORS     r0,r0,r1              ;427
0003dc  9004              STR      r0,[sp,#0x10]         ;427
0003de  9804              LDR      r0,[sp,#0x10]         ;431
0003e0  2800              CMP      r0,#0                 ;431
0003e2  d015              BEQ      |L1.1040|
0003e4  78e0              LDRB     r0,[r4,#3]            ;433
0003e6  2103              MOVS     r1,#3                 ;433
0003e8  4308              ORRS     r0,r0,r1              ;433
0003ea  70e0              STRB     r0,[r4,#3]            ;433
0003ec  4620              MOV      r0,r4                 ;436
0003ee  3010              ADDS     r0,r0,#0x10           ;436
0003f0  f7fffffe          BL       trickle_init
0003f4  e010              B        |L1.1048|
0003f6  0000              DCW      0x0000
                  |L1.1016|
                          DCD      0x0000ffff
                  |L1.1020|
                          DCD      0x0000ea60
                  |L1.1024|
                          DCD      mesh_base_uuid_type
                  |L1.1028|
                          DCD      g_mesh_service
                  |L1.1032|
                          DCD      is_initialized
                  |L1.1036|
                          DCD      mesh_base_uuid
                  |L1.1040|
000410  4620              MOV      r0,r4                 ;440
000412  3010              ADDS     r0,r0,#0x10           ;440
000414  f7fffffe          BL       trickle_rx_inconsistent
                  |L1.1048|
000418  9808              LDR      r0,[sp,#0x20]         ;443
00041a  2800              CMP      r0,#0                 ;443
00041c  d102              BNE      |L1.1060|
00041e  9804              LDR      r0,[sp,#0x10]         ;443
000420  2800              CMP      r0,#0                 ;443
000422  d00c              BEQ      |L1.1086|
                  |L1.1060|
000424  a802              ADD      r0,sp,#8              ;446
000426  df71              SVC      #0x71                 ;446
000428  2207              MOVS     r2,#7                 ;447
00042a  a902              ADD      r1,sp,#8              ;447
00042c  4620              MOV      r0,r4                 ;447
00042e  3008              ADDS     r0,r0,#8              ;447
000430  f7fffffe          BL       __aeabi_memcpy4
000434  78e0              LDRB     r0,[r4,#3]            ;448
000436  2104              MOVS     r1,#4                 ;448
000438  4308              ORRS     r0,r0,r1              ;448
00043a  70e0              STRB     r0,[r4,#3]            ;448
00043c  bf00              NOP                            ;449
                  |L1.1086|
00043e  48fd              LDR      r0,|L1.2100|
000440  8800              LDRH     r0,[r0,#0]            ;452  ; g_active_conn_handle
000442  49fd              LDR      r1,|L1.2104|
000444  4288              CMP      r0,r1                 ;452
000446  d025              BEQ      |L1.1172|
000448  78a1              LDRB     r1,[r4,#2]            ;455
00044a  4668              MOV      r0,sp                 ;455
00044c  8001              STRH     r1,[r0,#0]            ;455
00044e  2100              MOVS     r1,#0                 ;456
000450  8081              STRH     r1,[r0,#4]            ;456
000452  9703              STR      r7,[sp,#0xc]          ;457
000454  a807              ADD      r0,sp,#0x1c           ;458
000456  9002              STR      r0,[sp,#8]            ;458
000458  2101              MOVS     r1,#1                 ;459
00045a  4668              MOV      r0,sp                 ;459
00045c  7081              STRB     r1,[r0,#2]            ;459
00045e  4669              MOV      r1,sp                 ;460
000460  48f4              LDR      r0,|L1.2100|
000462  8800              LDRH     r0,[r0,#0]            ;460  ; g_active_conn_handle
000464  dfa6              SVC      #0xa6                 ;460
000466  4605              MOV      r5,r0                 ;460
000468  2d00              CMP      r5,#0                 ;461
00046a  d012              BEQ      |L1.1170|
00046c  48f3              LDR      r0,|L1.2108|
00046e  4285              CMP      r5,r0                 ;463
000470  d104              BNE      |L1.1148|
000472  2000              MOVS     r0,#0                 ;465
000474  43c0              MVNS     r0,r0                 ;465
000476  49ef              LDR      r1,|L1.2100|
000478  8008              STRH     r0,[r1,#0]            ;465
00047a  e00a              B        |L1.1170|
                  |L1.1148|
00047c  2d52              CMP      r5,#0x52              ;467
00047e  d106              BNE      |L1.1166|
000480  2302              MOVS     r3,#2                 ;469
000482  2200              MOVS     r2,#0                 ;469
000484  4611              MOV      r1,r2                 ;469
000486  48eb              LDR      r0,|L1.2100|
000488  8800              LDRH     r0,[r0,#0]            ;469  ; g_active_conn_handle
00048a  dfa9              SVC      #0xa9                 ;469
00048c  e001              B        |L1.1170|
                  |L1.1166|
00048e  2003              MOVS     r0,#3                 ;473
000490  e785              B        |L1.926|
                  |L1.1170|
000492  e00f              B        |L1.1204|
                  |L1.1172|
000494  4668              MOV      r0,sp                 ;480
000496  8b81              LDRH     r1,[r0,#0x1c]         ;480
000498  8101              STRH     r1,[r0,#8]            ;480
00049a  2100              MOVS     r1,#0                 ;481
00049c  8141              STRH     r1,[r0,#0xa]          ;481
00049e  9703              STR      r7,[sp,#0xc]          ;482
0004a0  78a1              LDRB     r1,[r4,#2]            ;483
0004a2  aa02              ADD      r2,sp,#8              ;483
0004a4  48e4              LDR      r0,|L1.2104|
0004a6  dfa4              SVC      #0xa4                 ;483
0004a8  4605              MOV      r5,r0                 ;483
0004aa  2d00              CMP      r5,#0                 ;488
0004ac  d001              BEQ      |L1.1202|
0004ae  2003              MOVS     r0,#3                 ;490
0004b0  e775              B        |L1.926|
                  |L1.1202|
0004b2  bf00              NOP                            ;492
                  |L1.1204|
0004b4  2000              MOVS     r0,#0                 ;494
0004b6  e772              B        |L1.926|
;;;496    
                          ENDP

                  mesh_srv_char_val_get PROC
;;;497    uint32_t mesh_srv_char_val_get(uint8_t index, uint8_t* data, uint16_t* len, ble_gap_addr_t* origin_addr)
0004b8  b5ff              PUSH     {r0-r7,lr}
;;;498    {
0004ba  b083              SUB      sp,sp,#0xc
0004bc  4604              MOV      r4,r0
0004be  4615              MOV      r5,r2
0004c0  461e              MOV      r6,r3
;;;499        if (!is_initialized)
0004c2  48df              LDR      r0,|L1.2112|
0004c4  7800              LDRB     r0,[r0,#0]  ; is_initialized
0004c6  2800              CMP      r0,#0
0004c8  d102              BNE      |L1.1232|
;;;500        {
;;;501            return NRF_ERROR_INVALID_STATE;
0004ca  2008              MOVS     r0,#8
                  |L1.1228|
;;;502        }
;;;503    
;;;504        if (index > g_mesh_service.value_count || index == 0)
;;;505        {
;;;506            return NRF_ERROR_INVALID_ADDR;
;;;507        }
;;;508    
;;;509        *len = MAX_VALUE_LENGTH;
;;;510        ble_gatts_value_t ble_gatts_value_get;
;;;511        ble_gatts_value_get.len = *(uint16_t*)len;
;;;512        ble_gatts_value_get.offset = 0;
;;;513        ble_gatts_value_get.p_value = data;
;;;514        uint32_t error_code = sd_ble_gatts_value_get(
;;;515    				BLE_CONN_HANDLE_INVALID,
;;;516            g_mesh_service.char_metadata[index - 1].char_value_handle,
;;;517            &ble_gatts_value_get);
;;;518    
;;;519    		*len = ble_gatts_value_get.len;
;;;520    
;;;521        if (error_code != NRF_SUCCESS)
;;;522        {
;;;523            return NRF_ERROR_INTERNAL;
;;;524        }
;;;525    
;;;526        if (origin_addr != NULL)
;;;527        {
;;;528            memcpy(origin_addr,
;;;529                &g_mesh_service.char_metadata[index - 1].last_sender_addr,
;;;530                sizeof(ble_gap_addr_t));
;;;531        }
;;;532    
;;;533        return NRF_SUCCESS;
;;;534    }
0004cc  b007              ADD      sp,sp,#0x1c
0004ce  bdf0              POP      {r4-r7,pc}
                  |L1.1232|
0004d0  48dc              LDR      r0,|L1.2116|
0004d2  7800              LDRB     r0,[r0,#0]            ;504  ; g_mesh_service
0004d4  42a0              CMP      r0,r4                 ;504
0004d6  db01              BLT      |L1.1244|
0004d8  2c00              CMP      r4,#0                 ;504
0004da  d101              BNE      |L1.1248|
                  |L1.1244|
0004dc  2010              MOVS     r0,#0x10              ;506
0004de  e7f5              B        |L1.1228|
                  |L1.1248|
0004e0  201c              MOVS     r0,#0x1c              ;509
0004e2  8028              STRH     r0,[r5,#0]            ;509
0004e4  8829              LDRH     r1,[r5,#0]            ;511
0004e6  4668              MOV      r0,sp                 ;511
0004e8  8081              STRH     r1,[r0,#4]            ;511
0004ea  2100              MOVS     r1,#0                 ;512
0004ec  80c1              STRH     r1,[r0,#6]            ;512
0004ee  9804              LDR      r0,[sp,#0x10]         ;513
0004f0  9002              STR      r0,[sp,#8]            ;513
0004f2  48d4              LDR      r0,|L1.2116|
0004f4  6842              LDR      r2,[r0,#4]            ;514  ; g_mesh_service
0004f6  1e60              SUBS     r0,r4,#1              ;514
0004f8  2330              MOVS     r3,#0x30              ;514
0004fa  4358              MULS     r0,r3,r0              ;514
0004fc  1810              ADDS     r0,r2,r0              ;514
0004fe  7881              LDRB     r1,[r0,#2]            ;514
000500  aa01              ADD      r2,sp,#4              ;514
000502  48cd              LDR      r0,|L1.2104|
000504  dfa5              SVC      #0xa5                 ;514
000506  4607              MOV      r7,r0                 ;514
000508  4668              MOV      r0,sp                 ;519
00050a  8880              LDRH     r0,[r0,#4]            ;519
00050c  8028              STRH     r0,[r5,#0]            ;519
00050e  2f00              CMP      r7,#0                 ;521
000510  d001              BEQ      |L1.1302|
000512  2003              MOVS     r0,#3                 ;523
000514  e7da              B        |L1.1228|
                  |L1.1302|
000516  2e00              CMP      r6,#0                 ;526
000518  d00b              BEQ      |L1.1330|
00051a  48ca              LDR      r0,|L1.2116|
00051c  6842              LDR      r2,[r0,#4]            ;528  ; g_mesh_service
00051e  1e60              SUBS     r0,r4,#1              ;528
000520  2330              MOVS     r3,#0x30              ;528
000522  4358              MULS     r0,r3,r0              ;528
000524  1810              ADDS     r0,r2,r0              ;528
000526  4601              MOV      r1,r0                 ;528
000528  3108              ADDS     r1,r1,#8              ;528
00052a  2207              MOVS     r2,#7                 ;528
00052c  4630              MOV      r0,r6                 ;528
00052e  f7fffffe          BL       __aeabi_memcpy
                  |L1.1330|
000532  2000              MOVS     r0,#0                 ;533
000534  e7ca              B        |L1.1228|
;;;535    
                          ENDP

                  mesh_srv_char_md_get PROC
;;;536    uint32_t mesh_srv_char_md_get(mesh_metadata_char_t* metadata)
000536  b570              PUSH     {r4-r6,lr}
;;;537    {
000538  b086              SUB      sp,sp,#0x18
00053a  4604              MOV      r4,r0
;;;538        if (!is_initialized)
00053c  48c0              LDR      r0,|L1.2112|
00053e  7800              LDRB     r0,[r0,#0]  ; is_initialized
000540  2800              CMP      r0,#0
000542  d102              BNE      |L1.1354|
;;;539        {
;;;540            return NRF_ERROR_INVALID_STATE;
000544  2008              MOVS     r0,#8
                  |L1.1350|
;;;541        }
;;;542    
;;;543        uint8_t data_array[MESH_MD_CHAR_LEN];
;;;544        uint16_t len = MESH_MD_CHAR_LEN;
;;;545        ble_gatts_value_t ble_gatts_value_get;
;;;546        ble_gatts_value_get.len = len;
;;;547        ble_gatts_value_get.offset = 0;
;;;548        ble_gatts_value_get.p_value = data_array;
;;;549    
;;;550        uint32_t error_code = sd_ble_gatts_value_get(
;;;551            BLE_CONN_HANDLE_INVALID,
;;;552    				g_mesh_service.ble_md_char_handles.value_handle,
;;;553    				&ble_gatts_value_get);
;;;554    
;;;555    		len = ble_gatts_value_get.len;
;;;556    
;;;557        if (error_code != NRF_SUCCESS)
;;;558        {
;;;559            return NRF_ERROR_INTERNAL;
;;;560        }
;;;561    
;;;562        if (len != MESH_MD_CHAR_LEN)
;;;563        {
;;;564            return NRF_ERROR_INTERNAL;
;;;565        }
;;;566    
;;;567        memcpy(&metadata->mesh_access_addr,
;;;568            &data_array[MESH_MD_CHAR_AA_OFFSET],
;;;569            sizeof(metadata->mesh_access_addr));
;;;570    
;;;571        memcpy(&metadata->mesh_adv_int_ms,
;;;572            &data_array[MESH_MD_CHAR_ADV_INT_OFFSET],
;;;573            sizeof(metadata->mesh_adv_int_ms));
;;;574    
;;;575        memcpy(&metadata->mesh_channel,
;;;576            &data_array[MESH_MD_CHAR_CH_OFFSET],
;;;577            sizeof(metadata->mesh_channel));
;;;578    
;;;579        memcpy(&metadata->mesh_value_count,
;;;580            &data_array[MESH_MD_CHAR_COUNT_OFFSET],
;;;581            sizeof(metadata->mesh_value_count));
;;;582    
;;;583        return NRF_SUCCESS;
;;;584    }
000546  b006              ADD      sp,sp,#0x18
000548  bd70              POP      {r4-r6,pc}
                  |L1.1354|
00054a  260a              MOVS     r6,#0xa               ;544
00054c  4668              MOV      r0,sp                 ;546
00054e  8086              STRH     r6,[r0,#4]            ;546
000550  2100              MOVS     r1,#0                 ;547
000552  80c1              STRH     r1,[r0,#6]            ;547
000554  a803              ADD      r0,sp,#0xc            ;548
000556  9002              STR      r0,[sp,#8]            ;548
000558  48ba              LDR      r0,|L1.2116|
00055a  8941              LDRH     r1,[r0,#0xa]          ;550  ; g_mesh_service
00055c  aa01              ADD      r2,sp,#4              ;550
00055e  48b6              LDR      r0,|L1.2104|
000560  dfa5              SVC      #0xa5                 ;550
000562  4605              MOV      r5,r0                 ;550
000564  4668              MOV      r0,sp                 ;555
000566  8886              LDRH     r6,[r0,#4]            ;555
000568  2d00              CMP      r5,#0                 ;557
00056a  d001              BEQ      |L1.1392|
00056c  2003              MOVS     r0,#3                 ;559
00056e  e7ea              B        |L1.1350|
                  |L1.1392|
000570  2e0a              CMP      r6,#0xa               ;562
000572  d001              BEQ      |L1.1400|
000574  2003              MOVS     r0,#3                 ;564
000576  e7e6              B        |L1.1350|
                  |L1.1400|
000578  9803              LDR      r0,[sp,#0xc]          ;567
00057a  6020              STR      r0,[r4,#0]            ;567
00057c  9804              LDR      r0,[sp,#0x10]         ;571
00057e  6060              STR      r0,[r4,#4]            ;571
000580  4669              MOV      r1,sp                 ;575
000582  7d49              LDRB     r1,[r1,#0x15]         ;575
000584  7261              STRB     r1,[r4,#9]            ;575
000586  4669              MOV      r1,sp                 ;579
000588  7d08              LDRB     r0,[r1,#0x14]         ;579
00058a  7220              STRB     r0,[r4,#8]            ;579
00058c  2000              MOVS     r0,#0                 ;583
00058e  e7da              B        |L1.1350|
;;;585    
                          ENDP

                  mesh_srv_get_next_processing_time PROC
;;;586    uint32_t mesh_srv_get_next_processing_time(uint64_t* time)
000590  b5f8              PUSH     {r3-r7,lr}
;;;587    {
000592  4606              MOV      r6,r0
;;;588        if (!is_initialized)
000594  48aa              LDR      r0,|L1.2112|
000596  7800              LDRB     r0,[r0,#0]  ; is_initialized
000598  2800              CMP      r0,#0
00059a  d101              BNE      |L1.1440|
;;;589        {
;;;590            return NRF_ERROR_INVALID_STATE;
00059c  2008              MOVS     r0,#8
                  |L1.1438|
;;;591        }
;;;592        bool anything_to_process = false;
;;;593        *time = UINT64_MAX;
;;;594    
;;;595        for (uint8_t i = 0; i < g_mesh_service.value_count; ++i)
;;;596        {
;;;597            if ((g_mesh_service.char_metadata[i].flags & (1 << MESH_MD_FLAGS_USED_POS)) == 0)
;;;598                continue;
;;;599    
;;;600            uint64_t temp_time = trickle_next_processing_get(&g_mesh_service.char_metadata[i].trickle);
;;;601    
;;;602            if (temp_time < *time)
;;;603            {
;;;604                anything_to_process = true;
;;;605                *time = temp_time;
;;;606            }
;;;607        }
;;;608        if (!anything_to_process)
;;;609        {
;;;610            return NRF_ERROR_NOT_FOUND;
;;;611        }
;;;612    
;;;613        return NRF_SUCCESS;
;;;614    }
00059e  bdf8              POP      {r3-r7,pc}
                  |L1.1440|
0005a0  2000              MOVS     r0,#0                 ;592
0005a2  9000              STR      r0,[sp,#0]            ;592
0005a4  1e41              SUBS     r1,r0,#1              ;593
0005a6  6031              STR      r1,[r6,#0]            ;593
0005a8  6071              STR      r1,[r6,#4]            ;593
0005aa  2700              MOVS     r7,#0                 ;595
0005ac  e022              B        |L1.1524|
                  |L1.1454|
0005ae  48a5              LDR      r0,|L1.2116|
0005b0  6841              LDR      r1,[r0,#4]            ;597  ; g_mesh_service
0005b2  2030              MOVS     r0,#0x30              ;597
0005b4  4378              MULS     r0,r7,r0              ;597
0005b6  1808              ADDS     r0,r1,r0              ;597
0005b8  78c0              LDRB     r0,[r0,#3]            ;597
0005ba  07c0              LSLS     r0,r0,#31             ;597
0005bc  0fc0              LSRS     r0,r0,#31             ;597
0005be  2800              CMP      r0,#0                 ;597
0005c0  d100              BNE      |L1.1476|
0005c2  e015              B        |L1.1520|
                  |L1.1476|
0005c4  499f              LDR      r1,|L1.2116|
0005c6  684a              LDR      r2,[r1,#4]            ;600  ; g_mesh_service
0005c8  2130              MOVS     r1,#0x30              ;600
0005ca  4379              MULS     r1,r7,r1              ;600
0005cc  1851              ADDS     r1,r2,r1              ;600
0005ce  4608              MOV      r0,r1                 ;600
0005d0  3010              ADDS     r0,r0,#0x10           ;600
0005d2  f7fffffe          BL       trickle_next_processing_get
0005d6  4604              MOV      r4,r0                 ;600
0005d8  460d              MOV      r5,r1                 ;600
0005da  462a              MOV      r2,r5                 ;602
0005dc  6871              LDR      r1,[r6,#4]            ;602
0005de  6830              LDR      r0,[r6,#0]            ;602
0005e0  1a20              SUBS     r0,r4,r0              ;602
0005e2  418a              SBCS     r2,r2,r1              ;602
0005e4  d203              BCS      |L1.1518|
0005e6  2001              MOVS     r0,#1                 ;604
0005e8  9000              STR      r0,[sp,#0]            ;604
0005ea  6075              STR      r5,[r6,#4]            ;605
0005ec  6034              STR      r4,[r6,#0]            ;605
                  |L1.1518|
0005ee  bf00              NOP                            ;598
                  |L1.1520|
0005f0  1c78              ADDS     r0,r7,#1              ;595
0005f2  b2c7              UXTB     r7,r0                 ;595
                  |L1.1524|
0005f4  4893              LDR      r0,|L1.2116|
0005f6  7800              LDRB     r0,[r0,#0]            ;595  ; g_mesh_service
0005f8  42b8              CMP      r0,r7                 ;595
0005fa  dcd8              BGT      |L1.1454|
0005fc  9800              LDR      r0,[sp,#0]            ;608
0005fe  2800              CMP      r0,#0                 ;608
000600  d101              BNE      |L1.1542|
000602  2005              MOVS     r0,#5                 ;610
000604  e7cb              B        |L1.1438|
                  |L1.1542|
000606  2000              MOVS     r0,#0                 ;613
000608  e7c9              B        |L1.1438|
;;;615    
                          ENDP

                  mesh_srv_packet_process PROC
;;;616    uint32_t mesh_srv_packet_process(packet_t* packet)
00060a  b5f0              PUSH     {r4-r7,lr}
;;;617    {
00060c  b08b              SUB      sp,sp,#0x2c
00060e  4605              MOV      r5,r0
;;;618        if (!is_initialized)
000610  488b              LDR      r0,|L1.2112|
000612  7800              LDRB     r0,[r0,#0]  ; is_initialized
000614  2800              CMP      r0,#0
000616  d102              BNE      |L1.1566|
;;;619        {
;;;620            return NRF_ERROR_INVALID_STATE;
000618  2008              MOVS     r0,#8
                  |L1.1562|
;;;621        }
;;;622        uint32_t error_code;
;;;623    
;;;624        uint8_t handle = packet->data[MESH_PACKET_HANDLE_OFFSET];
;;;625        uint16_t version = (packet->data[MESH_PACKET_VERSION_OFFSET] |
;;;626                        (((uint16_t) packet->data[MESH_PACKET_VERSION_OFFSET + 1]) << 8));
;;;627        uint8_t* data = &packet->data[MESH_PACKET_DATA_OFFSET];
;;;628        uint16_t data_len = packet->length - MESH_PACKET_DATA_OFFSET;
;;;629    
;;;630        if (data_len > MAX_VALUE_LENGTH)
;;;631        {
;;;632            return NRF_ERROR_INVALID_LENGTH;
;;;633        }
;;;634    
;;;635        if (handle > g_mesh_service.value_count || handle == 0)
;;;636        {
;;;637            return NRF_ERROR_INVALID_ADDR;
;;;638        }
;;;639    
;;;640    
;;;641        mesh_char_metadata_t* ch_md = &g_mesh_service.char_metadata[handle - 1];
;;;642    
;;;643        bool uninitialized = !(ch_md->flags & (1 << MESH_MD_FLAGS_INITIALIZED_POS));
;;;644    
;;;645        if (uninitialized)
;;;646        {
;;;647            trickle_init(&ch_md->trickle);
;;;648        }
;;;649    
;;;650        if (ch_md->version_number != version)
;;;651        {
;;;652            trickle_rx_inconsistent(&ch_md->trickle);
;;;653        }
;;;654    
;;;655    #if MESH_VERSION_SCHEME_LOLLIPOP    
;;;656        /* new version */
;;;657        uint16_t separation = (version >= ch_md->version_number)?
;;;658            (version - ch_md->version_number) :
;;;659            ((version - MESH_VALUE_LOLLIPOP_LIMIT) - (ch_md->version_number - MESH_VALUE_LOLLIPOP_LIMIT) - MESH_VALUE_LOLLIPOP_LIMIT);
;;;660    #endif
;;;661        
;;;662        if (version == ch_md->version_number)
;;;663        {
;;;664            /* check for conflicting data */
;;;665            uint16_t old_len = MAX_VALUE_LENGTH;
;;;666    
;;;667            error_code = mesh_srv_char_val_get(handle, NULL, &old_len, NULL);
;;;668            if (error_code != NRF_SUCCESS)
;;;669            {
;;;670                return error_code;
;;;671            }
;;;672    
;;;673            volatile bool conflicting = false;
;;;674    
;;;675            if (packet->rx_crc != ch_md->crc &&
;;;676                !(ch_md->flags & (1 << MESH_MD_FLAGS_IS_ORIGIN_POS)))
;;;677            {
;;;678                conflicting = true;
;;;679            }
;;;680            else if (old_len != data_len)
;;;681            {
;;;682                conflicting = true;
;;;683            }
;;;684    
;;;685    
;;;686            if (conflicting)
;;;687            {
;;;688                TICK_PIN(7);
;;;689                rbc_mesh_event_t conflicting_evt;
;;;690    
;;;691                conflicting_evt.event_type = RBC_MESH_EVENT_TYPE_CONFLICTING_VAL;
;;;692    
;;;693                conflicting_evt.data_len = data_len;
;;;694                conflicting_evt.value_handle = handle;
;;;695    
;;;696                conflicting_evt.data = data;
;;;697                memcpy(&conflicting_evt.originator_address, &packet->sender, sizeof(ble_gap_addr_t));
;;;698    
;;;699                trickle_rx_inconsistent(&ch_md->trickle);
;;;700    
;;;701                rbc_mesh_event_handler(&conflicting_evt);
;;;702    #ifdef RBC_MESH_SERIAL
;;;703                mesh_aci_rbc_event_handler(&conflicting_evt);
;;;704    #endif
;;;705            }
;;;706            else
;;;707            {
;;;708                trickle_rx_consistent(&ch_md->trickle);
;;;709            }
;;;710    
;;;711        }
;;;712    #if MESH_VERSION_SCHEME_LOLLIPOP
;;;713        else if ((ch_md->version_number < MESH_VALUE_LOLLIPOP_LIMIT && version > ch_md->version_number) ||
;;;714            (ch_md->version_number >= MESH_VALUE_LOLLIPOP_LIMIT && version >= MESH_VALUE_LOLLIPOP_LIMIT && separation < (UINT16_MAX - MESH_VALUE_LOLLIPOP_LIMIT)/2) ||
;;;715            uninitialized)
;;;716    #else
;;;717        else if (ch_md->version_number < version)
;;;718    #endif
;;;719        {
;;;720            /* update value */
;;;721            mesh_srv_char_val_set(handle, data, data_len, false);
;;;722            ch_md->flags |= (1 << MESH_MD_FLAGS_INITIALIZED_POS);
;;;723            ch_md->flags &= ~(1 << MESH_MD_FLAGS_IS_ORIGIN_POS);
;;;724            ch_md->version_number = version;
;;;725    
;;;726            /* Manually set originator address */
;;;727            memcpy(&ch_md->last_sender_addr, &packet->sender, sizeof(ble_gap_addr_t));
;;;728    
;;;729            rbc_mesh_event_t update_evt;
;;;730            update_evt.event_type = ((uninitialized)?
;;;731                RBC_MESH_EVENT_TYPE_NEW_VAL :
;;;732                RBC_MESH_EVENT_TYPE_UPDATE_VAL);
;;;733            update_evt.data_len = data_len;
;;;734            update_evt.value_handle = handle;
;;;735    
;;;736            update_evt.data = data;
;;;737            memcpy(&update_evt.originator_address, &packet->sender, sizeof(ble_gap_addr_t));
;;;738    
;;;739            rbc_mesh_event_handler(&update_evt);
;;;740    #ifdef RBC_MESH_SERIAL
;;;741                mesh_aci_rbc_event_handler(&update_evt);
;;;742    #endif
;;;743        }
;;;744    
;;;745    
;;;746        ch_md->crc = packet->rx_crc;
;;;747    
;;;748        return NRF_SUCCESS;
;;;749    }
00061a  b00b              ADD      sp,sp,#0x2c
00061c  bdf0              POP      {r4-r7,pc}
                  |L1.1566|
00061e  7a2f              LDRB     r7,[r5,#8]            ;624
000620  7a6e              LDRB     r6,[r5,#9]            ;625
000622  7aa9              LDRB     r1,[r5,#0xa]          ;625
000624  0209              LSLS     r1,r1,#8              ;625
000626  430e              ORRS     r6,r6,r1              ;625
000628  4628              MOV      r0,r5                 ;627
00062a  300b              ADDS     r0,r0,#0xb            ;627
00062c  9009              STR      r0,[sp,#0x24]         ;627
00062e  79e8              LDRB     r0,[r5,#7]            ;628
000630  1ec0              SUBS     r0,r0,#3              ;628
000632  b280              UXTH     r0,r0                 ;628
000634  9008              STR      r0,[sp,#0x20]         ;628
000636  9808              LDR      r0,[sp,#0x20]         ;630
000638  281c              CMP      r0,#0x1c              ;630
00063a  dd01              BLE      |L1.1600|
00063c  2009              MOVS     r0,#9                 ;632
00063e  e7ec              B        |L1.1562|
                  |L1.1600|
000640  4880              LDR      r0,|L1.2116|
000642  7800              LDRB     r0,[r0,#0]            ;635  ; g_mesh_service
000644  42b8              CMP      r0,r7                 ;635
000646  db01              BLT      |L1.1612|
000648  2f00              CMP      r7,#0                 ;635
00064a  d101              BNE      |L1.1616|
                  |L1.1612|
00064c  2010              MOVS     r0,#0x10              ;637
00064e  e7e4              B        |L1.1562|
                  |L1.1616|
000650  487c              LDR      r0,|L1.2116|
000652  6841              LDR      r1,[r0,#4]            ;641  ; g_mesh_service
000654  1e78              SUBS     r0,r7,#1              ;641
000656  2230              MOVS     r2,#0x30              ;641
000658  4350              MULS     r0,r2,r0              ;641
00065a  180c              ADDS     r4,r1,r0              ;641
00065c  78e0              LDRB     r0,[r4,#3]            ;643
00065e  0841              LSRS     r1,r0,#1              ;643
000660  2001              MOVS     r0,#1                 ;643
000662  4388              BICS     r0,r0,r1              ;643
000664  9007              STR      r0,[sp,#0x1c]         ;643
000666  9807              LDR      r0,[sp,#0x1c]         ;645
000668  2800              CMP      r0,#0                 ;645
00066a  d003              BEQ      |L1.1652|
00066c  4620              MOV      r0,r4                 ;647
00066e  3010              ADDS     r0,r0,#0x10           ;647
000670  f7fffffe          BL       trickle_init
                  |L1.1652|
000674  8820              LDRH     r0,[r4,#0]            ;650
000676  42b0              CMP      r0,r6                 ;650
000678  d003              BEQ      |L1.1666|
00067a  4620              MOV      r0,r4                 ;652
00067c  3010              ADDS     r0,r0,#0x10           ;652
00067e  f7fffffe          BL       trickle_rx_inconsistent
                  |L1.1666|
000682  8820              LDRH     r0,[r4,#0]            ;657
000684  42b0              CMP      r0,r6                 ;657
000686  dc02              BGT      |L1.1678|
000688  8820              LDRH     r0,[r4,#0]            ;658
00068a  1a30              SUBS     r0,r6,r0              ;658
00068c  e005              B        |L1.1690|
                  |L1.1678|
00068e  4630              MOV      r0,r6                 ;659
000690  38c8              SUBS     r0,r0,#0xc8           ;659
000692  8821              LDRH     r1,[r4,#0]            ;659
000694  39c8              SUBS     r1,r1,#0xc8           ;659
000696  1a40              SUBS     r0,r0,r1              ;659
000698  38c8              SUBS     r0,r0,#0xc8           ;659
                  |L1.1690|
00069a  b280              UXTH     r0,r0                 ;659
00069c  9006              STR      r0,[sp,#0x18]         ;659
00069e  8820              LDRH     r0,[r4,#0]            ;662
0006a0  42b0              CMP      r0,r6                 ;662
0006a2  d143              BNE      |L1.1836|
0006a4  201c              MOVS     r0,#0x1c              ;665
0006a6  9005              STR      r0,[sp,#0x14]         ;665
0006a8  2300              MOVS     r3,#0                 ;667
0006aa  aa05              ADD      r2,sp,#0x14           ;667
0006ac  4619              MOV      r1,r3                 ;667
0006ae  4638              MOV      r0,r7                 ;667
0006b0  f7fffffe          BL       mesh_srv_char_val_get
0006b4  900a              STR      r0,[sp,#0x28]         ;667
0006b6  980a              LDR      r0,[sp,#0x28]         ;668
0006b8  2800              CMP      r0,#0                 ;668
0006ba  d001              BEQ      |L1.1728|
0006bc  980a              LDR      r0,[sp,#0x28]         ;670
0006be  e7ac              B        |L1.1562|
                  |L1.1728|
0006c0  2000              MOVS     r0,#0                 ;673
0006c2  9004              STR      r0,[sp,#0x10]         ;673
0006c4  6aa8              LDR      r0,[r5,#0x28]         ;675
0006c6  6861              LDR      r1,[r4,#4]            ;675
0006c8  4288              CMP      r0,r1                 ;675
0006ca  d007              BEQ      |L1.1756|
0006cc  78e0              LDRB     r0,[r4,#3]            ;676
0006ce  2104              MOVS     r1,#4                 ;676
0006d0  4008              ANDS     r0,r0,r1              ;676
0006d2  2800              CMP      r0,#0                 ;676
0006d4  d102              BNE      |L1.1756|
0006d6  2001              MOVS     r0,#1                 ;678
0006d8  9004              STR      r0,[sp,#0x10]         ;678
0006da  e006              B        |L1.1770|
                  |L1.1756|
0006dc  4668              MOV      r0,sp                 ;680
0006de  8a81              LDRH     r1,[r0,#0x14]         ;680
0006e0  9808              LDR      r0,[sp,#0x20]         ;680
0006e2  4281              CMP      r1,r0                 ;680
0006e4  d001              BEQ      |L1.1770|
0006e6  2001              MOVS     r0,#1                 ;682
0006e8  9004              STR      r0,[sp,#0x10]         ;682
                  |L1.1770|
0006ea  4668              MOV      r0,sp                 ;686
0006ec  7c00              LDRB     r0,[r0,#0x10]         ;686
0006ee  2800              CMP      r0,#0                 ;686
0006f0  d017              BEQ      |L1.1826|
0006f2  2101              MOVS     r1,#1                 ;691
0006f4  4668              MOV      r0,sp                 ;691
0006f6  7001              STRB     r1,[r0,#0]            ;691
0006f8  9808              LDR      r0,[sp,#0x20]         ;693
0006fa  b2c1              UXTB     r1,r0                 ;693
0006fc  4668              MOV      r0,sp                 ;693
0006fe  7201              STRB     r1,[r0,#8]            ;693
000700  8047              STRH     r7,[r0,#2]            ;694
000702  9809              LDR      r0,[sp,#0x24]         ;696
000704  9001              STR      r0,[sp,#4]            ;696
000706  2207              MOVS     r2,#7                 ;697
000708  4629              MOV      r1,r5                 ;697
00070a  a802              ADD      r0,sp,#8              ;697
00070c  3001              ADDS     r0,#1                 ;697
00070e  f7fffffe          BL       __aeabi_memcpy
000712  4620              MOV      r0,r4                 ;699
000714  3010              ADDS     r0,r0,#0x10           ;699
000716  f7fffffe          BL       trickle_rx_inconsistent
00071a  4668              MOV      r0,sp                 ;701
00071c  f7fffffe          BL       rbc_mesh_event_handler
000720  e003              B        |L1.1834|
                  |L1.1826|
000722  4620              MOV      r0,r4                 ;708
000724  3010              ADDS     r0,r0,#0x10           ;708
000726  f7fffffe          BL       trickle_rx_consistent
                  |L1.1834|
00072a  e03f              B        |L1.1964|
                  |L1.1836|
00072c  8820              LDRH     r0,[r4,#0]            ;713
00072e  28c8              CMP      r0,#0xc8              ;713
000730  da02              BGE      |L1.1848|
000732  8820              LDRH     r0,[r4,#0]            ;713
000734  42b0              CMP      r0,r6                 ;713
000736  db0b              BLT      |L1.1872|
                  |L1.1848|
000738  8820              LDRH     r0,[r4,#0]            ;714
00073a  28c8              CMP      r0,#0xc8              ;714
00073c  db05              BLT      |L1.1866|
00073e  2ec8              CMP      r6,#0xc8              ;714
000740  db03              BLT      |L1.1866|
000742  4941              LDR      r1,|L1.2120|
000744  9806              LDR      r0,[sp,#0x18]         ;714
000746  4288              CMP      r0,r1                 ;714
000748  db02              BLT      |L1.1872|
                  |L1.1866|
00074a  9807              LDR      r0,[sp,#0x1c]         ;715
00074c  2800              CMP      r0,#0                 ;715
00074e  d02d              BEQ      |L1.1964|
                  |L1.1872|
000750  2300              MOVS     r3,#0                 ;721
000752  4638              MOV      r0,r7                 ;721
000754  9a08              LDR      r2,[sp,#0x20]         ;721
000756  9909              LDR      r1,[sp,#0x24]         ;721
000758  f7fffffe          BL       mesh_srv_char_val_set
00075c  78e0              LDRB     r0,[r4,#3]            ;722
00075e  2102              MOVS     r1,#2                 ;722
000760  4308              ORRS     r0,r0,r1              ;722
000762  70e0              STRB     r0,[r4,#3]            ;722
000764  78e0              LDRB     r0,[r4,#3]            ;723
000766  2104              MOVS     r1,#4                 ;723
000768  4388              BICS     r0,r0,r1              ;723
00076a  70e0              STRB     r0,[r4,#3]            ;723
00076c  8026              STRH     r6,[r4,#0]            ;724
00076e  2207              MOVS     r2,#7                 ;727
000770  4629              MOV      r1,r5                 ;727
000772  4620              MOV      r0,r4                 ;727
000774  3008              ADDS     r0,r0,#8              ;727
000776  f7fffffe          BL       __aeabi_memcpy4
00077a  9807              LDR      r0,[sp,#0x1c]         ;730
00077c  2800              CMP      r0,#0                 ;730
00077e  d001              BEQ      |L1.1924|
000780  2102              MOVS     r1,#2                 ;731
000782  e000              B        |L1.1926|
                  |L1.1924|
000784  2100              MOVS     r1,#0                 ;732
                  |L1.1926|
000786  4668              MOV      r0,sp                 ;732
000788  7201              STRB     r1,[r0,#8]            ;732
00078a  9808              LDR      r0,[sp,#0x20]         ;733
00078c  b2c1              UXTB     r1,r0                 ;733
00078e  4668              MOV      r0,sp                 ;733
000790  7401              STRB     r1,[r0,#0x10]         ;733
000792  8147              STRH     r7,[r0,#0xa]          ;734
000794  9809              LDR      r0,[sp,#0x24]         ;736
000796  9003              STR      r0,[sp,#0xc]          ;736
000798  2207              MOVS     r2,#7                 ;737
00079a  4629              MOV      r1,r5                 ;737
00079c  a804              ADD      r0,sp,#0x10           ;737
00079e  3001              ADDS     r0,#1                 ;737
0007a0  f7fffffe          BL       __aeabi_memcpy
0007a4  a802              ADD      r0,sp,#8              ;739
0007a6  f7fffffe          BL       rbc_mesh_event_handler
0007aa  bf00              NOP                            ;743
                  |L1.1964|
0007ac  6aa8              LDR      r0,[r5,#0x28]         ;746
0007ae  6060              STR      r0,[r4,#4]            ;746
0007b0  2000              MOVS     r0,#0                 ;748
0007b2  e732              B        |L1.1562|
;;;750    
                          ENDP

                  mesh_srv_conn_handle_update PROC
;;;751    uint32_t mesh_srv_conn_handle_update(uint16_t conn_handle)
0007b4  4601              MOV      r1,r0
;;;752    {
;;;753        g_active_conn_handle = conn_handle;
0007b6  481f              LDR      r0,|L1.2100|
0007b8  8001              STRH     r1,[r0,#0]
;;;754    
;;;755        return NRF_SUCCESS;
0007ba  2000              MOVS     r0,#0
;;;756    }
0007bc  4770              BX       lr
;;;757    
                          ENDP

                  mesh_srv_packet_assemble PROC
;;;758    uint32_t mesh_srv_packet_assemble(packet_t* packet,
0007be  b5f0              PUSH     {r4-r7,lr}
;;;759        uint16_t packet_max_len,
;;;760        bool* has_anything_to_send)
;;;761    {
0007c0  b08b              SUB      sp,sp,#0x2c
0007c2  4604              MOV      r4,r0
0007c4  4617              MOV      r7,r2
;;;762        *has_anything_to_send = false;
0007c6  2000              MOVS     r0,#0
0007c8  7038              STRB     r0,[r7,#0]
;;;763        if (!is_initialized)
0007ca  481d              LDR      r0,|L1.2112|
0007cc  7800              LDRB     r0,[r0,#0]  ; is_initialized
0007ce  2800              CMP      r0,#0
0007d0  d102              BNE      |L1.2008|
;;;764        {
;;;765            return NRF_ERROR_INVALID_STATE;
0007d2  2008              MOVS     r0,#8
                  |L1.2004|
;;;766        }
;;;767    
;;;768        uint32_t error_code;
;;;769    
;;;770        for (uint8_t i = 0; i < g_mesh_service.value_count; ++i)
;;;771        {
;;;772            mesh_char_metadata_t* md_ch = &g_mesh_service.char_metadata[i];
;;;773    
;;;774            if ((md_ch->flags & (1 << MESH_MD_FLAGS_USED_POS)) == 0)
;;;775                continue;
;;;776    
;;;777            bool do_trickle_tx = false;
;;;778            trickle_step(&md_ch->trickle, &do_trickle_tx);
;;;779    
;;;780    
;;;781            if (do_trickle_tx && !(*has_anything_to_send))
;;;782            {
;;;783                trickle_register_tx(&md_ch->trickle);
;;;784                uint8_t data[MAX_VALUE_LENGTH];
;;;785                uint16_t len = MAX_VALUE_LENGTH;
;;;786    
;;;787                error_code = mesh_srv_char_val_get(i + 1, data, &len, NULL);
;;;788    
;;;789                if (error_code != NRF_SUCCESS)
;;;790                {
;;;791                    return error_code;
;;;792                }
;;;793    
;;;794                packet->data[MESH_PACKET_HANDLE_OFFSET] = i + 1;
;;;795                packet->data[MESH_PACKET_VERSION_OFFSET] =
;;;796                    (md_ch->version_number & 0xFF);
;;;797                packet->data[MESH_PACKET_VERSION_OFFSET + 1] =
;;;798                    ((md_ch->version_number >> 8) & 0xFF);
;;;799    
;;;800                memcpy(&packet->data[MESH_PACKET_DATA_OFFSET], data, len);
;;;801                packet->length = len + MESH_PACKET_DATA_OFFSET;
;;;802    
;;;803                memcpy(&packet->sender, &md_ch->last_sender_addr, sizeof(md_ch->last_sender_addr));
;;;804    
;;;805                /**@TODO: Add multiple trickle messages in one packet */
;;;806    
;;;807                *has_anything_to_send = true;
;;;808                //break;
;;;809            }
;;;810        }
;;;811    
;;;812        return NRF_SUCCESS;
;;;813    }
0007d4  b00b              ADD      sp,sp,#0x2c
0007d6  bdf0              POP      {r4-r7,pc}
                  |L1.2008|
0007d8  2600              MOVS     r6,#0                 ;770
0007da  e055              B        |L1.2184|
                  |L1.2012|
0007dc  4819              LDR      r0,|L1.2116|
0007de  6841              LDR      r1,[r0,#4]            ;772  ; g_mesh_service
0007e0  2030              MOVS     r0,#0x30              ;772
0007e2  4370              MULS     r0,r6,r0              ;772
0007e4  180d              ADDS     r5,r1,r0              ;772
0007e6  78e8              LDRB     r0,[r5,#3]            ;774
0007e8  07c0              LSLS     r0,r0,#31             ;774
0007ea  0fc0              LSRS     r0,r0,#31             ;774
0007ec  2800              CMP      r0,#0                 ;774
0007ee  d100              BNE      |L1.2034|
0007f0  e048              B        |L1.2180|
                  |L1.2034|
0007f2  2100              MOVS     r1,#0                 ;777
0007f4  9109              STR      r1,[sp,#0x24]         ;777
0007f6  a909              ADD      r1,sp,#0x24           ;778
0007f8  4628              MOV      r0,r5                 ;778
0007fa  3010              ADDS     r0,r0,#0x10           ;778
0007fc  f7fffffe          BL       trickle_step
000800  a808              ADD      r0,sp,#0x20           ;781
000802  7900              LDRB     r0,[r0,#4]            ;781
000804  2800              CMP      r0,#0                 ;781
000806  d03c              BEQ      |L1.2178|
000808  7838              LDRB     r0,[r7,#0]            ;781
00080a  2800              CMP      r0,#0                 ;781
00080c  d139              BNE      |L1.2178|
00080e  4628              MOV      r0,r5                 ;783
000810  3010              ADDS     r0,r0,#0x10           ;783
000812  f7fffffe          BL       trickle_register_tx
000816  201c              MOVS     r0,#0x1c              ;785
000818  9001              STR      r0,[sp,#4]            ;785
00081a  1c71              ADDS     r1,r6,#1              ;787
00081c  b2c8              UXTB     r0,r1                 ;787
00081e  2300              MOVS     r3,#0                 ;787
000820  aa01              ADD      r2,sp,#4              ;787
000822  a902              ADD      r1,sp,#8              ;787
000824  f7fffffe          BL       mesh_srv_char_val_get
000828  900a              STR      r0,[sp,#0x28]         ;787
00082a  980a              LDR      r0,[sp,#0x28]         ;789
00082c  2800              CMP      r0,#0                 ;789
00082e  d00d              BEQ      |L1.2124|
000830  980a              LDR      r0,[sp,#0x28]         ;791
000832  e7cf              B        |L1.2004|
                  |L1.2100|
                          DCD      g_active_conn_handle
                  |L1.2104|
                          DCD      0x0000ffff
                  |L1.2108|
                          DCD      0x00003002
                  |L1.2112|
                          DCD      is_initialized
                  |L1.2116|
                          DCD      g_mesh_service
                  |L1.2120|
                          DCD      0x00007f9b
                  |L1.2124|
00084c  1c70              ADDS     r0,r6,#1              ;794
00084e  7220              STRB     r0,[r4,#8]            ;794
000850  7829              LDRB     r1,[r5,#0]            ;795
000852  7261              STRB     r1,[r4,#9]            ;795
000854  8828              LDRH     r0,[r5,#0]            ;797
000856  1200              ASRS     r0,r0,#8              ;797
000858  72a0              STRB     r0,[r4,#0xa]          ;797
00085a  4668              MOV      r0,sp                 ;800
00085c  8882              LDRH     r2,[r0,#4]            ;800
00085e  a902              ADD      r1,sp,#8              ;800
000860  4620              MOV      r0,r4                 ;800
000862  300b              ADDS     r0,r0,#0xb            ;800
000864  f7fffffe          BL       __aeabi_memcpy
000868  4668              MOV      r0,sp                 ;801
00086a  8880              LDRH     r0,[r0,#4]            ;801
00086c  1cc0              ADDS     r0,r0,#3              ;801
00086e  71e0              STRB     r0,[r4,#7]            ;801
000870  2207              MOVS     r2,#7                 ;803
000872  4629              MOV      r1,r5                 ;803
000874  3108              ADDS     r1,r1,#8              ;803
000876  4620              MOV      r0,r4                 ;803
000878  f7fffffe          BL       __aeabi_memcpy4
00087c  2001              MOVS     r0,#1                 ;807
00087e  7038              STRB     r0,[r7,#0]            ;807
000880  bf00              NOP                            ;809
                  |L1.2178|
000882  bf00              NOP                            ;775
                  |L1.2180|
000884  1c70              ADDS     r0,r6,#1              ;770
000886  b2c6              UXTB     r6,r0                 ;770
                  |L1.2184|
000888  4859              LDR      r0,|L1.2544|
00088a  7800              LDRB     r0,[r0,#0]            ;770  ; g_mesh_service
00088c  42b0              CMP      r0,r6                 ;770
00088e  dca5              BGT      |L1.2012|
000890  2000              MOVS     r0,#0                 ;812
000892  e79f              B        |L1.2004|
;;;814    
                          ENDP

                  mesh_srv_gatts_evt_write_handle PROC
;;;815    
;;;816    uint32_t mesh_srv_gatts_evt_write_handle(ble_gatts_evt_write_t* evt)
000894  b5f0              PUSH     {r4-r7,lr}
;;;817    {
000896  b087              SUB      sp,sp,#0x1c
000898  4605              MOV      r5,r0
;;;818        if (!is_initialized)
00089a  4856              LDR      r0,|L1.2548|
00089c  7800              LDRB     r0,[r0,#0]  ; is_initialized
00089e  2800              CMP      r0,#0
0008a0  d102              BNE      |L1.2216|
;;;819        {
;;;820            return NRF_ERROR_INVALID_STATE;
0008a2  2008              MOVS     r0,#8
                  |L1.2212|
;;;821        }
;;;822    
;;;823        if (evt->context.srvc_handle != g_mesh_service.service_handle)
;;;824        {
;;;825            return NRF_ERROR_FORBIDDEN;
;;;826        }
;;;827    
;;;828        for (uint8_t i = 0; i < g_mesh_service.value_count; ++i)
;;;829        {
;;;830            if (g_mesh_service.char_metadata[i].char_value_handle == evt->handle)
;;;831            {
;;;832                mesh_char_metadata_t* ch_md = &g_mesh_service.char_metadata[i];
;;;833                bool uninitialized = !(ch_md->flags & (1 << MESH_MD_FLAGS_INITIALIZED_POS));
;;;834    
;;;835                if (uninitialized)
;;;836                {
;;;837                    trickle_init(&ch_md->trickle);
;;;838                }
;;;839    
;;;840                ch_md->flags |=
;;;841                    (1 << MESH_MD_FLAGS_INITIALIZED_POS) |
;;;842                    (1 << MESH_MD_FLAGS_USED_POS) |
;;;843                    (1 << MESH_MD_FLAGS_IS_ORIGIN_POS);
;;;844    
;;;845                version_increase(&ch_md->version_number);
;;;846                
;;;847                trickle_rx_inconsistent(&ch_md->trickle);
;;;848                ble_gap_addr_t my_addr;
;;;849                sd_ble_gap_address_get(&my_addr);
;;;850                memcpy(&ch_md->last_sender_addr, &my_addr, sizeof(ble_gap_addr_t));
;;;851    
;;;852                rbc_mesh_event_t update_evt;
;;;853                update_evt.event_type = ((uninitialized)?
;;;854                    RBC_MESH_EVENT_TYPE_NEW_VAL :
;;;855                    RBC_MESH_EVENT_TYPE_UPDATE_VAL);
;;;856    
;;;857                update_evt.data_len = evt->len;
;;;858                update_evt.value_handle = i + 1;
;;;859                update_evt.data = evt->data;
;;;860                memcpy(&update_evt.originator_address, &my_addr, sizeof(ble_gap_addr_t));
;;;861    
;;;862                rbc_mesh_event_handler(&update_evt);
;;;863    #ifdef RBC_MESH_SERIAL
;;;864                mesh_aci_rbc_event_handler(&update_evt);
;;;865    #endif
;;;866                return NRF_SUCCESS;
;;;867            }
;;;868        }
;;;869        return NRF_ERROR_INVALID_ADDR;
;;;870    }
0008a4  b007              ADD      sp,sp,#0x1c
0008a6  bdf0              POP      {r4-r7,pc}
                  |L1.2216|
0008a8  8a28              LDRH     r0,[r5,#0x10]         ;823
0008aa  4951              LDR      r1,|L1.2544|
0008ac  8909              LDRH     r1,[r1,#8]            ;823  ; g_mesh_service
0008ae  4288              CMP      r0,r1                 ;823
0008b0  d001              BEQ      |L1.2230|
0008b2  200f              MOVS     r0,#0xf               ;825
0008b4  e7f6              B        |L1.2212|
                  |L1.2230|
0008b6  2600              MOVS     r6,#0                 ;828
0008b8  e046              B        |L1.2376|
                  |L1.2234|
0008ba  484d              LDR      r0,|L1.2544|
0008bc  6841              LDR      r1,[r0,#4]            ;830  ; g_mesh_service
0008be  2030              MOVS     r0,#0x30              ;830
0008c0  4370              MULS     r0,r6,r0              ;830
0008c2  1808              ADDS     r0,r1,r0              ;830
0008c4  7880              LDRB     r0,[r0,#2]            ;830
0008c6  8829              LDRH     r1,[r5,#0]            ;830
0008c8  4288              CMP      r0,r1                 ;830
0008ca  d13b              BNE      |L1.2372|
0008cc  4848              LDR      r0,|L1.2544|
0008ce  6841              LDR      r1,[r0,#4]            ;832  ; g_mesh_service
0008d0  2030              MOVS     r0,#0x30              ;832
0008d2  4370              MULS     r0,r6,r0              ;832
0008d4  180c              ADDS     r4,r1,r0              ;832
0008d6  78e0              LDRB     r0,[r4,#3]            ;833
0008d8  0841              LSRS     r1,r0,#1              ;833
0008da  2001              MOVS     r0,#1                 ;833
0008dc  4388              BICS     r0,r0,r1              ;833
0008de  4607              MOV      r7,r0                 ;833
0008e0  2f00              CMP      r7,#0                 ;835
0008e2  d003              BEQ      |L1.2284|
0008e4  4620              MOV      r0,r4                 ;837
0008e6  3010              ADDS     r0,r0,#0x10           ;837
0008e8  f7fffffe          BL       trickle_init
                  |L1.2284|
0008ec  78e0              LDRB     r0,[r4,#3]            ;840
0008ee  2107              MOVS     r1,#7                 ;840
0008f0  4308              ORRS     r0,r0,r1              ;840
0008f2  70e0              STRB     r0,[r4,#3]            ;840
0008f4  4620              MOV      r0,r4                 ;845
0008f6  f7fffffe          BL       version_increase
0008fa  4620              MOV      r0,r4                 ;847
0008fc  3010              ADDS     r0,r0,#0x10           ;847
0008fe  f7fffffe          BL       trickle_rx_inconsistent
000902  a805              ADD      r0,sp,#0x14           ;849
000904  df71              SVC      #0x71                 ;849
000906  2207              MOVS     r2,#7                 ;850
000908  a905              ADD      r1,sp,#0x14           ;850
00090a  4620              MOV      r0,r4                 ;850
00090c  3008              ADDS     r0,r0,#8              ;850
00090e  f7fffffe          BL       __aeabi_memcpy4
000912  2f00              CMP      r7,#0                 ;853
000914  d001              BEQ      |L1.2330|
000916  2102              MOVS     r1,#2                 ;854
000918  e000              B        |L1.2332|
                  |L1.2330|
00091a  2100              MOVS     r1,#0                 ;855
                  |L1.2332|
00091c  4668              MOV      r0,sp                 ;855
00091e  7101              STRB     r1,[r0,#4]            ;855
000920  7e29              LDRB     r1,[r5,#0x18]         ;857
000922  7301              STRB     r1,[r0,#0xc]          ;857
000924  1c70              ADDS     r0,r6,#1              ;858
000926  4669              MOV      r1,sp                 ;858
000928  80c8              STRH     r0,[r1,#6]            ;858
00092a  4628              MOV      r0,r5                 ;859
00092c  301a              ADDS     r0,r0,#0x1a           ;859
00092e  9002              STR      r0,[sp,#8]            ;859
000930  2207              MOVS     r2,#7                 ;860
000932  a905              ADD      r1,sp,#0x14           ;860
000934  1fc8              SUBS     r0,r1,#7              ;860
000936  f7fffffe          BL       __aeabi_memcpy
00093a  a801              ADD      r0,sp,#4              ;862
00093c  f7fffffe          BL       rbc_mesh_event_handler
000940  2000              MOVS     r0,#0                 ;866
000942  e7af              B        |L1.2212|
                  |L1.2372|
000944  1c70              ADDS     r0,r6,#1              ;828
000946  b2c6              UXTB     r6,r0                 ;828
                  |L1.2376|
000948  4829              LDR      r0,|L1.2544|
00094a  7800              LDRB     r0,[r0,#0]            ;828  ; g_mesh_service
00094c  42b0              CMP      r0,r6                 ;828
00094e  dcb4              BGT      |L1.2234|
000950  2010              MOVS     r0,#0x10              ;869
000952  e7a7              B        |L1.2212|
;;;871    
                          ENDP

                  mesh_srv_char_val_enable PROC
;;;872    uint32_t mesh_srv_char_val_enable(uint8_t index)
000954  b510              PUSH     {r4,lr}
;;;873    {
000956  4604              MOV      r4,r0
;;;874        if (!is_initialized)
000958  4826              LDR      r0,|L1.2548|
00095a  7800              LDRB     r0,[r0,#0]  ; is_initialized
00095c  2800              CMP      r0,#0
00095e  d101              BNE      |L1.2404|
;;;875        {
;;;876            return NRF_ERROR_INVALID_STATE;
000960  2008              MOVS     r0,#8
                  |L1.2402|
;;;877        }
;;;878    
;;;879        if (index > g_mesh_service.value_count || index == 0)
;;;880        {
;;;881            return NRF_ERROR_INVALID_ADDR;
;;;882        }
;;;883    
;;;884        trickle_init(&g_mesh_service.char_metadata[index - 1].trickle);
;;;885    
;;;886        g_mesh_service.char_metadata[index - 1].flags |=
;;;887            (1 << MESH_MD_FLAGS_INITIALIZED_POS) |
;;;888            (1 << MESH_MD_FLAGS_USED_POS);
;;;889    
;;;890    
;;;891        return NRF_SUCCESS;
;;;892    }
000962  bd10              POP      {r4,pc}
                  |L1.2404|
000964  4822              LDR      r0,|L1.2544|
000966  7800              LDRB     r0,[r0,#0]            ;879  ; g_mesh_service
000968  42a0              CMP      r0,r4                 ;879
00096a  db01              BLT      |L1.2416|
00096c  2c00              CMP      r4,#0                 ;879
00096e  d101              BNE      |L1.2420|
                  |L1.2416|
000970  2010              MOVS     r0,#0x10              ;881
000972  e7f6              B        |L1.2402|
                  |L1.2420|
000974  491e              LDR      r1,|L1.2544|
000976  684a              LDR      r2,[r1,#4]            ;884  ; g_mesh_service
000978  1e61              SUBS     r1,r4,#1              ;884
00097a  2330              MOVS     r3,#0x30              ;884
00097c  4359              MULS     r1,r3,r1              ;884
00097e  1851              ADDS     r1,r2,r1              ;884
000980  4608              MOV      r0,r1                 ;884
000982  3010              ADDS     r0,r0,#0x10           ;884
000984  f7fffffe          BL       trickle_init
000988  4819              LDR      r0,|L1.2544|
00098a  6841              LDR      r1,[r0,#4]            ;886  ; g_mesh_service
00098c  1e60              SUBS     r0,r4,#1              ;886
00098e  2230              MOVS     r2,#0x30              ;886
000990  4350              MULS     r0,r2,r0              ;886
000992  1808              ADDS     r0,r1,r0              ;886
000994  78c1              LDRB     r1,[r0,#3]            ;886
000996  2003              MOVS     r0,#3                 ;886
000998  4301              ORRS     r1,r1,r0              ;886
00099a  4815              LDR      r0,|L1.2544|
00099c  6842              LDR      r2,[r0,#4]            ;886  ; g_mesh_service
00099e  1e60              SUBS     r0,r4,#1              ;886
0009a0  2330              MOVS     r3,#0x30              ;886
0009a2  4358              MULS     r0,r3,r0              ;886
0009a4  1810              ADDS     r0,r2,r0              ;886
0009a6  70c1              STRB     r1,[r0,#3]            ;886
0009a8  2000              MOVS     r0,#0                 ;891
0009aa  e7da              B        |L1.2402|
;;;893    
                          ENDP

                  mesh_srv_char_val_disable PROC
;;;894    uint32_t mesh_srv_char_val_disable(uint8_t index)
0009ac  b510              PUSH     {r4,lr}
;;;895    {
0009ae  4601              MOV      r1,r0
;;;896        if (!is_initialized)
0009b0  4810              LDR      r0,|L1.2548|
0009b2  7800              LDRB     r0,[r0,#0]  ; is_initialized
0009b4  2800              CMP      r0,#0
0009b6  d101              BNE      |L1.2492|
;;;897        {
;;;898            return NRF_ERROR_INVALID_STATE;
0009b8  2008              MOVS     r0,#8
                  |L1.2490|
;;;899        }
;;;900    
;;;901        if (index > g_mesh_service.value_count || index == 0)
;;;902        {
;;;903            return NRF_ERROR_INVALID_ADDR;
;;;904        }
;;;905    
;;;906        g_mesh_service.char_metadata[index - 1].flags &=
;;;907            ~(1 << MESH_MD_FLAGS_USED_POS);
;;;908    
;;;909        return NRF_SUCCESS;
;;;910    }
0009ba  bd10              POP      {r4,pc}
                  |L1.2492|
0009bc  480c              LDR      r0,|L1.2544|
0009be  7800              LDRB     r0,[r0,#0]            ;901  ; g_mesh_service
0009c0  4288              CMP      r0,r1                 ;901
0009c2  db01              BLT      |L1.2504|
0009c4  2900              CMP      r1,#0                 ;901
0009c6  d101              BNE      |L1.2508|
                  |L1.2504|
0009c8  2010              MOVS     r0,#0x10              ;903
0009ca  e7f6              B        |L1.2490|
                  |L1.2508|
0009cc  4808              LDR      r0,|L1.2544|
0009ce  6842              LDR      r2,[r0,#4]            ;906  ; g_mesh_service
0009d0  1e48              SUBS     r0,r1,#1              ;906
0009d2  2330              MOVS     r3,#0x30              ;906
0009d4  4358              MULS     r0,r3,r0              ;906
0009d6  1810              ADDS     r0,r2,r0              ;906
0009d8  78c0              LDRB     r0,[r0,#3]            ;906
0009da  0842              LSRS     r2,r0,#1              ;906
0009dc  0052              LSLS     r2,r2,#1              ;906
0009de  4804              LDR      r0,|L1.2544|
0009e0  6843              LDR      r3,[r0,#4]            ;906  ; g_mesh_service
0009e2  1e48              SUBS     r0,r1,#1              ;906
0009e4  2430              MOVS     r4,#0x30              ;906
0009e6  4360              MULS     r0,r4,r0              ;906
0009e8  1818              ADDS     r0,r3,r0              ;906
0009ea  70c2              STRB     r2,[r0,#3]            ;906
0009ec  2000              MOVS     r0,#0                 ;909
0009ee  e7e4              B        |L1.2490|
                          ENDP

                  |L1.2544|
                          DCD      g_mesh_service
                  |L1.2548|
                          DCD      is_initialized

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  g_mesh_service
                          %        20

                          AREA ||.constdata||, DATA, READONLY, ALIGN=0

                  mesh_base_uuid
000000  1ecd0000          DCB      0x1e,0xcd,0x00,0x00
000004  8cb9a88b          DCB      0x8c,0xb9,0xa8,0x8b
000008  82d851fd          DCB      0x82,0xd8,0x51,0xfd
00000c  a1771e2a          DCB      0xa1,0x77,0x1e,0x2a

                          AREA ||.data||, DATA, ALIGN=1

                  mesh_base_uuid_type
000000  00                DCB      0x00
                  is_initialized
000001  00                DCB      0x00
                  g_active_conn_handle
000002  ffff              DCW      0xffff

;*** Start embedded assembler ***

#line 1 "..\\..\\..\\rbc_mesh\\src\\mesh_srv.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___10_mesh_srv_c_2761c3b4____REV16|
#line 129 "..\\..\\..\\..\\..\\..\\components\\toolchain\\gcc\\core_cmInstr.h"
|__asm___10_mesh_srv_c_2761c3b4____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___10_mesh_srv_c_2761c3b4____REVSH|
#line 144
|__asm___10_mesh_srv_c_2761c3b4____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
