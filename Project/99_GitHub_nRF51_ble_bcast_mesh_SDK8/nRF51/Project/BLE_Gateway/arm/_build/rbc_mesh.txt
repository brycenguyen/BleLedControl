; generated by Component: ARM Compiler 5.04 update 1 (build 49) Tool: ArmCC [5040049]
; commandline ArmCC [--c99 --list --debug -c --asm --interleave -o.\_build\rbc_mesh.o --asm_dir=.\_build\ --list_dir=.\_build\ --depend=.\_build\rbc_mesh.d --cpu=Cortex-M0 --apcs=interwork -O0 -I..\include -I..\..\..\rbc_mesh -I..\..\..\rbc_mesh\include -I..\..\..\SDK\bsp -I..\..\..\..\..\..\components\softdevice\s110\headers -I..\..\..\..\..\..\components\toolchain\gcc -I..\..\..\..\..\..\components\libraries\util -I..\..\..\..\..\..\components\ble\common -I..\..\..\..\..\..\components\drivers_nrf\hal -I..\..\..\..\..\..\components\drivers_nrf\spi_slave -I..\..\..\..\..\..\components\softdevice\common\softdevice_handler -I..\..\..\..\..\..\components\libraries\fifo -I..\..\..\..\..\..\components\drivers_nrf\uart -I..\..\..\..\..\..\components\drivers_nrf\gpiote -I..\..\..\..\..\..\components\drivers_nrf\config -I..\..\..\..\..\..\components\drivers_nrf\common -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\4.1.0\CMSIS\Include -IC:\Keil_v5\ARM\PACK\NordicSemiconductor\nRF_DeviceFamilyPack\7.2.1\Device\Include -D__MICROLIB -DNRF51 -DBOARD_RHC -DNRF51 -DBLE_STACK_SUPPORT_REQD -DS110 -DSOFTDEVICE_PRESENT --omf_browse=.\_build\rbc_mesh.crf ..\..\..\rbc_mesh\src\rbc_mesh.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  rbc_mesh_init PROC
;;;67     
;;;68     uint32_t rbc_mesh_init(rbc_mesh_init_params_t init_params)
000000  b53f              PUSH     {r0-r5,lr}
;;;69     {
000002  b081              SUB      sp,sp,#4
;;;70         uint8_t sd_is_enabled = 0;
000004  2100              MOVS     r1,#0
000006  9100              STR      r1,[sp,#0]
;;;71         sd_softdevice_is_enabled(&sd_is_enabled);
000008  4668              MOV      r0,sp
00000a  df12              SVC      #0x12
;;;72     
;;;73         if (!sd_is_enabled)
00000c  4668              MOV      r0,sp
00000e  7800              LDRB     r0,[r0,#0]
000010  2800              CMP      r0,#0
000012  d102              BNE      |L1.26|
;;;74         {
;;;75             return NRF_ERROR_SOFTDEVICE_NOT_ENABLED;
000014  2002              MOVS     r0,#2
                  |L1.22|
;;;76         }
;;;77     
;;;78     
;;;79         if (g_is_initialized)
;;;80         {
;;;81             return NRF_ERROR_INVALID_STATE;
;;;82         }
;;;83     
;;;84         uint32_t error_code;
;;;85     
;;;86         error_code = mesh_srv_init(init_params.handle_count,
;;;87                                     init_params.access_addr,
;;;88                                     init_params.channel,
;;;89                                     init_params.adv_int_ms);
;;;90     
;;;91         if (error_code != NRF_SUCCESS)
;;;92         {
;;;93             return error_code;
;;;94         }
;;;95     
;;;96         event_handler_init();
;;;97         timeslot_handler_init();
;;;98     
;;;99         g_access_addr = init_params.access_addr;
;;;100        g_channel = init_params.channel;
;;;101        g_handle_count = init_params.handle_count;
;;;102        g_adv_int_ms = init_params.adv_int_ms;
;;;103    
;;;104        g_is_initialized = true;
;;;105    
;;;106        return NRF_SUCCESS;
;;;107    }
000016  b005              ADD      sp,sp,#0x14
000018  bd30              POP      {r4,r5,pc}
                  |L1.26|
00001a  4852              LDR      r0,|L1.356|
00001c  7800              LDRB     r0,[r0,#0]            ;79  ; g_is_initialized
00001e  2800              CMP      r0,#0                 ;79
000020  d001              BEQ      |L1.38|
000022  2008              MOVS     r0,#8                 ;81
000024  e7f7              B        |L1.22|
                  |L1.38|
000026  466d              MOV      r5,sp                 ;86
000028  7a2a              LDRB     r2,[r5,#8]            ;86
00002a  7a68              LDRB     r0,[r5,#9]            ;86
00002c  9b03              LDR      r3,[sp,#0xc]          ;86
00002e  9901              LDR      r1,[sp,#4]            ;86
000030  f7fffffe          BL       mesh_srv_init
000034  4604              MOV      r4,r0                 ;86
000036  2c00              CMP      r4,#0                 ;91
000038  d001              BEQ      |L1.62|
00003a  4620              MOV      r0,r4                 ;93
00003c  e7eb              B        |L1.22|
                  |L1.62|
00003e  f7fffffe          BL       event_handler_init
000042  f7fffffe          BL       timeslot_handler_init
000046  4948              LDR      r1,|L1.360|
000048  9801              LDR      r0,[sp,#4]            ;99
00004a  6008              STR      r0,[r1,#0]            ;99  ; g_access_addr
00004c  4668              MOV      r0,sp                 ;100
00004e  7a00              LDRB     r0,[r0,#8]            ;100
000050  4946              LDR      r1,|L1.364|
000052  7008              STRB     r0,[r1,#0]            ;100
000054  4668              MOV      r0,sp                 ;101
000056  7a40              LDRB     r0,[r0,#9]            ;101
000058  4945              LDR      r1,|L1.368|
00005a  7008              STRB     r0,[r1,#0]            ;101
00005c  4945              LDR      r1,|L1.372|
00005e  9803              LDR      r0,[sp,#0xc]          ;102
000060  6008              STR      r0,[r1,#0]            ;102  ; g_adv_int_ms
000062  2001              MOVS     r0,#1                 ;104
000064  493f              LDR      r1,|L1.356|
000066  7008              STRB     r0,[r1,#0]            ;104
000068  2000              MOVS     r0,#0                 ;106
00006a  e7d4              B        |L1.22|
;;;108    
                          ENDP

                  rbc_mesh_value_enable PROC
;;;109    uint32_t rbc_mesh_value_enable(uint8_t handle)
00006c  b510              PUSH     {r4,lr}
;;;110    {
00006e  4604              MOV      r4,r0
;;;111        return mesh_srv_char_val_enable(handle);
000070  4620              MOV      r0,r4
000072  f7fffffe          BL       mesh_srv_char_val_enable
;;;112    }
000076  bd10              POP      {r4,pc}
;;;113    
                          ENDP

                  rbc_mesh_value_disable PROC
;;;114    uint32_t rbc_mesh_value_disable(uint8_t handle)
000078  b510              PUSH     {r4,lr}
;;;115    {
00007a  4604              MOV      r4,r0
;;;116        return mesh_srv_char_val_disable(handle);
00007c  4620              MOV      r0,r4
00007e  f7fffffe          BL       mesh_srv_char_val_disable
;;;117    }
000082  bd10              POP      {r4,pc}
;;;118    
                          ENDP

                  rbc_mesh_value_set PROC
;;;121    
;;;122    uint32_t rbc_mesh_value_set(uint8_t handle, uint8_t* data, uint16_t len)
000084  b570              PUSH     {r4-r6,lr}
;;;123    {
000086  4604              MOV      r4,r0
000088  460d              MOV      r5,r1
00008a  4616              MOV      r6,r2
;;;124        return mesh_srv_char_val_set(handle, data, len, true);
00008c  2301              MOVS     r3,#1
00008e  4632              MOV      r2,r6
000090  4629              MOV      r1,r5
000092  4620              MOV      r0,r4
000094  f7fffffe          BL       mesh_srv_char_val_set
;;;125    }
000098  bd70              POP      {r4-r6,pc}
;;;126    
                          ENDP

                  rbc_mesh_value_get PROC
;;;127    uint32_t rbc_mesh_value_get(uint8_t handle, uint8_t* data, uint16_t* len, ble_gap_addr_t* origin_addr)
00009a  b5f8              PUSH     {r3-r7,lr}
;;;128    {
00009c  4604              MOV      r4,r0
00009e  460d              MOV      r5,r1
0000a0  4616              MOV      r6,r2
0000a2  461f              MOV      r7,r3
;;;129        return mesh_srv_char_val_get(handle, data, len, origin_addr);
0000a4  463b              MOV      r3,r7
0000a6  4632              MOV      r2,r6
0000a8  4629              MOV      r1,r5
0000aa  4620              MOV      r0,r4
0000ac  f7fffffe          BL       mesh_srv_char_val_get
;;;130    }
0000b0  bdf8              POP      {r3-r7,pc}
;;;131    
                          ENDP

                  rbc_mesh_access_address_get PROC
;;;132    uint32_t rbc_mesh_access_address_get(uint32_t* access_address)
0000b2  4601              MOV      r1,r0
;;;133    {
;;;134        if (!g_is_initialized)
0000b4  482b              LDR      r0,|L1.356|
0000b6  7800              LDRB     r0,[r0,#0]  ; g_is_initialized
0000b8  2800              CMP      r0,#0
0000ba  d101              BNE      |L1.192|
;;;135        {
;;;136            return NRF_ERROR_INVALID_STATE;
0000bc  2008              MOVS     r0,#8
                  |L1.190|
;;;137        }
;;;138    
;;;139        *access_address = g_access_addr;
;;;140    
;;;141        return NRF_SUCCESS;
;;;142    }
0000be  4770              BX       lr
                  |L1.192|
0000c0  4829              LDR      r0,|L1.360|
0000c2  6800              LDR      r0,[r0,#0]            ;139  ; g_access_addr
0000c4  6008              STR      r0,[r1,#0]            ;139
0000c6  2000              MOVS     r0,#0                 ;141
0000c8  e7f9              B        |L1.190|
;;;143    
                          ENDP

                  rbc_mesh_channel_get PROC
;;;144    uint32_t rbc_mesh_channel_get(uint8_t* ch)
0000ca  4601              MOV      r1,r0
;;;145    {
;;;146        if (!g_is_initialized)
0000cc  4825              LDR      r0,|L1.356|
0000ce  7800              LDRB     r0,[r0,#0]  ; g_is_initialized
0000d0  2800              CMP      r0,#0
0000d2  d101              BNE      |L1.216|
;;;147        {
;;;148            return NRF_ERROR_INVALID_STATE;
0000d4  2008              MOVS     r0,#8
                  |L1.214|
;;;149        }
;;;150    
;;;151        *ch = g_channel;
;;;152    
;;;153        return NRF_SUCCESS;
;;;154    }
0000d6  4770              BX       lr
                  |L1.216|
0000d8  4824              LDR      r0,|L1.364|
0000da  7800              LDRB     r0,[r0,#0]            ;151  ; g_channel
0000dc  7008              STRB     r0,[r1,#0]            ;151
0000de  2000              MOVS     r0,#0                 ;153
0000e0  e7f9              B        |L1.214|
;;;155    
                          ENDP

                  rbc_mesh_handle_count_get PROC
;;;156    uint32_t rbc_mesh_handle_count_get(uint8_t* handle_count)
0000e2  4601              MOV      r1,r0
;;;157    {
;;;158        if (!g_is_initialized)
0000e4  481f              LDR      r0,|L1.356|
0000e6  7800              LDRB     r0,[r0,#0]  ; g_is_initialized
0000e8  2800              CMP      r0,#0
0000ea  d101              BNE      |L1.240|
;;;159        {
;;;160            return NRF_ERROR_INVALID_STATE;
0000ec  2008              MOVS     r0,#8
                  |L1.238|
;;;161        }
;;;162    
;;;163        *handle_count = g_handle_count;
;;;164    
;;;165        return NRF_SUCCESS;
;;;166    }
0000ee  4770              BX       lr
                  |L1.240|
0000f0  481f              LDR      r0,|L1.368|
0000f2  7800              LDRB     r0,[r0,#0]            ;163  ; g_handle_count
0000f4  7008              STRB     r0,[r1,#0]            ;163
0000f6  2000              MOVS     r0,#0                 ;165
0000f8  e7f9              B        |L1.238|
;;;167    
                          ENDP

                  rbc_mesh_adv_int_get PROC
;;;168    uint32_t rbc_mesh_adv_int_get(uint32_t* adv_int_ms)
0000fa  4601              MOV      r1,r0
;;;169    {
;;;170        if (!g_is_initialized)
0000fc  4819              LDR      r0,|L1.356|
0000fe  7800              LDRB     r0,[r0,#0]  ; g_is_initialized
000100  2800              CMP      r0,#0
000102  d101              BNE      |L1.264|
;;;171        {
;;;172            return NRF_ERROR_INVALID_STATE;
000104  2008              MOVS     r0,#8
                  |L1.262|
;;;173        }
;;;174    
;;;175        *adv_int_ms = g_adv_int_ms;
;;;176    
;;;177        return NRF_SUCCESS;
;;;178    }
000106  4770              BX       lr
                  |L1.264|
000108  481a              LDR      r0,|L1.372|
00010a  6800              LDR      r0,[r0,#0]            ;175  ; g_adv_int_ms
00010c  6008              STR      r0,[r1,#0]            ;175
00010e  2000              MOVS     r0,#0                 ;177
000110  e7f9              B        |L1.262|
;;;179    
                          ENDP

                  rbc_mesh_ble_evt_handler PROC
;;;180    uint32_t rbc_mesh_ble_evt_handler(ble_evt_t* evt)
000112  b570              PUSH     {r4-r6,lr}
;;;181    {
000114  4604              MOV      r4,r0
;;;182        if (evt->header.evt_id == BLE_GAP_EVT_CONNECTED)
000116  8820              LDRH     r0,[r4,#0]
000118  2810              CMP      r0,#0x10
00011a  d102              BNE      |L1.290|
;;;183        {
;;;184            mesh_srv_conn_handle_update(evt->evt.gap_evt.conn_handle);
00011c  88a0              LDRH     r0,[r4,#4]
00011e  f7fffffe          BL       mesh_srv_conn_handle_update
                  |L1.290|
;;;185        }
;;;186    
;;;187        if (!g_is_initialized)
000122  4810              LDR      r0,|L1.356|
000124  7800              LDRB     r0,[r0,#0]  ; g_is_initialized
000126  2800              CMP      r0,#0
000128  d101              BNE      |L1.302|
;;;188        {
;;;189            return NRF_ERROR_INVALID_STATE;
00012a  2008              MOVS     r0,#8
                  |L1.300|
;;;190        }
;;;191    
;;;192        /* may safely ignore all events that don't write to a value */
;;;193        if (evt->header.evt_id != BLE_GATTS_EVT_WRITE)
;;;194        {
;;;195            return NRF_SUCCESS;
;;;196        }
;;;197        ble_gatts_evt_write_t* write_evt = &evt->evt.gatts_evt.params.write;
;;;198    
;;;199        uint32_t error_code = mesh_srv_gatts_evt_write_handle(write_evt);
;;;200    
;;;201        if (error_code != NRF_SUCCESS &&
;;;202            error_code != NRF_ERROR_INVALID_ADDR)
;;;203        {
;;;204            if (error_code == NRF_ERROR_FORBIDDEN)
;;;205            {
;;;206                return NRF_SUCCESS; /* wrong service, just ignore */
;;;207            }
;;;208            else
;;;209            {
;;;210                return error_code;
;;;211            }
;;;212        }
;;;213    
;;;214        return NRF_SUCCESS;
;;;215    }
00012c  bd70              POP      {r4-r6,pc}
                  |L1.302|
00012e  8820              LDRH     r0,[r4,#0]            ;193
000130  2850              CMP      r0,#0x50              ;193
000132  d001              BEQ      |L1.312|
000134  2000              MOVS     r0,#0                 ;195
000136  e7f9              B        |L1.300|
                  |L1.312|
000138  1da6              ADDS     r6,r4,#6              ;197
00013a  4630              MOV      r0,r6                 ;199
00013c  f7fffffe          BL       mesh_srv_gatts_evt_write_handle
000140  4605              MOV      r5,r0                 ;199
000142  2d00              CMP      r5,#0                 ;201
000144  d007              BEQ      |L1.342|
000146  2d10              CMP      r5,#0x10              ;202
000148  d005              BEQ      |L1.342|
00014a  2d0f              CMP      r5,#0xf               ;204
00014c  d101              BNE      |L1.338|
00014e  2000              MOVS     r0,#0                 ;206
000150  e7ec              B        |L1.300|
                  |L1.338|
000152  4628              MOV      r0,r5                 ;210
000154  e7ea              B        |L1.300|
                  |L1.342|
000156  2000              MOVS     r0,#0                 ;214
000158  e7e8              B        |L1.300|
;;;216    
                          ENDP

                  rbc_mesh_sd_irq_handler PROC
;;;219    
;;;220    uint32_t rbc_mesh_sd_irq_handler(void)
00015a  b510              PUSH     {r4,lr}
;;;221    {
;;;222        /* call lower layer event handler */
;;;223        ts_sd_event_handler();
00015c  f7fffffe          BL       ts_sd_event_handler
;;;224    
;;;225        return NRF_SUCCESS;
000160  2000              MOVS     r0,#0
;;;226    }
000162  bd10              POP      {r4,pc}
                          ENDP

                  |L1.356|
                          DCD      g_is_initialized
                  |L1.360|
                          DCD      g_access_addr
                  |L1.364|
                          DCD      g_channel
                  |L1.368|
                          DCD      g_handle_count
                  |L1.372|
                          DCD      g_adv_int_ms

                          AREA ||.data||, DATA, ALIGN=2

                  g_is_initialized
000000  00000000          DCB      0x00,0x00,0x00,0x00
                  g_access_addr
                          DCD      0x00000000
                  g_channel
000008  00                DCB      0x00
                  g_handle_count
000009  000000            DCB      0x00,0x00,0x00
                  g_adv_int_ms
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "..\\..\\..\\rbc_mesh\\src\\rbc_mesh.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___10_rbc_mesh_c_c1efbcf9____REV16|
#line 129 "..\\..\\..\\..\\..\\..\\components\\toolchain\\gcc\\core_cmInstr.h"
|__asm___10_rbc_mesh_c_c1efbcf9____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___10_rbc_mesh_c_c1efbcf9____REVSH|
#line 144
|__asm___10_rbc_mesh_c_c1efbcf9____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
