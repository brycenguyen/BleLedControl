; generated by Component: ARM Compiler 5.04 update 1 (build 49) Tool: ArmCC [5040049]
; commandline ArmCC [--c99 --list --debug -c --asm --interleave -o.\_build\timeslot_handler.o --asm_dir=.\_build\ --list_dir=.\_build\ --depend=.\_build\timeslot_handler.d --cpu=Cortex-M0 --apcs=interwork -O0 -I..\include -I..\..\..\rbc_mesh -I..\..\..\rbc_mesh\include -I..\..\..\SDK\bsp -I..\..\..\..\..\..\components\softdevice\s110\headers -I..\..\..\..\..\..\components\toolchain\gcc -I..\..\..\..\..\..\components\libraries\util -I..\..\..\..\..\..\components\ble\common -I..\..\..\..\..\..\components\drivers_nrf\hal -I..\..\..\..\..\..\components\drivers_nrf\spi_slave -I..\..\..\..\..\..\components\softdevice\common\softdevice_handler -I..\..\..\..\..\..\components\libraries\fifo -I..\..\..\..\..\..\components\drivers_nrf\uart -I..\..\..\..\..\..\components\drivers_nrf\gpiote -I..\..\..\..\..\..\components\drivers_nrf\config -I..\..\..\..\..\..\components\drivers_nrf\common -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\4.1.0\CMSIS\Include -IC:\Keil_v5\ARM\PACK\NordicSemiconductor\nRF_DeviceFamilyPack\7.2.1\Device\Include -D__MICROLIB -DNRF51 -DBOARD_RHC -DNRF51 -DBLE_STACK_SUPPORT_REQD -DS110 -DSOFTDEVICE_PRESENT --omf_browse=.\_build\timeslot_handler.crf ..\..\..\rbc_mesh\src\timeslot_handler.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  timeslot_order_earliest PROC
;;;360    
;;;361    void timeslot_order_earliest(uint32_t length_us, bool immediately)
000000  b5f8              PUSH     {r3-r7,lr}
;;;362    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;363        if (immediately)
000006  2d00              CMP      r5,#0
000008  d01e              BEQ      |L1.72|
;;;364        {
;;;365            radio_request_earliest.params.earliest.length_us = length_us;
00000a  48f7              LDR      r0,|L1.1000|
00000c  6084              STR      r4,[r0,#8]
;;;366            g_ret_param.callback_action = NRF_RADIO_SIGNAL_CALLBACK_ACTION_REQUEST_AND_END;
00000e  2003              MOVS     r0,#3
000010  49f6              LDR      r1,|L1.1004|
000012  7008              STRB     r0,[r1,#0]
;;;367            g_ret_param.params.request.p_next = &radio_request_earliest;
000014  48f4              LDR      r0,|L1.1000|
000016  6048              STR      r0,[r1,#4]  ; g_ret_param
;;;368    
;;;369            g_next_timeslot_length = length_us;
000018  2000              MOVS     r0,#0
00001a  49f5              LDR      r1,|L1.1008|
00001c  600c              STR      r4,[r1,#0]  ; g_next_timeslot_length
00001e  6048              STR      r0,[r1,#4]  ; g_next_timeslot_length
;;;370    
;;;371            if (!g_is_in_callback)
000020  48f4              LDR      r0,|L1.1012|
000022  7800              LDRB     r0,[r0,#0]  ; g_is_in_callback
000024  2800              CMP      r0,#0
000026  d115              BNE      |L1.84|
;;;372            {
;;;373                uint32_t error_code = sd_radio_request(&radio_request_earliest);
000028  48ef              LDR      r0,|L1.1000|
00002a  df50              SVC      #0x50
00002c  4606              MOV      r6,r0
;;;374                APP_ERROR_CHECK(error_code);
00002e  bf00              NOP      
000030  4637              MOV      r7,r6
000032  2f00              CMP      r7,#0
000034  d006              BEQ      |L1.68|
000036  bf00              NOP      
000038  2200              MOVS     r2,#0
00003a  4611              MOV      r1,r2
00003c  4638              MOV      r0,r7
00003e  f7fffffe          BL       app_error_handler
000042  bf00              NOP      
                  |L1.68|
000044  bf00              NOP      
;;;375            }
000046  e005              B        |L1.84|
                  |L1.72|
;;;376        }
;;;377        else
;;;378        {
;;;379            radio_request_earliest.params.earliest.length_us = length_us;
000048  48e7              LDR      r0,|L1.1000|
00004a  6084              STR      r4,[r0,#8]
;;;380    
;;;381            g_next_timeslot_length = length_us;
00004c  2000              MOVS     r0,#0
00004e  49e8              LDR      r1,|L1.1008|
000050  600c              STR      r4,[r1,#0]  ; g_next_timeslot_length
000052  6048              STR      r0,[r1,#4]  ; g_next_timeslot_length
                  |L1.84|
;;;382        }
;;;383    }
000054  bdf8              POP      {r3-r7,pc}
;;;384    
                          ENDP

                  ts_sd_event_handler PROC
;;;135    */
;;;136    void ts_sd_event_handler(void)
000056  b538              PUSH     {r3-r5,lr}
;;;137    {
;;;138        uint32_t evt;
;;;139        SET_PIN(4);
;;;140        while (sd_evt_get(&evt) == NRF_SUCCESS)
000058  e039              B        |L1.206|
                  |L1.90|
;;;141        {
;;;142            PIN_OUT(evt, 32);
;;;143            switch (evt)
00005a  9800              LDR      r0,[sp,#0]
00005c  1f00              SUBS     r0,r0,#4
00005e  0003              MOVS     r3,r0
000060  f7fffffe          BL       __ARM_common_switch8
000064  05142419          DCB      0x05,0x14,0x24,0x19
000068  04092900          DCB      0x04,0x09,0x29,0x00
;;;144            {
;;;145                case NRF_EVT_RADIO_SESSION_IDLE:
;;;146                    timeslot_order_earliest(TIMESLOT_SLOT_LENGTH, true);
00006c  2101              MOVS     r1,#1
00006e  48e2              LDR      r0,|L1.1016|
000070  f7fffffe          BL       timeslot_order_earliest
;;;147                    break;
000074  e02a              B        |L1.204|
;;;148    
;;;149                case NRF_EVT_RADIO_SESSION_CLOSED:
;;;150                    APP_ERROR_CHECK(NRF_ERROR_INVALID_DATA);
000076  bf00              NOP      
000078  240b              MOVS     r4,#0xb
00007a  bf00              NOP      
00007c  2200              MOVS     r2,#0
00007e  4611              MOV      r1,r2
000080  200b              MOVS     r0,#0xb
000082  f7fffffe          BL       app_error_handler
000086  bf00              NOP      
000088  bf00              NOP      
;;;151    
;;;152                    break;
00008a  e01f              B        |L1.204|
;;;153    
;;;154                case NRF_EVT_RADIO_BLOCKED:
;;;155                    /* something in the softdevice is blocking our requests,
;;;156                    go into emergency mode, where slots are short, in order to
;;;157                    avoid complete lockout */
;;;158                    timeslot_order_earliest(TIMESLOT_SLOT_EMERGENCY_LENGTH, true);
00008c  2101              MOVS     r1,#1
00008e  48db              LDR      r0,|L1.1020|
000090  f7fffffe          BL       timeslot_order_earliest
;;;159                    break;
000094  e01a              B        |L1.204|
;;;160    
;;;161                case NRF_EVT_RADIO_SIGNAL_CALLBACK_INVALID_RETURN:
;;;162                    APP_ERROR_CHECK(NRF_ERROR_INVALID_DATA);
000096  bf00              NOP      
000098  240b              MOVS     r4,#0xb
00009a  bf00              NOP      
00009c  2200              MOVS     r2,#0
00009e  4611              MOV      r1,r2
0000a0  200b              MOVS     r0,#0xb
0000a2  f7fffffe          BL       app_error_handler
0000a6  bf00              NOP      
0000a8  bf00              NOP      
;;;163                    break;
0000aa  e00f              B        |L1.204|
;;;164    
;;;165                case NRF_EVT_RADIO_CANCELED:
;;;166                    timeslot_order_earliest(TIMESLOT_SLOT_LENGTH, true);
0000ac  2101              MOVS     r1,#1
0000ae  48d2              LDR      r0,|L1.1016|
0000b0  f7fffffe          BL       timeslot_order_earliest
;;;167                    break;
0000b4  e00a              B        |L1.204|
;;;168                default:
;;;169                    APP_ERROR_CHECK(NRF_ERROR_INVALID_STATE);
0000b6  bf00              NOP      
0000b8  2408              MOVS     r4,#8
0000ba  bf00              NOP      
0000bc  2200              MOVS     r2,#0
0000be  4611              MOV      r1,r2
0000c0  2008              MOVS     r0,#8
0000c2  f7fffffe          BL       app_error_handler
0000c6  bf00              NOP      
0000c8  bf00              NOP      
0000ca  bf00              NOP                            ;143
                  |L1.204|
0000cc  bf00              NOP                            ;147
                  |L1.206|
0000ce  4668              MOV      r0,sp                 ;140
0000d0  df51              SVC      #0x51                 ;140
0000d2  2800              CMP      r0,#0                 ;140
0000d4  d0c1              BEQ      |L1.90|
;;;170            }
;;;171        }
;;;172        CLEAR_PIN(4);
;;;173    }
0000d6  bd38              POP      {r3-r5,pc}
;;;174    
                          ENDP

                  end_timer_handler PROC
;;;177    */
;;;178    static void end_timer_handler(void)
0000d8  2001              MOVS     r0,#1
;;;179    {
;;;180        g_end_timer_triggered = true;
0000da  49c9              LDR      r1,|L1.1024|
0000dc  7008              STRB     r0,[r1,#0]
;;;181    }
0000de  4770              BX       lr
;;;182    
                          ENDP

                  timeslot_extend PROC
;;;410    
;;;411    void timeslot_extend(uint32_t extra_time_us)
0000e0  b510              PUSH     {r4,lr}
;;;412    {
;;;413        if (g_is_in_callback)
0000e2  49c4              LDR      r1,|L1.1012|
0000e4  7809              LDRB     r1,[r1,#0]  ; g_is_in_callback
0000e6  2900              CMP      r1,#0
0000e8  d013              BEQ      |L1.274|
;;;414        {
;;;415            if (g_timeslot_length + extra_time_us > TIMESLOT_MAX_LENGTH)
0000ea  49c6              LDR      r1,|L1.1028|
0000ec  680b              LDR      r3,[r1,#0]  ; g_timeslot_length
0000ee  6849              LDR      r1,[r1,#4]  ; g_timeslot_length
0000f0  2200              MOVS     r2,#0
0000f2  181b              ADDS     r3,r3,r0
0000f4  4151              ADCS     r1,r1,r2
0000f6  4ac4              LDR      r2,|L1.1032|
0000f8  2400              MOVS     r4,#0
0000fa  1ad2              SUBS     r2,r2,r3
0000fc  418c              SBCS     r4,r4,r1
0000fe  d203              BCS      |L1.264|
;;;416            {
;;;417                extra_time_us = TIMESLOT_MAX_LENGTH - g_timeslot_length;
000100  49c0              LDR      r1,|L1.1028|
000102  6809              LDR      r1,[r1,#0]  ; g_timeslot_length
000104  4ac0              LDR      r2,|L1.1032|
000106  1a50              SUBS     r0,r2,r1
                  |L1.264|
;;;418            }
;;;419            g_ret_param.callback_action = NRF_RADIO_SIGNAL_CALLBACK_ACTION_EXTEND;
000108  2101              MOVS     r1,#1
00010a  4ab8              LDR      r2,|L1.1004|
00010c  7011              STRB     r1,[r2,#0]
;;;420            g_ret_param.params.extend.length_us = extra_time_us;
00010e  4611              MOV      r1,r2
000110  6048              STR      r0,[r1,#4]  ; g_ret_param
                  |L1.274|
;;;421        }
;;;422    }
000112  bd10              POP      {r4,pc}
;;;423    
                          ENDP

                  radio_signal_callback PROC
;;;187    */
;;;188    static nrf_radio_signal_callback_return_param_t* radio_signal_callback(uint8_t sig)
000114  b5fe              PUSH     {r1-r7,lr}
;;;189    {
000116  4606              MOV      r6,r0
;;;190        static uint32_t requested_extend_time = 0;
;;;191        static uint32_t successful_extensions = 0;
;;;192        static uint64_t last_rtc_value = 0;
;;;193        static uint64_t time_now = 0;
;;;194        g_ret_param.callback_action = NRF_RADIO_SIGNAL_CALLBACK_ACTION_NONE;
000118  2000              MOVS     r0,#0
00011a  49b4              LDR      r1,|L1.1004|
00011c  7008              STRB     r0,[r1,#0]
;;;195        g_is_in_callback = true;
00011e  2001              MOVS     r0,#1
000120  49b4              LDR      r1,|L1.1012|
000122  7008              STRB     r0,[r1,#0]
;;;196        
;;;197        SET_PIN(3);
;;;198    
;;;199        switch (sig)
000124  0033              MOVS     r3,r6
000126  f7fffffe          BL       __ARM_common_switch8
00012a  0504              DCB      0x05,0x04
00012c  6a67a76d          DCB      0x6a,0x67,0xa7,0x6d
000130  ba00              DCB      0xba,0x00
;;;200        {
;;;201            case NRF_RADIO_CALLBACK_SIGNAL_TYPE_START:
;;;202            {
;;;203                SET_PIN(2);
;;;204    
;;;205                g_is_in_timeslot = true;
000132  2001              MOVS     r0,#1
000134  49b5              LDR      r1,|L1.1036|
000136  7008              STRB     r0,[r1,#0]
;;;206                g_end_timer_triggered = false;
000138  2000              MOVS     r0,#0
00013a  49b1              LDR      r1,|L1.1024|
00013c  7008              STRB     r0,[r1,#0]
;;;207                successful_extensions = 0;
00013e  49b4              LDR      r1,|L1.1040|
000140  6008              STR      r0,[r1,#0]  ; successful_extensions
;;;208    
;;;209                timer_init();
000142  f7fffffe          BL       timer_init
;;;210    
;;;211                g_negotiate_timeslot_length = TIMESLOT_SLOT_EXTEND_LENGTH;//g_timeslot_length;
000146  48b3              LDR      r0,|L1.1044|
000148  49b3              LDR      r1,|L1.1048|
00014a  6008              STR      r0,[r1,#0]  ; g_negotiate_timeslot_length
;;;212                g_timeslot_length = g_next_timeslot_length;
00014c  49a8              LDR      r1,|L1.1008|
00014e  c903              LDM      r1,{r0,r1}
000150  4aac              LDR      r2,|L1.1028|
000152  c203              STM      r2!,{r0,r1}
;;;213    
;;;214                g_timeslot_end_timer =
000154  49ab              LDR      r1,|L1.1028|
000156  680a              LDR      r2,[r1,#0]  ; g_timeslot_length
000158  217d              MOVS     r1,#0x7d
00015a  0109              LSLS     r1,r1,#4
00015c  1a50              SUBS     r0,r2,r1
00015e  49af              LDR      r1,|L1.1052|
000160  f7fffffe          BL       timer_order_cb_sync_exec
000164  49ae              LDR      r1,|L1.1056|
000166  6008              STR      r0,[r1,#0]  ; g_timeslot_end_timer
;;;215                    timer_order_cb_sync_exec(g_timeslot_length - TIMESLOT_END_SAFETY_MARGIN_US,
;;;216                        end_timer_handler);
;;;217    
;;;218                /* attempt to extend our time right away */
;;;219                timeslot_extend(g_negotiate_timeslot_length);
000168  48ab              LDR      r0,|L1.1048|
00016a  6800              LDR      r0,[r0,#0]  ; g_negotiate_timeslot_length
00016c  f7fffffe          BL       timeslot_extend
;;;220    
;;;221                /* sample RTC timer for trickle timing */
;;;222                uint32_t rtc_time = NRF_RTC0->COUNTER;
000170  48ac              LDR      r0,|L1.1060|
000172  6847              LDR      r7,[r0,#4]
;;;223    
;;;224                /*First time the offset should be added*/
;;;225                if(last_rtc_value == 0)
000174  48ac              LDR      r0,|L1.1064|
000176  6801              LDR      r1,[r0,#0]  ; last_rtc_value
000178  6840              LDR      r0,[r0,#4]  ; last_rtc_value
00017a  2300              MOVS     r3,#0
00017c  4059              EORS     r1,r1,r3
00017e  4058              EORS     r0,r0,r3
000180  4301              ORRS     r1,r1,r0
000182  d105              BNE      |L1.400|
;;;226                {
;;;227                    last_rtc_value = g_start_time_ref;
000184  48a9              LDR      r0,|L1.1068|
000186  6801              LDR      r1,[r0,#0]  ; g_start_time_ref
000188  6840              LDR      r0,[r0,#4]  ; g_start_time_ref
00018a  4aa7              LDR      r2,|L1.1064|
00018c  6011              STR      r1,[r2,#0]  ; last_rtc_value
00018e  6050              STR      r0,[r2,#4]  ; last_rtc_value
                  |L1.400|
;;;228                }
;;;229    
;;;230                /* Calculate delta rtc time */
;;;231                uint64_t delta_rtc_time;
;;;232                if(last_rtc_value > rtc_time)
000190  2000              MOVS     r0,#0
000192  4aa5              LDR      r2,|L1.1064|
000194  ca06              LDM      r2,{r1,r2}
000196  1a79              SUBS     r1,r7,r1
000198  4190              SBCS     r0,r0,r2
00019a  d20b              BCS      |L1.436|
;;;233                {
;;;234                    delta_rtc_time = 0xFFFFFF - last_rtc_value + rtc_time;
00019c  48a2              LDR      r0,|L1.1064|
00019e  4aa4              LDR      r2,|L1.1072|
0001a0  6803              LDR      r3,[r0,#0]  ; last_rtc_value
0001a2  6841              LDR      r1,[r0,#4]  ; last_rtc_value
0001a4  2000              MOVS     r0,#0
0001a6  1ad2              SUBS     r2,r2,r3
0001a8  4188              SBCS     r0,r0,r1
0001aa  2100              MOVS     r1,#0
0001ac  19d4              ADDS     r4,r2,r7
0001ae  4148              ADCS     r0,r0,r1
0001b0  4605              MOV      r5,r0
0001b2  e005              B        |L1.448|
                  |L1.436|
;;;235                }
;;;236                else
;;;237                {
;;;238                    delta_rtc_time = rtc_time - last_rtc_value;
0001b4  2000              MOVS     r0,#0
0001b6  4a9c              LDR      r2,|L1.1064|
0001b8  ca06              LDM      r2,{r1,r2}
0001ba  1a7c              SUBS     r4,r7,r1
0001bc  4190              SBCS     r0,r0,r2
0001be  4605              MOV      r5,r0
                  |L1.448|
;;;239                }
;;;240                /* Store last rtc time */
;;;241                last_rtc_value = rtc_time;
0001c0  2000              MOVS     r0,#0
0001c2  4999              LDR      r1,|L1.1064|
0001c4  600f              STR      r7,[r1,#0]  ; last_rtc_value
0001c6  6048              STR      r0,[r1,#4]  ; last_rtc_value
;;;242    
;;;243    
;;;244                /* scale to become us */
;;;245                time_now += ((delta_rtc_time << 15) / 1000);
0001c8  0c61              LSRS     r1,r4,#17
0001ca  03e8              LSLS     r0,r5,#15
0001cc  4308              ORRS     r0,r0,r1
0001ce  03e1              LSLS     r1,r4,#15
0001d0  227d              MOVS     r2,#0x7d
0001d2  00d2              LSLS     r2,r2,#3
0001d4  2300              MOVS     r3,#0
0001d6  9100              STR      r1,[sp,#0]
0001d8  9001              STR      r0,[sp,#4]
0001da  4608              MOV      r0,r1
0001dc  9901              LDR      r1,[sp,#4]
0001de  f7fffffe          BL       __aeabi_uldivmod
0001e2  4b94              LDR      r3,|L1.1076|
0001e4  cb0c              LDM      r3,{r2,r3}
0001e6  1880              ADDS     r0,r0,r2
0001e8  4159              ADCS     r1,r1,r3
0001ea  4a92              LDR      r2,|L1.1076|
0001ec  c203              STM      r2!,{r0,r1}
;;;246    
;;;247                transport_control_timeslot_begin(time_now);
0001ee  4991              LDR      r1,|L1.1076|
0001f0  c903              LDM      r1,{r0,r1}
0001f2  f7fffffe          BL       transport_control_timeslot_begin
;;;248    
;;;249    
;;;250                break;
0001f6  e05d              B        |L1.692|
;;;251            }
;;;252            case NRF_RADIO_CALLBACK_SIGNAL_TYPE_RADIO:
;;;253                /* send to radio control module */
;;;254                TICK_PIN(PIN_RADIO_SIGNAL);
;;;255                radio_event_handler();
0001f8  f7fffffe          BL       radio_event_handler
;;;256                break;
0001fc  e05a              B        |L1.692|
;;;257    
;;;258            case NRF_RADIO_CALLBACK_SIGNAL_TYPE_TIMER0:
;;;259                /* send to timer control module */
;;;260                TICK_PIN(PIN_TIMER_SIGNAL);
;;;261                timer_event_handler();
0001fe  f7fffffe          BL       timer_event_handler
;;;262                break;
000202  e057              B        |L1.692|
;;;263    
;;;264            case NRF_RADIO_CALLBACK_SIGNAL_TYPE_EXTEND_SUCCEEDED:
;;;265                g_timeslot_length += requested_extend_time;
000204  487f              LDR      r0,|L1.1028|
000206  6802              LDR      r2,[r0,#0]  ; g_timeslot_length
000208  6840              LDR      r0,[r0,#4]  ; g_timeslot_length
00020a  498b              LDR      r1,|L1.1080|
00020c  6809              LDR      r1,[r1,#0]  ; requested_extend_time
00020e  2300              MOVS     r3,#0
000210  1851              ADDS     r1,r2,r1
000212  4158              ADCS     r0,r0,r3
000214  4a7b              LDR      r2,|L1.1028|
000216  6011              STR      r1,[r2,#0]  ; g_timeslot_length
000218  6050              STR      r0,[r2,#4]  ; g_timeslot_length
;;;266                requested_extend_time = 0;
00021a  2000              MOVS     r0,#0
00021c  4986              LDR      r1,|L1.1080|
00021e  6008              STR      r0,[r1,#0]  ; requested_extend_time
;;;267                ++successful_extensions;
000220  487b              LDR      r0,|L1.1040|
000222  6800              LDR      r0,[r0,#0]  ; successful_extensions
000224  1c40              ADDS     r0,r0,#1
000226  497a              LDR      r1,|L1.1040|
000228  6008              STR      r0,[r1,#0]  ; successful_extensions
;;;268    
;;;269                timer_abort(g_timeslot_end_timer);
00022a  497d              LDR      r1,|L1.1056|
00022c  7808              LDRB     r0,[r1,#0]  ; g_timeslot_end_timer
00022e  f7fffffe          BL       timer_abort
;;;270    
;;;271                g_timeslot_end_timer =
000232  4974              LDR      r1,|L1.1028|
000234  680a              LDR      r2,[r1,#0]  ; g_timeslot_length
000236  217d              MOVS     r1,#0x7d
000238  0109              LSLS     r1,r1,#4
00023a  1a50              SUBS     r0,r2,r1
00023c  4977              LDR      r1,|L1.1052|
00023e  f7fffffe          BL       timer_order_cb_sync_exec
000242  4977              LDR      r1,|L1.1056|
000244  6008              STR      r0,[r1,#0]  ; g_timeslot_end_timer
;;;272                    timer_order_cb_sync_exec(g_timeslot_length - TIMESLOT_END_SAFETY_MARGIN_US,
;;;273                        end_timer_handler);
;;;274                g_end_timer_triggered = false;
000246  2000              MOVS     r0,#0
000248  496d              LDR      r1,|L1.1024|
00024a  7008              STRB     r0,[r1,#0]
;;;275                g_ret_param.callback_action = NRF_RADIO_SIGNAL_CALLBACK_ACTION_NONE;
00024c  4967              LDR      r1,|L1.1004|
00024e  7008              STRB     r0,[r1,#0]
;;;276    
;;;277                TICK_PIN(1);
;;;278                if (g_timeslot_length + g_negotiate_timeslot_length < TIMESLOT_MAX_LENGTH)
000250  486c              LDR      r0,|L1.1028|
000252  6803              LDR      r3,[r0,#0]  ; g_timeslot_length
000254  6840              LDR      r0,[r0,#4]  ; g_timeslot_length
000256  4970              LDR      r1,|L1.1048|
000258  6809              LDR      r1,[r1,#0]  ; g_negotiate_timeslot_length
00025a  2200              MOVS     r2,#0
00025c  185b              ADDS     r3,r3,r1
00025e  4150              ADCS     r0,r0,r2
000260  4969              LDR      r1,|L1.1032|
000262  1a59              SUBS     r1,r3,r1
000264  4190              SBCS     r0,r0,r2
000266  d204              BCS      |L1.626|
;;;279                {
;;;280                    timeslot_extend(g_negotiate_timeslot_length);
000268  486b              LDR      r0,|L1.1048|
00026a  6800              LDR      r0,[r0,#0]  ; g_negotiate_timeslot_length
00026c  f7fffffe          BL       timeslot_extend
000270  e001              B        |L1.630|
                  |L1.626|
;;;281                }
;;;282                else
;;;283                {
;;;284                    /* done extending, check for new trickle event */
;;;285                    transport_control_step();
000272  f7fffffe          BL       transport_control_step
                  |L1.630|
;;;286                }
;;;287    
;;;288                break;
000276  e01d              B        |L1.692|
;;;289    
;;;290            case NRF_RADIO_CALLBACK_SIGNAL_TYPE_EXTEND_FAILED:
;;;291                g_negotiate_timeslot_length >>= 1;
000278  4867              LDR      r0,|L1.1048|
00027a  6800              LDR      r0,[r0,#0]  ; g_negotiate_timeslot_length
00027c  0840              LSRS     r0,r0,#1
00027e  4966              LDR      r1,|L1.1048|
000280  6008              STR      r0,[r1,#0]  ; g_negotiate_timeslot_length
;;;292                TICK_PIN(1);
;;;293                if (g_negotiate_timeslot_length > 1000)
000282  4608              MOV      r0,r1
000284  6800              LDR      r0,[r0,#0]  ; g_negotiate_timeslot_length
000286  217d              MOVS     r1,#0x7d
000288  00c9              LSLS     r1,r1,#3
00028a  4288              CMP      r0,r1
00028c  d904              BLS      |L1.664|
;;;294                {
;;;295                    timeslot_extend(g_negotiate_timeslot_length);
00028e  4862              LDR      r0,|L1.1048|
000290  6800              LDR      r0,[r0,#0]  ; g_negotiate_timeslot_length
000292  f7fffffe          BL       timeslot_extend
000296  e001              B        |L1.668|
                  |L1.664|
;;;296                }
;;;297                else
;;;298                {
;;;299                    /* done extending, check for new trickle event */
;;;300                    transport_control_step();
000298  f7fffffe          BL       transport_control_step
                  |L1.668|
;;;301                }
;;;302                break;
00029c  e00a              B        |L1.692|
;;;303    
;;;304            default:
;;;305                APP_ERROR_CHECK(NRF_ERROR_INVALID_STATE);
00029e  bf00              NOP      
0002a0  2408              MOVS     r4,#8
0002a2  bf00              NOP      
0002a4  2200              MOVS     r2,#0
0002a6  4611              MOV      r1,r2
0002a8  2008              MOVS     r0,#8
0002aa  f7fffffe          BL       app_error_handler
0002ae  bf00              NOP      
0002b0  bf00              NOP      
0002b2  bf00              NOP                            ;199
                  |L1.692|
0002b4  bf00              NOP                            ;250
;;;306        }
;;;307    
;;;308    
;;;309    
;;;310        if (g_end_timer_triggered)
0002b6  4852              LDR      r0,|L1.1024|
0002b8  7800              LDRB     r0,[r0,#0]  ; g_end_timer_triggered
0002ba  2800              CMP      r0,#0
0002bc  d009              BEQ      |L1.722|
;;;311        {
;;;312            timeslot_order_earliest(TIMESLOT_SLOT_LENGTH, true);
0002be  2101              MOVS     r1,#1
0002c0  484d              LDR      r0,|L1.1016|
0002c2  f7fffffe          BL       timeslot_order_earliest
;;;313            g_is_in_timeslot = false;
0002c6  2000              MOVS     r0,#0
0002c8  4950              LDR      r1,|L1.1036|
0002ca  7008              STRB     r0,[r1,#0]
;;;314            g_end_timer_triggered = false;
0002cc  494c              LDR      r1,|L1.1024|
0002ce  7008              STRB     r0,[r1,#0]
0002d0  e00b              B        |L1.746|
                  |L1.722|
;;;315            CLEAR_PIN(2);
;;;316        }
;;;317        else if (g_ret_param.callback_action == NRF_RADIO_SIGNAL_CALLBACK_ACTION_EXTEND)
0002d2  4846              LDR      r0,|L1.1004|
0002d4  7800              LDRB     r0,[r0,#0]  ; g_ret_param
0002d6  2801              CMP      r0,#1
0002d8  d104              BNE      |L1.740|
;;;318        {
;;;319            requested_extend_time = g_ret_param.params.extend.length_us;
0002da  4844              LDR      r0,|L1.1004|
0002dc  6840              LDR      r0,[r0,#4]  ; g_ret_param
0002de  4956              LDR      r1,|L1.1080|
0002e0  6008              STR      r0,[r1,#0]  ; requested_extend_time
0002e2  e002              B        |L1.746|
                  |L1.740|
;;;320        }
;;;321        else
;;;322        {
;;;323            requested_extend_time = 0;
0002e4  2000              MOVS     r0,#0
0002e6  4954              LDR      r1,|L1.1080|
0002e8  6008              STR      r0,[r1,#0]  ; requested_extend_time
                  |L1.746|
;;;324        }
;;;325        g_is_in_callback = false;
0002ea  2000              MOVS     r0,#0
0002ec  4941              LDR      r1,|L1.1012|
0002ee  7008              STRB     r0,[r1,#0]
;;;326    
;;;327        CLEAR_PIN(3);
;;;328        return &g_ret_param;
0002f0  483e              LDR      r0,|L1.1004|
;;;329    }
0002f2  bdfe              POP      {r1-r7,pc}
;;;330    
                          ENDP

                  timeslot_handler_init PROC
;;;335    
;;;336    void timeslot_handler_init(void)
0002f4  b570              PUSH     {r4-r6,lr}
;;;337    {
;;;338        if (g_framework_initialized)
0002f6  4851              LDR      r0,|L1.1084|
0002f8  7800              LDRB     r0,[r0,#0]  ; g_framework_initialized
0002fa  2800              CMP      r0,#0
0002fc  d000              BEQ      |L1.768|
                  |L1.766|
;;;339        {
;;;340            /* may happen with serial interface, can safely skip redundant inits */
;;;341            return;
;;;342        }
;;;343        uint32_t error;
;;;344    
;;;345        g_is_in_callback = false;
;;;346        g_framework_initialized = true;
;;;347    
;;;348    
;;;349        error = sd_nvic_EnableIRQ(SD_EVT_IRQn);
;;;350        APP_ERROR_CHECK(error);
;;;351    
;;;352        error = sd_radio_session_open(&radio_signal_callback);
;;;353        APP_ERROR_CHECK(error);
;;;354        g_start_time_ref = NRF_RTC0->COUNTER;
;;;355        g_timeslot_length = TIMESLOT_SLOT_LENGTH;
;;;356        timeslot_order_earliest(g_timeslot_length, true);
;;;357    }
0002fe  bd70              POP      {r4-r6,pc}
                  |L1.768|
000300  2000              MOVS     r0,#0                 ;345
000302  493c              LDR      r1,|L1.1012|
000304  7008              STRB     r0,[r1,#0]            ;345
000306  2001              MOVS     r0,#1                 ;346
000308  494c              LDR      r1,|L1.1084|
00030a  7008              STRB     r0,[r1,#0]            ;346
00030c  2016              MOVS     r0,#0x16              ;349
00030e  df2e              SVC      #0x2e                 ;349
000310  4604              MOV      r4,r0                 ;349
000312  bf00              NOP                            ;350
000314  4625              MOV      r5,r4                 ;350
000316  2d00              CMP      r5,#0                 ;350
000318  d006              BEQ      |L1.808|
00031a  bf00              NOP                            ;350
00031c  2200              MOVS     r2,#0                 ;350
00031e  4611              MOV      r1,r2                 ;350
000320  4628              MOV      r0,r5                 ;350
000322  f7fffffe          BL       app_error_handler
000326  bf00              NOP                            ;350
                  |L1.808|
000328  bf00              NOP                            ;350
00032a  4845              LDR      r0,|L1.1088|
00032c  df4e              SVC      #0x4e                 ;352
00032e  4604              MOV      r4,r0                 ;352
000330  bf00              NOP                            ;353
000332  4625              MOV      r5,r4                 ;353
000334  2d00              CMP      r5,#0                 ;353
000336  d006              BEQ      |L1.838|
000338  bf00              NOP                            ;353
00033a  2200              MOVS     r2,#0                 ;353
00033c  4611              MOV      r1,r2                 ;353
00033e  4628              MOV      r0,r5                 ;353
000340  f7fffffe          BL       app_error_handler
000344  bf00              NOP                            ;353
                  |L1.838|
000346  bf00              NOP                            ;353
000348  4836              LDR      r0,|L1.1060|
00034a  6840              LDR      r0,[r0,#4]            ;354
00034c  2100              MOVS     r1,#0                 ;354
00034e  4a37              LDR      r2,|L1.1068|
000350  c203              STM      r2!,{r0,r1}           ;354
000352  4929              LDR      r1,|L1.1016|
000354  2000              MOVS     r0,#0                 ;355
000356  4a2b              LDR      r2,|L1.1028|
000358  6011              STR      r1,[r2,#0]            ;355  ; g_timeslot_length
00035a  6050              STR      r0,[r2,#4]            ;355  ; g_timeslot_length
00035c  2101              MOVS     r1,#1                 ;356
00035e  4610              MOV      r0,r2                 ;356
000360  6800              LDR      r0,[r0,#0]            ;356  ; g_timeslot_length
000362  f7fffffe          BL       timeslot_order_earliest
000366  bf00              NOP      
000368  e7c9              B        |L1.766|
;;;358    
                          ENDP

                  timeslot_order_normal PROC
;;;385    
;;;386    void timeslot_order_normal(uint32_t length_us, uint32_t distance_us, bool immediately)
00036a  b570              PUSH     {r4-r6,lr}
;;;387    {
00036c  4604              MOV      r4,r0
00036e  460d              MOV      r5,r1
000370  4616              MOV      r6,r2
;;;388        if (immediately)
000372  2e00              CMP      r6,#0
000374  d012              BEQ      |L1.924|
;;;389        {
;;;390            radio_request_normal.params.normal.length_us = length_us;
000376  4833              LDR      r0,|L1.1092|
000378  60c4              STR      r4,[r0,#0xc]
;;;391            radio_request_normal.params.normal.distance_us = distance_us;
00037a  6085              STR      r5,[r0,#8]
;;;392            g_ret_param.callback_action = NRF_RADIO_SIGNAL_CALLBACK_ACTION_REQUEST_AND_END;
00037c  2003              MOVS     r0,#3
00037e  491b              LDR      r1,|L1.1004|
000380  7008              STRB     r0,[r1,#0]
;;;393            g_ret_param.params.request.p_next = &radio_request_normal;
000382  4830              LDR      r0,|L1.1092|
000384  6048              STR      r0,[r1,#4]  ; g_ret_param
;;;394    
;;;395            g_next_timeslot_length = length_us;
000386  2000              MOVS     r0,#0
000388  4919              LDR      r1,|L1.1008|
00038a  600c              STR      r4,[r1,#0]  ; g_next_timeslot_length
00038c  6048              STR      r0,[r1,#4]  ; g_next_timeslot_length
;;;396    
;;;397            if (!g_is_in_callback)
00038e  4819              LDR      r0,|L1.1012|
000390  7800              LDRB     r0,[r0,#0]  ; g_is_in_callback
000392  2800              CMP      r0,#0
000394  d109              BNE      |L1.938|
;;;398            {
;;;399                sd_radio_request(&radio_request_normal);
000396  482b              LDR      r0,|L1.1092|
000398  df50              SVC      #0x50
00039a  e006              B        |L1.938|
                  |L1.924|
;;;400            }
;;;401        }
;;;402        else
;;;403        {
;;;404            radio_request_normal.params.normal.length_us = length_us;
00039c  4829              LDR      r0,|L1.1092|
00039e  60c4              STR      r4,[r0,#0xc]
;;;405            radio_request_normal.params.normal.distance_us = distance_us;
0003a0  6085              STR      r5,[r0,#8]
;;;406    
;;;407            g_next_timeslot_length = length_us;
0003a2  2000              MOVS     r0,#0
0003a4  4912              LDR      r1,|L1.1008|
0003a6  600c              STR      r4,[r1,#0]  ; g_next_timeslot_length
0003a8  6048              STR      r0,[r1,#4]  ; g_next_timeslot_length
                  |L1.938|
;;;408        }
;;;409    }
0003aa  bd70              POP      {r4-r6,pc}
;;;410    
                          ENDP

                  timeslot_get_remaining_time PROC
;;;424    
;;;425    uint32_t timeslot_get_remaining_time(void)
0003ac  b510              PUSH     {r4,lr}
;;;426    {
;;;427        if (!g_is_in_timeslot)
0003ae  4817              LDR      r0,|L1.1036|
0003b0  7800              LDRB     r0,[r0,#0]  ; g_is_in_timeslot
0003b2  2800              CMP      r0,#0
0003b4  d100              BNE      |L1.952|
                  |L1.950|
;;;428        {
;;;429            return 0;
;;;430        }
;;;431    
;;;432        uint32_t timestamp = timer_get_timestamp();
;;;433        if (timestamp > g_timeslot_length - TIMESLOT_END_SAFETY_MARGIN_US)
;;;434        {
;;;435            return 0;
;;;436        }
;;;437        else
;;;438        {
;;;439            return (g_timeslot_length - TIMESLOT_END_SAFETY_MARGIN_US - timestamp);
;;;440        }
;;;441    }
0003b6  bd10              POP      {r4,pc}
                  |L1.952|
0003b8  f7fffffe          BL       timer_get_timestamp
0003bc  4604              MOV      r4,r0                 ;432
0003be  4811              LDR      r0,|L1.1028|
0003c0  6802              LDR      r2,[r0,#0]            ;433  ; g_timeslot_length
0003c2  6840              LDR      r0,[r0,#4]            ;433  ; g_timeslot_length
0003c4  237d              MOVS     r3,#0x7d              ;433
0003c6  011b              LSLS     r3,r3,#4              ;433
0003c8  2100              MOVS     r1,#0                 ;433
0003ca  1ad2              SUBS     r2,r2,r3              ;433
0003cc  4188              SBCS     r0,r0,r1              ;433
0003ce  1b12              SUBS     r2,r2,r4              ;433
0003d0  4188              SBCS     r0,r0,r1              ;433
0003d2  d201              BCS      |L1.984|
0003d4  2000              MOVS     r0,#0                 ;435
0003d6  e7ee              B        |L1.950|
                  |L1.984|
0003d8  480a              LDR      r0,|L1.1028|
0003da  6801              LDR      r1,[r0,#0]            ;439  ; g_timeslot_length
0003dc  207d              MOVS     r0,#0x7d              ;439
0003de  0100              LSLS     r0,r0,#4              ;439
0003e0  1a08              SUBS     r0,r1,r0              ;439
0003e2  1b00              SUBS     r0,r0,r4              ;439
0003e4  e7e7              B        |L1.950|
0003e6  0000              DCW      0x0000
                  |L1.1000|
                          DCD      radio_request_earliest
                  |L1.1004|
                          DCD      g_ret_param
                  |L1.1008|
                          DCD      g_next_timeslot_length
                  |L1.1012|
                          DCD      g_is_in_callback
                  |L1.1016|
                          DCD      0x00002710
                  |L1.1020|
                          DCD      0x00000bb8
                  |L1.1024|
                          DCD      g_end_timer_triggered
                  |L1.1028|
                          DCD      g_timeslot_length
                  |L1.1032|
                          DCD      0x01312d00
                  |L1.1036|
                          DCD      g_is_in_timeslot
                  |L1.1040|
                          DCD      successful_extensions
                  |L1.1044|
                          DCD      0x0000c350
                  |L1.1048|
                          DCD      g_negotiate_timeslot_length
                  |L1.1052|
                          DCD      end_timer_handler
                  |L1.1056|
                          DCD      g_timeslot_end_timer
                  |L1.1060|
                          DCD      0x4000b500
                  |L1.1064|
                          DCD      last_rtc_value
                  |L1.1068|
                          DCD      g_start_time_ref
                  |L1.1072|
                          DCD      0x00ffffff
                  |L1.1076|
                          DCD      time_now
                  |L1.1080|
                          DCD      requested_extend_time
                  |L1.1084|
                          DCD      g_framework_initialized
                  |L1.1088|
                          DCD      radio_signal_callback
                  |L1.1092|
                          DCD      radio_request_normal
                          ENDP

                  timeslot_get_end_time PROC
;;;442    
;;;443    uint64_t timeslot_get_end_time(void)
000448  4804              LDR      r0,|L1.1116|
;;;444    {
;;;445        if (!g_is_in_timeslot)
00044a  7800              LDRB     r0,[r0,#0]  ; g_is_in_timeslot
00044c  2800              CMP      r0,#0
00044e  d101              BNE      |L1.1108|
;;;446        {
;;;447            return 0;
000450  4601              MOV      r1,r0
                  |L1.1106|
;;;448        }
;;;449    
;;;450        return g_timeslot_length;
;;;451    }
000452  4770              BX       lr
                  |L1.1108|
000454  4902              LDR      r1,|L1.1120|
000456  c903              LDM      r1,{r0,r1}            ;450
000458  e7fb              B        |L1.1106|
                          ENDP

00045a  0000              DCW      0x0000
                  |L1.1116|
                          DCD      g_is_in_timeslot
                  |L1.1120|
                          DCD      g_timeslot_length

                          AREA ||.data||, DATA, ALIGN=3

                  radio_request_normal
000000  01000000          DCB      0x01,0x00,0x00,0x00
000004  00010000          DCB      0x00,0x01,0x00,0x00
                          DCD      0x00002710
                          DCD      0x00002710
                  radio_request_earliest
000010  00000000          DCB      0x00,0x00,0x00,0x00
000014  00010000          DCB      0x00,0x01,0x00,0x00
                          DCD      0x00002710
                          DCD      0x0000c350
                  g_ret_param
                          %        8
                  g_is_in_callback
000028  01000000          DCB      0x01,0x00,0x00,0x00
                          DCD      0x00000000
                  g_timeslot_length
                          %        8
                  g_timeslot_end_timer
                          DCD      0x00000000
                          DCD      0x00000000
                  g_next_timeslot_length
                          %        8
                  g_start_time_ref
000048  00000000          DCQ      0x0000000000000000
00004c  00000000
                  g_is_in_timeslot
000050  00                DCB      0x00
                  g_framework_initialized
000051  00                DCB      0x00
                  g_end_timer_triggered
000052  0000              DCB      0x00,0x00
                  g_negotiate_timeslot_length
                          DCD      0x00002710
                  ts_count
                          DCD      0x00000000
                  requested_extend_time
                          DCD      0x00000000
                  successful_extensions
                          DCD      0x00000000
                          DCD      0x00000000
                  last_rtc_value
000068  00000000          DCQ      0x0000000000000000
00006c  00000000
                  time_now
000070  00000000          DCQ      0x0000000000000000
000074  00000000

                          AREA ||i.__ARM_common_switch8||, COMGROUP=__ARM_common_switch8, CODE, READONLY, ALIGN=1

                  __ARM_common_switch8 PROC
000000  b430              PUSH     {r4,r5}
000002  4674              MOV      r4,lr
000004  1e64              SUBS     r4,r4,#1
000006  7825              LDRB     r5,[r4,#0]
000008  1c64              ADDS     r4,r4,#1
00000a  42ab              CMP      r3,r5
00000c  d304              BCC      |L15.24|
                  |L15.14|
00000e  5d63              LDRB     r3,[r4,r5]
000010  005b              LSLS     r3,r3,#1
000012  18e3              ADDS     r3,r4,r3
000014  bc30              POP      {r4,r5}
000016  4718              BX       r3
                  |L15.24|
000018  461d              MOV      r5,r3
00001a  e7f8              B        |L15.14|
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\..\\..\\rbc_mesh\\src\\timeslot_handler.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___18_timeslot_handler_c_b212412d____REV16|
#line 129 "..\\..\\..\\..\\..\\..\\components\\toolchain\\gcc\\core_cmInstr.h"
|__asm___18_timeslot_handler_c_b212412d____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___18_timeslot_handler_c_b212412d____REVSH|
#line 144
|__asm___18_timeslot_handler_c_b212412d____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
