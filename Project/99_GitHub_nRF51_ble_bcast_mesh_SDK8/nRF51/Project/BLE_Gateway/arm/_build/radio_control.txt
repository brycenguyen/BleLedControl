; generated by Component: ARM Compiler 5.04 update 1 (build 49) Tool: ArmCC [5040049]
; commandline ArmCC [--c99 --list --debug -c --asm --interleave -o.\_build\radio_control.o --asm_dir=.\_build\ --list_dir=.\_build\ --depend=.\_build\radio_control.d --cpu=Cortex-M0 --apcs=interwork -O0 -I..\include -I..\..\..\rbc_mesh -I..\..\..\rbc_mesh\include -I..\..\..\SDK\bsp -I..\..\..\..\..\..\components\softdevice\s110\headers -I..\..\..\..\..\..\components\toolchain\gcc -I..\..\..\..\..\..\components\libraries\util -I..\..\..\..\..\..\components\ble\common -I..\..\..\..\..\..\components\drivers_nrf\hal -I..\..\..\..\..\..\components\drivers_nrf\spi_slave -I..\..\..\..\..\..\components\softdevice\common\softdevice_handler -I..\..\..\..\..\..\components\libraries\fifo -I..\..\..\..\..\..\components\drivers_nrf\uart -I..\..\..\..\..\..\components\drivers_nrf\gpiote -I..\..\..\..\..\..\components\drivers_nrf\config -I..\..\..\..\..\..\components\drivers_nrf\common -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\4.1.0\CMSIS\Include -IC:\Keil_v5\ARM\PACK\NordicSemiconductor\nRF_DeviceFamilyPack\7.2.1\Device\Include -D__MICROLIB -DNRF51 -DBOARD_RHC -DNRF51 -DBLE_STACK_SUPPORT_REQD -DS110 -DSOFTDEVICE_PRESENT --omf_browse=.\_build\radio_control.crf ..\..\..\rbc_mesh\src\radio_control.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  radio_channel_set PROC
;;;94     
;;;95     static void radio_channel_set(uint8_t ch)
000000  b50e              PUSH     {r1-r3,lr}
;;;96     {
;;;97         if (ch <= 10)
000002  280a              CMP      r0,#0xa
000004  dc04              BGT      |L1.16|
;;;98         {
;;;99             NRF_RADIO->FREQUENCY = 4 + ch * 2;
000006  0041              LSLS     r1,r0,#1
000008  1d09              ADDS     r1,r1,#4
00000a  4af9              LDR      r2,|L1.1008|
00000c  6091              STR      r1,[r2,#8]
00000e  e013              B        |L1.56|
                  |L1.16|
;;;100        }
;;;101        else if (ch <= 36)
000010  2824              CMP      r0,#0x24
000012  dc04              BGT      |L1.30|
;;;102        {
;;;103            NRF_RADIO->FREQUENCY = 6 + ch * 2;
000014  0041              LSLS     r1,r0,#1
000016  1d89              ADDS     r1,r1,#6
000018  4af5              LDR      r2,|L1.1008|
00001a  6091              STR      r1,[r2,#8]
00001c  e00c              B        |L1.56|
                  |L1.30|
;;;104        }
;;;105        else
;;;106        {
;;;107            uint32_t adv_freqs[] = {2, 26, 80};
00001e  4bf5              LDR      r3,|L1.1012|
000020  cb0e              LDM      r3,{r1-r3}
000022  9302              STR      r3,[sp,#8]
000024  9201              STR      r2,[sp,#4]
000026  9100              STR      r1,[sp,#0]
;;;108            NRF_RADIO->FREQUENCY = adv_freqs[(ch - 37)];
000028  4601              MOV      r1,r0
00002a  3925              SUBS     r1,r1,#0x25
00002c  0089              LSLS     r1,r1,#2
00002e  466a              MOV      r2,sp
000030  5851              LDR      r1,[r2,r1]
000032  4aef              LDR      r2,|L1.1008|
000034  6091              STR      r1,[r2,#8]
;;;109        }
000036  bf00              NOP      
                  |L1.56|
;;;110    
;;;111        NRF_RADIO->DATAWHITEIV = ch & RADIO_DATAWHITEIV_DATAWHITEIV_Msk;
000038  0641              LSLS     r1,r0,#25
00003a  0e49              LSRS     r1,r1,#25
00003c  4aec              LDR      r2,|L1.1008|
00003e  3240              ADDS     r2,r2,#0x40
000040  6151              STR      r1,[r2,#0x14]
;;;112    
;;;113    }
000042  bd0e              POP      {r1-r3,pc}
;;;114    
                          ENDP

                  radio_will_go_to_disabled_state PROC
;;;115    static bool radio_will_go_to_disabled_state(void)
000044  b500              PUSH     {lr}
;;;116    {
000046  b08b              SUB      sp,sp,#0x2c
;;;117        radio_event_t current_evt, next_evt;
;;;118        fifo_peek(&radio_fifo, &current_evt);
000048  a906              ADD      r1,sp,#0x18
00004a  48eb              LDR      r0,|L1.1016|
00004c  f7fffffe          BL       fifo_peek
;;;119        fifo_peek_at(&radio_fifo, &next_evt, 1);
000050  2201              MOVS     r2,#1
000052  a901              ADD      r1,sp,#4
000054  48e8              LDR      r0,|L1.1016|
000056  f7fffffe          BL       fifo_peek_at
;;;120    
;;;121        return ((fifo_get_len(&radio_fifo) == 2 &&
00005a  48e7              LDR      r0,|L1.1016|
00005c  f7fffffe          BL       fifo_get_len
000060  2802              CMP      r0,#2
000062  d107              BNE      |L1.116|
;;;122            (NRF_RADIO->EVENTS_READY) && !(NRF_RADIO->EVENTS_END)) ||
000064  48e5              LDR      r0,|L1.1020|
000066  6800              LDR      r0,[r0,#0]
000068  2800              CMP      r0,#0
00006a  d003              BEQ      |L1.116|
00006c  48e3              LDR      r0,|L1.1020|
00006e  68c0              LDR      r0,[r0,#0xc]
000070  2800              CMP      r0,#0
000072  d005              BEQ      |L1.128|
                  |L1.116|
;;;123            (current_evt.channel != next_evt.channel));
000074  a808              ADD      r0,sp,#0x20
000076  7941              LDRB     r1,[r0,#5]
000078  4668              MOV      r0,sp
00007a  7c40              LDRB     r0,[r0,#0x11]
00007c  4281              CMP      r1,r0
00007e  d002              BEQ      |L1.134|
                  |L1.128|
000080  2001              MOVS     r0,#1
                  |L1.130|
;;;124    }
000082  b00b              ADD      sp,sp,#0x2c
000084  bd00              POP      {pc}
                  |L1.134|
000086  2000              MOVS     r0,#0                 ;123
000088  e7fb              B        |L1.130|
;;;125    
                          ENDP

                  radio_transition_end PROC
;;;136    */
;;;137    static void radio_transition_end(bool successful_transmission)
00008a  b5f0              PUSH     {r4-r7,lr}
;;;138    {
00008c  b091              SUB      sp,sp,#0x44
00008e  4605              MOV      r5,r0
;;;139        /**@NOTE: CRC bug workaround */
;;;140        bool crc_status = NRF_RADIO->CRCSTATUS;
000090  48db              LDR      r0,|L1.1024|
000092  6800              LDR      r0,[r0,#0]
000094  2800              CMP      r0,#0
000096  d001              BEQ      |L1.156|
000098  2001              MOVS     r0,#1
00009a  e000              B        |L1.158|
                  |L1.156|
00009c  2000              MOVS     r0,#0
                  |L1.158|
00009e  9010              STR      r0,[sp,#0x40]
;;;141    
;;;142        /* pop the event that just finished */
;;;143        radio_event_t prev_evt;
;;;144        uint32_t error_code = fifo_pop(&radio_fifo, &prev_evt);
0000a0  a90b              ADD      r1,sp,#0x2c
0000a2  48d5              LDR      r0,|L1.1016|
0000a4  f7fffffe          BL       fifo_pop
0000a8  4604              MOV      r4,r0
;;;145        APP_ERROR_CHECK(error_code);
0000aa  bf00              NOP      
0000ac  4627              MOV      r7,r4
0000ae  2f00              CMP      r7,#0
0000b0  d006              BEQ      |L1.192|
0000b2  bf00              NOP      
0000b4  2200              MOVS     r2,#0
0000b6  4611              MOV      r1,r2
0000b8  4638              MOV      r0,r7
0000ba  f7fffffe          BL       app_error_handler
0000be  bf00              NOP      
                  |L1.192|
0000c0  bf00              NOP      
;;;146    
;;;147        bool fly_through_disable = ((NRF_RADIO->SHORTS &
0000c2  48d0              LDR      r0,|L1.1028|
0000c4  6800              LDR      r0,[r0,#0]
0000c6  210c              MOVS     r1,#0xc
0000c8  4008              ANDS     r0,r0,r1
0000ca  2800              CMP      r0,#0
0000cc  d001              BEQ      |L1.210|
0000ce  2001              MOVS     r0,#1
0000d0  e000              B        |L1.212|
                  |L1.210|
0000d2  2000              MOVS     r0,#0
                  |L1.212|
0000d4  4606              MOV      r6,r0
;;;148            (RADIO_SHORTS_DISABLED_RXEN_Msk | RADIO_SHORTS_DISABLED_TXEN_Msk)) > 0);
;;;149    
;;;150        current_rx_buf = !current_rx_buf;
0000d6  48cc              LDR      r0,|L1.1032|
0000d8  7800              LDRB     r0,[r0,#0]  ; current_rx_buf
0000da  2800              CMP      r0,#0
0000dc  d101              BNE      |L1.226|
0000de  2001              MOVS     r0,#1
0000e0  e000              B        |L1.228|
                  |L1.226|
0000e2  2000              MOVS     r0,#0
                  |L1.228|
0000e4  49c8              LDR      r1,|L1.1032|
0000e6  7008              STRB     r0,[r1,#0]
;;;151        NRF_RADIO->SHORTS = 0;
0000e8  2000              MOVS     r0,#0
0000ea  49c6              LDR      r1,|L1.1028|
0000ec  6008              STR      r0,[r1,#0]
;;;152    
;;;153        DEBUG_RADIO_CLEAR_PIN(PIN_RADIO_STATE_RX);
;;;154        DEBUG_RADIO_CLEAR_PIN(PIN_RADIO_STATE_TX);
;;;155    
;;;156    
;;;157        if (fifo_is_empty(&radio_fifo))
0000ee  48c2              LDR      r0,|L1.1016|
0000f0  f7fffffe          BL       fifo_is_empty
0000f4  2800              CMP      r0,#0
0000f6  d003              BEQ      |L1.256|
;;;158        {
;;;159            radio_state = RADIO_STATE_DISABLED;
0000f8  2002              MOVS     r0,#2
0000fa  49c4              LDR      r1,|L1.1036|
0000fc  7008              STRB     r0,[r1,#0]
0000fe  e0a2              B        |L1.582|
                  |L1.256|
;;;160        }
;;;161        else
;;;162        {
;;;163    
;;;164            /* Take care of the upcoming event */
;;;165    
;;;166            bool start_manually = false;
000100  2700              MOVS     r7,#0
;;;167            radio_event_t evt;
;;;168            fifo_peek(&radio_fifo, &evt);
000102  a906              ADD      r1,sp,#0x18
000104  48bc              LDR      r0,|L1.1016|
000106  f7fffffe          BL       fifo_peek
;;;169    
;;;170            if (evt.start_time > 0)
00010a  9807              LDR      r0,[sp,#0x1c]
00010c  2800              CMP      r0,#0
00010e  d009              BEQ      |L1.292|
;;;171            {
;;;172                uint32_t curr_time = timer_get_timestamp();
000110  f7fffffe          BL       timer_get_timestamp
000114  9005              STR      r0,[sp,#0x14]
;;;173    
;;;174                if (evt.start_time < curr_time)
000116  9907              LDR      r1,[sp,#0x1c]
000118  9805              LDR      r0,[sp,#0x14]
00011a  4281              CMP      r1,r0
00011c  d201              BCS      |L1.290|
;;;175                {
;;;176                    evt.start_time = 0;
00011e  2000              MOVS     r0,#0
000120  9007              STR      r0,[sp,#0x1c]
                  |L1.290|
;;;177                }
;;;178            }
000122  bf00              NOP      
                  |L1.292|
;;;179    
;;;180            if (evt.start_time == 0)
000124  9807              LDR      r0,[sp,#0x1c]
000126  2800              CMP      r0,#0
000128  d10f              BNE      |L1.330|
;;;181            {
;;;182                NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk;
00012a  2001              MOVS     r0,#1
00012c  49b5              LDR      r1,|L1.1028|
00012e  6008              STR      r0,[r1,#0]
;;;183    
;;;184                /* the ready->start shortcut doesn't work when we already are in IDLE */
;;;185                if (prev_evt.event_type == evt.event_type &&
000130  a808              ADD      r0,sp,#0x20
000132  7b01              LDRB     r1,[r0,#0xc]
000134  4668              MOV      r0,sp
000136  7e00              LDRB     r0,[r0,#0x18]
000138  4281              CMP      r1,r0
00013a  d10b              BNE      |L1.340|
;;;186                    prev_evt.channel == evt.channel)
00013c  a808              ADD      r0,sp,#0x20
00013e  7e41              LDRB     r1,[r0,#0x19]
000140  7940              LDRB     r0,[r0,#5]
000142  4281              CMP      r1,r0
000144  d106              BNE      |L1.340|
;;;187                {
;;;188                    start_manually = true;
000146  2701              MOVS     r7,#1
000148  e004              B        |L1.340|
                  |L1.330|
;;;189                }
;;;190            }
;;;191            else
;;;192            {
;;;193                timer_order_ppi(evt.start_time, (uint32_t*) &(NRF_RADIO->TASKS_START));
00014a  49ac              LDR      r1,|L1.1020|
00014c  39f8              SUBS     r1,r1,#0xf8
00014e  9807              LDR      r0,[sp,#0x1c]
000150  f7fffffe          BL       timer_order_ppi
                  |L1.340|
;;;194            }
;;;195    
;;;196            /* setup buffers and addresses */
;;;197            if (evt.event_type == RADIO_EVENT_TYPE_RX)
000154  4668              MOV      r0,sp
000156  7e00              LDRB     r0,[r0,#0x18]
000158  2801              CMP      r0,#1
00015a  d120              BNE      |L1.414|
;;;198            {
;;;199                DEBUG_RADIO_SET_PIN(PIN_RADIO_STATE_RX);
;;;200                NRF_RADIO->RXADDRESSES = evt.access_address;
00015c  a808              ADD      r0,sp,#0x20
00015e  7900              LDRB     r0,[r0,#4]
000160  49a3              LDR      r1,|L1.1008|
000162  6308              STR      r0,[r1,#0x30]
;;;201                radio_state = RADIO_STATE_RX;
000164  2000              MOVS     r0,#0
000166  49a9              LDR      r1,|L1.1036|
000168  7008              STRB     r0,[r1,#0]
;;;202    
;;;203                NRF_RADIO->PACKETPTR = (uint32_t) rx_data[current_rx_buf];
00016a  48a7              LDR      r0,|L1.1032|
00016c  7800              LDRB     r0,[r0,#0]  ; current_rx_buf
00016e  0080              LSLS     r0,r0,#2
000170  49a7              LDR      r1,|L1.1040|
000172  5808              LDR      r0,[r1,r0]
000174  499e              LDR      r1,|L1.1008|
000176  6048              STR      r0,[r1,#4]
;;;204                NRF_RADIO->INTENSET = RADIO_INTENSET_ADDRESS_Msk;
000178  2002              MOVS     r0,#2
00017a  49a6              LDR      r1,|L1.1044|
00017c  6048              STR      r0,[r1,#4]
;;;205    
;;;206                if (evt.start_time != 0)
00017e  9807              LDR      r0,[sp,#0x1c]
000180  2800              CMP      r0,#0
000182  d002              BEQ      |L1.394|
;;;207                {
;;;208                    setup_rx_timeout(evt.start_time);
000184  9807              LDR      r0,[sp,#0x1c]
000186  f7fffffe          BL       setup_rx_timeout
                  |L1.394|
;;;209                }
;;;210    
;;;211                /* manually begin ramp up */
;;;212                if (!fly_through_disable)
00018a  2e00              CMP      r6,#0
00018c  d11d              BNE      |L1.458|
;;;213                {
;;;214                    radio_channel_set(evt.channel);
00018e  a908              ADD      r1,sp,#0x20
000190  7948              LDRB     r0,[r1,#5]
000192  f7fffffe          BL       radio_channel_set
;;;215                    NRF_RADIO->TASKS_RXEN = 1;
000196  2001              MOVS     r0,#1
000198  499f              LDR      r1,|L1.1048|
00019a  6048              STR      r0,[r1,#4]
00019c  e015              B        |L1.458|
                  |L1.414|
;;;216                }
;;;217    
;;;218            }
;;;219            else
;;;220            {
;;;221                DEBUG_RADIO_SET_PIN(PIN_RADIO_STATE_TX);
;;;222                NRF_RADIO->TXADDRESS = evt.access_address;
00019e  a808              ADD      r0,sp,#0x20
0001a0  7900              LDRB     r0,[r0,#4]
0001a2  4993              LDR      r1,|L1.1008|
0001a4  62c8              STR      r0,[r1,#0x2c]
;;;223                radio_state = RADIO_STATE_TX;
0001a6  2001              MOVS     r0,#1
0001a8  4998              LDR      r1,|L1.1036|
0001aa  7008              STRB     r0,[r1,#0]
;;;224                NRF_RADIO->PACKETPTR = (uint32_t) &evt.packet_ptr[0];
0001ac  4990              LDR      r1,|L1.1008|
0001ae  9808              LDR      r0,[sp,#0x20]
0001b0  6048              STR      r0,[r1,#4]
;;;225                NRF_RADIO->INTENCLR = RADIO_INTENCLR_ADDRESS_Msk;
0001b2  2002              MOVS     r0,#2
0001b4  4997              LDR      r1,|L1.1044|
0001b6  6088              STR      r0,[r1,#8]
;;;226                TICK_PIN(7);
;;;227    
;;;228                /* manually begin ramp up */
;;;229                if (!fly_through_disable)
0001b8  2e00              CMP      r6,#0
0001ba  d106              BNE      |L1.458|
;;;230                {
;;;231                    radio_channel_set(evt.channel);
0001bc  a908              ADD      r1,sp,#0x20
0001be  7948              LDRB     r0,[r1,#5]
0001c0  f7fffffe          BL       radio_channel_set
;;;232                    NRF_RADIO->TASKS_TXEN = 1;
0001c4  2001              MOVS     r0,#1
0001c6  4994              LDR      r1,|L1.1048|
0001c8  6008              STR      r0,[r1,#0]
                  |L1.458|
;;;233                }
;;;234            }
;;;235    
;;;236            /* safe to kickstart it now */
;;;237            if (start_manually)
0001ca  2f00              CMP      r7,#0
0001cc  d002              BEQ      |L1.468|
;;;238            {
;;;239                NRF_RADIO->TASKS_START = 1;
0001ce  2001              MOVS     r0,#1
0001d0  4991              LDR      r1,|L1.1048|
0001d2  6088              STR      r0,[r1,#8]
                  |L1.468|
;;;240            }
;;;241    
;;;242    
;;;243            /* prepare shortcuts for next transmission */
;;;244            if (fifo_get_len(&radio_fifo) == 1)
0001d4  4888              LDR      r0,|L1.1016|
0001d6  f7fffffe          BL       fifo_get_len
0001da  2801              CMP      r0,#1
0001dc  d106              BNE      |L1.492|
;;;245            {
;;;246                NRF_RADIO->SHORTS |= RADIO_SHORTS_END_DISABLE_Msk;
0001de  4889              LDR      r0,|L1.1028|
0001e0  6800              LDR      r0,[r0,#0]
0001e2  2102              MOVS     r1,#2
0001e4  4308              ORRS     r0,r0,r1
0001e6  4987              LDR      r1,|L1.1028|
0001e8  6008              STR      r0,[r1,#0]
0001ea  e02b              B        |L1.580|
                  |L1.492|
;;;247            }
;;;248            else
;;;249            {
;;;250                /* More events after the upcoming one */
;;;251                radio_event_t next_evt;
;;;252                fifo_peek_at(&radio_fifo, &next_evt, 1);
0001ec  2201              MOVS     r2,#1
0001ee  a901              ADD      r1,sp,#4
0001f0  4881              LDR      r0,|L1.1016|
0001f2  f7fffffe          BL       fifo_peek_at
;;;253    
;;;254                if (next_evt.event_type != evt.event_type ||
0001f6  4668              MOV      r0,sp
0001f8  7901              LDRB     r1,[r0,#4]
0001fa  7e00              LDRB     r0,[r0,#0x18]
0001fc  4281              CMP      r1,r0
0001fe  d105              BNE      |L1.524|
;;;255                    next_evt.channel != evt.channel)
000200  4668              MOV      r0,sp
000202  7c41              LDRB     r1,[r0,#0x11]
000204  a808              ADD      r0,sp,#0x20
000206  7940              LDRB     r0,[r0,#5]
000208  4281              CMP      r1,r0
00020a  d01a              BEQ      |L1.578|
                  |L1.524|
;;;256                {
;;;257                    radio_channel_set(next_evt.channel);
00020c  4669              MOV      r1,sp
00020e  7c48              LDRB     r0,[r1,#0x11]
000210  f7fffffe          BL       radio_channel_set
;;;258    
;;;259                    NRF_RADIO->SHORTS |= RADIO_SHORTS_END_DISABLE_Msk;
000214  487b              LDR      r0,|L1.1028|
000216  6800              LDR      r0,[r0,#0]
000218  2102              MOVS     r1,#2
00021a  4308              ORRS     r0,r0,r1
00021c  4979              LDR      r1,|L1.1028|
00021e  6008              STR      r0,[r1,#0]
;;;260    
;;;261                    /* make shortcut through disabled to accelerate the process */
;;;262                    if (next_evt.event_type == RADIO_EVENT_TYPE_RX)
000220  4669              MOV      r1,sp
000222  7908              LDRB     r0,[r1,#4]
000224  2801              CMP      r0,#1
000226  d106              BNE      |L1.566|
;;;263                    {
;;;264                        NRF_RADIO->SHORTS |= RADIO_SHORTS_DISABLED_RXEN_Msk;
000228  4876              LDR      r0,|L1.1028|
00022a  6800              LDR      r0,[r0,#0]
00022c  2108              MOVS     r1,#8
00022e  4308              ORRS     r0,r0,r1
000230  4974              LDR      r1,|L1.1028|
000232  6008              STR      r0,[r1,#0]
000234  e005              B        |L1.578|
                  |L1.566|
;;;265                    }
;;;266                    else /* shortcut to TX */
;;;267                    {
;;;268                        NRF_RADIO->SHORTS |= RADIO_SHORTS_DISABLED_TXEN_Msk;
000236  4873              LDR      r0,|L1.1028|
000238  6800              LDR      r0,[r0,#0]
00023a  2104              MOVS     r1,#4
00023c  4308              ORRS     r0,r0,r1
00023e  4971              LDR      r1,|L1.1028|
000240  6008              STR      r0,[r1,#0]
                  |L1.578|
;;;269                    }
;;;270                }
;;;271            }
000242  bf00              NOP      
                  |L1.580|
;;;272        }
000244  bf00              NOP      
                  |L1.582|
;;;273    
;;;274        /* send to super space */
;;;275    
;;;276        if (prev_evt.callback.tx != NULL)
000246  980f              LDR      r0,[sp,#0x3c]
000248  2800              CMP      r0,#0
00024a  d032              BEQ      |L1.690|
;;;277        {
;;;278            CHECK_FP(prev_evt.callback.rx);
00024c  2103              MOVS     r1,#3
00024e  03c9              LSLS     r1,r1,#15
000250  980f              LDR      r0,[sp,#0x3c]
000252  4288              CMP      r0,r1
000254  d304              BCC      |L1.608|
000256  2101              MOVS     r1,#1
000258  0749              LSLS     r1,r1,#29
00025a  980f              LDR      r0,[sp,#0x3c]
00025c  4288              CMP      r0,r1
00025e  d909              BLS      |L1.628|
                  |L1.608|
000260  bf00              NOP      
000262  2710              MOVS     r7,#0x10
000264  bf00              NOP      
000266  2200              MOVS     r2,#0
000268  4611              MOV      r1,r2
00026a  2010              MOVS     r0,#0x10
00026c  f7fffffe          BL       app_error_handler
000270  bf00              NOP      
000272  bf00              NOP      
                  |L1.628|
;;;279            if (prev_evt.event_type == RADIO_EVENT_TYPE_RX)
000274  a808              ADD      r0,sp,#0x20
000276  7b00              LDRB     r0,[r0,#0xc]
000278  2801              CMP      r0,#1
00027a  d118              BNE      |L1.686|
;;;280            {
;;;281    
;;;282                if (successful_transmission && crc_status)
00027c  2d00              CMP      r5,#0
00027e  d012              BEQ      |L1.678|
000280  9810              LDR      r0,[sp,#0x40]
000282  2800              CMP      r0,#0
000284  d00f              BEQ      |L1.678|
;;;283                {
;;;284                    TICK_PIN(5);
;;;285                    (*prev_evt.callback.rx)(rx_data[!current_rx_buf]);
000286  4a60              LDR      r2,|L1.1032|
000288  7812              LDRB     r2,[r2,#0]  ; current_rx_buf
00028a  2a00              CMP      r2,#0
00028c  d101              BNE      |L1.658|
00028e  2201              MOVS     r2,#1
000290  e000              B        |L1.660|
                  |L1.658|
000292  2200              MOVS     r2,#0
                  |L1.660|
000294  0092              LSLS     r2,r2,#2
000296  4b5e              LDR      r3,|L1.1040|
000298  5898              LDR      r0,[r3,r2]
00029a  990f              LDR      r1,[sp,#0x3c]
00029c  4788              BLX      r1
;;;286                    NRF_RADIO->EVENTS_END = 0;
00029e  2000              MOVS     r0,#0
0002a0  4956              LDR      r1,|L1.1020|
0002a2  60c8              STR      r0,[r1,#0xc]
0002a4  e005              B        |L1.690|
                  |L1.678|
;;;287                }
;;;288                else
;;;289                {
;;;290                    (*prev_evt.callback.rx)(NULL);
0002a6  2000              MOVS     r0,#0
0002a8  990f              LDR      r1,[sp,#0x3c]
0002aa  4788              BLX      r1
0002ac  e001              B        |L1.690|
                  |L1.686|
;;;291                }
;;;292            }
;;;293            else
;;;294            {
;;;295                (*prev_evt.callback.tx)();
0002ae  980f              LDR      r0,[sp,#0x3c]
0002b0  4780              BLX      r0
                  |L1.690|
;;;296            }
;;;297        }
;;;298    
;;;299    }
0002b2  b011              ADD      sp,sp,#0x44
0002b4  bdf0              POP      {r4-r7,pc}
;;;300    
                          ENDP

                  rx_abort_cb PROC
;;;301    static void rx_abort_cb(void)
0002b6  b510              PUSH     {r4,lr}
;;;302    {
;;;303        radio_state = RADIO_STATE_DISABLED;
0002b8  2002              MOVS     r0,#2
0002ba  4954              LDR      r1,|L1.1036|
0002bc  7008              STRB     r0,[r1,#0]
;;;304        rx_abort_timer_index = 0xFF;
0002be  20ff              MOVS     r0,#0xff
0002c0  4956              LDR      r1,|L1.1052|
0002c2  7008              STRB     r0,[r1,#0]
;;;305        radio_transition_end(false);
0002c4  2000              MOVS     r0,#0
0002c6  f7fffffe          BL       radio_transition_end
;;;306    }
0002ca  bd10              POP      {r4,pc}
;;;307    
                          ENDP

                  setup_rx_timeout PROC
;;;125    
;;;126    static void setup_rx_timeout(uint32_t rx_start_time)
0002cc  b510              PUSH     {r4,lr}
;;;127    {
0002ce  4604              MOV      r4,r0
;;;128        rx_abort_timer_index = timer_order_cb_ppi(rx_start_time + RADIO_RX_TIMEOUT,
0002d0  4a51              LDR      r2,|L1.1048|
0002d2  3210              ADDS     r2,r2,#0x10
0002d4  4952              LDR      r1,|L1.1056|
0002d6  4853              LDR      r0,|L1.1060|
0002d8  1820              ADDS     r0,r4,r0
0002da  f7fffffe          BL       timer_order_cb_ppi
0002de  494f              LDR      r1,|L1.1052|
0002e0  7008              STRB     r0,[r1,#0]
;;;129            rx_abort_cb,
;;;130            (uint32_t*) &(NRF_RADIO->TASKS_DISABLE));
;;;131    }
0002e2  bd10              POP      {r4,pc}
;;;132    
                          ENDP

                  radio_init PROC
;;;311    
;;;312    void radio_init(uint32_t access_address)
0002e4  b510              PUSH     {r4,lr}
;;;313    {
0002e6  4604              MOV      r4,r0
;;;314    	/* Reset all states in the radio peripheral */
;;;315        NRF_RADIO->POWER            = ((RADIO_POWER_POWER_Disabled << RADIO_POWER_POWER_Pos) & RADIO_POWER_POWER_Msk);
0002e8  2000              MOVS     r0,#0
0002ea  494f              LDR      r1,|L1.1064|
0002ec  63c8              STR      r0,[r1,#0x3c]
;;;316        NRF_RADIO->POWER            = ((RADIO_POWER_POWER_Enabled  << RADIO_POWER_POWER_Pos) & RADIO_POWER_POWER_Msk);
0002ee  2001              MOVS     r0,#1
0002f0  63c8              STR      r0,[r1,#0x3c]
;;;317    
;;;318    
;;;319    
;;;320        /* Set radio configuration parameters */
;;;321        NRF_RADIO->TXPOWER      = ((RADIO_TXPOWER_TXPOWER_0dBm << RADIO_TXPOWER_TXPOWER_Pos) & RADIO_TXPOWER_TXPOWER_Msk);
0002f2  2000              MOVS     r0,#0
0002f4  493e              LDR      r1,|L1.1008|
0002f6  60c8              STR      r0,[r1,#0xc]
;;;322        NRF_RADIO->MODE 	    = ((RADIO_MODE_MODE_Ble_1Mbit << RADIO_MODE_MODE_Pos) & RADIO_MODE_MODE_Msk);
0002f8  2003              MOVS     r0,#3
0002fa  6108              STR      r0,[r1,#0x10]
;;;323    
;;;324        NRF_RADIO->FREQUENCY 	    = 2;					// Frequency bin 2, 2402MHz, channel 37.
0002fc  2002              MOVS     r0,#2
0002fe  6088              STR      r0,[r1,#8]
;;;325        NRF_RADIO->DATAWHITEIV      = 37;					// NOTE: This value needs to correspond to the frequency being used
000300  2025              MOVS     r0,#0x25
000302  493b              LDR      r1,|L1.1008|
000304  3140              ADDS     r1,r1,#0x40
000306  6148              STR      r0,[r1,#0x14]
;;;326    
;;;327    
;;;328        /* Configure Access Address  */
;;;329        NRF_RADIO->PREFIX0	    = ((access_address >> 24) & 0x000000FF);
000308  0e20              LSRS     r0,r4,#24
00030a  4939              LDR      r1,|L1.1008|
00030c  6248              STR      r0,[r1,#0x24]
;;;330        NRF_RADIO->BASE0 		= ((access_address << 8) & 0xFFFFFF00);
00030e  0220              LSLS     r0,r4,#8
000310  0a00              LSRS     r0,r0,#8
000312  0200              LSLS     r0,r0,#8
000314  61c8              STR      r0,[r1,#0x1c]
;;;331        NRF_RADIO->TXADDRESS    = 0x00;			    // Use logical address 0 (prefix0 + base0) = 0x8E89BED6 when transmitting
000316  2000              MOVS     r0,#0
000318  62c8              STR      r0,[r1,#0x2c]
;;;332        NRF_RADIO->RXADDRESSES  = 0x01;				// Enable reception on logical address 0 (PREFIX0 + BASE0)
00031a  2001              MOVS     r0,#1
00031c  6308              STR      r0,[r1,#0x30]
;;;333    
;;;334        /* PCNF-> Packet Configuration. Now we need to configure the sizes S0, S1 and length field to match the datapacket format of the advertisement packets. */
;;;335        NRF_RADIO->PCNF0 =  (
00031e  4843              LDR      r0,|L1.1068|
000320  6148              STR      r0,[r1,#0x14]
;;;336                              (((1UL) << RADIO_PCNF0_S0LEN_Pos) & RADIO_PCNF0_S0LEN_Msk)    // length of S0 field in bytes 0-1.
;;;337                            | (((2UL) << RADIO_PCNF0_S1LEN_Pos) & RADIO_PCNF0_S1LEN_Msk)    // length of S1 field in bits 0-8.
;;;338                            | (((6UL) << RADIO_PCNF0_LFLEN_Pos) & RADIO_PCNF0_LFLEN_Msk)    // length of length field in bits 0-8.
;;;339                          );
;;;340    
;;;341        /* Packet configuration */
;;;342        NRF_RADIO->PCNF1 =  (
000322  4843              LDR      r0,|L1.1072|
000324  6188              STR      r0,[r1,#0x18]
;;;343                              (((37UL)                          << RADIO_PCNF1_MAXLEN_Pos)  & RADIO_PCNF1_MAXLEN_Msk)   // maximum length of payload in bytes [0-255]
;;;344                            | (((0UL)                           << RADIO_PCNF1_STATLEN_Pos) & RADIO_PCNF1_STATLEN_Msk)	// expand the payload with N bytes in addition to LENGTH [0-255]
;;;345                            | (((3UL)                           << RADIO_PCNF1_BALEN_Pos)   & RADIO_PCNF1_BALEN_Msk)    // base address length in number of bytes.
;;;346                            | (((RADIO_PCNF1_ENDIAN_Little)     << RADIO_PCNF1_ENDIAN_Pos)  & RADIO_PCNF1_ENDIAN_Msk)   // endianess of the S0, LENGTH, S1 and PAYLOAD fields.
;;;347                            | (((RADIO_PCNF1_WHITEEN_Enabled)   << RADIO_PCNF1_WHITEEN_Pos) & RADIO_PCNF1_WHITEEN_Msk)	// enable packet whitening
;;;348                          );
;;;349    
;;;350    	/* CRC config */
;;;351        NRF_RADIO->CRCPOLY = ((0x00065B << RADIO_CRCPOLY_CRCPOLY_Pos) & RADIO_CRCPOLY_CRCPOLY_Msk);    // CRC polynomial function
000326  4843              LDR      r0,|L1.1076|
000328  6388              STR      r0,[r1,#0x38]
;;;352        NRF_RADIO->CRCCNF = (((RADIO_CRCCNF_SKIPADDR_Skip) << RADIO_CRCCNF_SKIPADDR_Pos) & RADIO_CRCCNF_SKIPADDR_Msk)
00032a  20ff              MOVS     r0,#0xff
00032c  3004              ADDS     r0,#4
00032e  6348              STR      r0,[r1,#0x34]
;;;353                          | (((RADIO_CRCCNF_LEN_Three)      << RADIO_CRCCNF_LEN_Pos)       & RADIO_CRCCNF_LEN_Msk);
;;;354    
;;;355        NRF_RADIO->CRCINIT = ((0x555555 << RADIO_CRCINIT_CRCINIT_Pos) & RADIO_CRCINIT_CRCINIT_Msk);    // Initial value of CRC
000330  4841              LDR      r0,|L1.1080|
000332  63c8              STR      r0,[r1,#0x3c]
;;;356        /* Lock interframe spacing, so that the radio won't send too soon / start RX too early */
;;;357        NRF_RADIO->TIFS = 148;
000334  2094              MOVS     r0,#0x94
000336  492e              LDR      r1,|L1.1008|
000338  3140              ADDS     r1,r1,#0x40
00033a  6048              STR      r0,[r1,#4]
;;;358    
;;;359        /* init radio packet fifo */
;;;360        radio_fifo.array_len = RADIO_FIFO_QUEUE_SIZE;
00033c  2008              MOVS     r0,#8
00033e  492e              LDR      r1,|L1.1016|
000340  6088              STR      r0,[r1,#8]  ; radio_fifo
;;;361        radio_fifo.elem_array = radio_fifo_queue;
000342  483e              LDR      r0,|L1.1084|
000344  6008              STR      r0,[r1,#0]  ; radio_fifo
;;;362        radio_fifo.elem_size = sizeof(radio_event_t);
000346  2014              MOVS     r0,#0x14
000348  6048              STR      r0,[r1,#4]  ; radio_fifo
;;;363        radio_fifo.memcpy_fptr = NULL;
00034a  2000              MOVS     r0,#0
00034c  6148              STR      r0,[r1,#0x14]  ; radio_fifo
;;;364        fifo_init(&radio_fifo);
00034e  4608              MOV      r0,r1
000350  f7fffffe          BL       fifo_init
;;;365    
;;;366        rx_abort_timer_index = 0xFF;
000354  20ff              MOVS     r0,#0xff
000356  4931              LDR      r1,|L1.1052|
000358  7008              STRB     r0,[r1,#0]
;;;367        radio_state = RADIO_STATE_DISABLED;
00035a  2002              MOVS     r0,#2
00035c  492b              LDR      r1,|L1.1036|
00035e  7008              STRB     r0,[r1,#0]
;;;368        fifo_flush(&radio_fifo);
000360  4825              LDR      r0,|L1.1016|
000362  f7fffffe          BL       fifo_flush
;;;369        NVIC_ClearPendingIRQ(RADIO_IRQn);
000366  2001              MOVS     r0,#1
000368  2101              MOVS     r1,#1
00036a  4081              LSLS     r1,r1,r0
00036c  4a34              LDR      r2,|L1.1088|
00036e  6011              STR      r1,[r2,#0]
000370  bf00              NOP      
;;;370        NVIC_EnableIRQ(RADIO_IRQn);
000372  bf00              NOP      
000374  2101              MOVS     r1,#1
000376  4081              LSLS     r1,r1,r0
000378  4a32              LDR      r2,|L1.1092|
00037a  6011              STR      r1,[r2,#0]
00037c  bf00              NOP      
;;;371        DEBUG_RADIO_CLEAR_PIN(PIN_RADIO_STATE_RX);
;;;372        DEBUG_RADIO_CLEAR_PIN(PIN_RADIO_STATE_TX);
;;;373    }
00037e  bd10              POP      {r4,pc}
;;;374    
                          ENDP

                  radio_order PROC
;;;375    void radio_order(radio_event_t* radio_event)
000380  b530              PUSH     {r4,r5,lr}
;;;376    {
000382  b085              SUB      sp,sp,#0x14
000384  4604              MOV      r4,r0
;;;377        fifo_push(&radio_fifo, radio_event);
000386  4621              MOV      r1,r4
000388  481b              LDR      r0,|L1.1016|
00038a  f7fffffe          BL       fifo_push
;;;378    
;;;379        if (radio_state == RADIO_STATE_DISABLED)
00038e  481f              LDR      r0,|L1.1036|
000390  7800              LDRB     r0,[r0,#0]  ; radio_state
000392  2802              CMP      r0,#2
000394  d177              BNE      |L1.1158|
;;;380        {
;;;381            /* order radio right away */
;;;382    
;;;383            radio_channel_set(radio_event->channel);
000396  7b60              LDRB     r0,[r4,#0xd]
000398  f7fffffe          BL       radio_channel_set
;;;384    
;;;385            NRF_RADIO->SHORTS = RADIO_SHORTS_END_DISABLE_Msk;
00039c  2002              MOVS     r0,#2
00039e  4919              LDR      r1,|L1.1028|
0003a0  6008              STR      r0,[r1,#0]
;;;386    
;;;387            if (radio_event->start_time > 0)
0003a2  6860              LDR      r0,[r4,#4]
0003a4  2800              CMP      r0,#0
0003a6  d008              BEQ      |L1.954|
;;;388            {
;;;389                uint32_t curr_time = timer_get_timestamp();
0003a8  f7fffffe          BL       timer_get_timestamp
0003ac  4605              MOV      r5,r0
;;;390    
;;;391                if (radio_event->start_time < curr_time)
0003ae  6860              LDR      r0,[r4,#4]
0003b0  42a8              CMP      r0,r5
0003b2  d201              BCS      |L1.952|
;;;392                {
;;;393                    radio_event->start_time = 0;
0003b4  2000              MOVS     r0,#0
0003b6  6060              STR      r0,[r4,#4]
                  |L1.952|
;;;394                }
;;;395            }
0003b8  bf00              NOP      
                  |L1.954|
;;;396    
;;;397            if (radio_event->event_type == RADIO_EVENT_TYPE_RX)
0003ba  7820              LDRB     r0,[r4,#0]
0003bc  2801              CMP      r0,#1
0003be  d143              BNE      |L1.1096|
;;;398            {
;;;399                NRF_RADIO->PACKETPTR = (uint32_t) rx_data[current_rx_buf]; /* double pointer */
0003c0  4811              LDR      r0,|L1.1032|
0003c2  7800              LDRB     r0,[r0,#0]  ; current_rx_buf
0003c4  0080              LSLS     r0,r0,#2
0003c6  4912              LDR      r1,|L1.1040|
0003c8  5808              LDR      r0,[r1,r0]
0003ca  4909              LDR      r1,|L1.1008|
0003cc  6048              STR      r0,[r1,#4]
;;;400                NRF_RADIO->TASKS_RXEN = 1;
0003ce  2001              MOVS     r0,#1
0003d0  4911              LDR      r1,|L1.1048|
0003d2  6048              STR      r0,[r1,#4]
;;;401    
;;;402                /* if the event is not an "as soon as possible", we setup an RX timeout,
;;;403                    else the user must do it themselves */
;;;404                if (radio_event->start_time != 0)
0003d4  6860              LDR      r0,[r4,#4]
0003d6  2800              CMP      r0,#0
0003d8  d002              BEQ      |L1.992|
;;;405                {
;;;406                    setup_rx_timeout(radio_event->start_time);
0003da  6860              LDR      r0,[r4,#4]
0003dc  f7fffffe          BL       setup_rx_timeout
                  |L1.992|
;;;407                }
;;;408    
;;;409                radio_state = RADIO_STATE_RX;
0003e0  2000              MOVS     r0,#0
0003e2  490a              LDR      r1,|L1.1036|
0003e4  7008              STRB     r0,[r1,#0]
;;;410                NRF_RADIO->INTENSET = RADIO_INTENSET_ADDRESS_Msk;
0003e6  2002              MOVS     r0,#2
0003e8  490a              LDR      r1,|L1.1044|
0003ea  6048              STR      r0,[r1,#4]
0003ec  e037              B        |L1.1118|
0003ee  0000              DCW      0x0000
                  |L1.1008|
                          DCD      0x40001500
                  |L1.1012|
                          DCD      ||.constdata||
                  |L1.1016|
                          DCD      radio_fifo
                  |L1.1020|
                          DCD      0x40001100
                  |L1.1024|
                          DCD      0x40001400
                  |L1.1028|
                          DCD      0x40001200
                  |L1.1032|
                          DCD      current_rx_buf
                  |L1.1036|
                          DCD      radio_state
                  |L1.1040|
                          DCD      rx_data
                  |L1.1044|
                          DCD      0x40001300
                  |L1.1048|
                          DCD      0x40001000
                  |L1.1052|
                          DCD      rx_abort_timer_index
                  |L1.1056|
                          DCD      rx_abort_cb
                  |L1.1060|
                          DCD      0x00003ae8
                  |L1.1064|
                          DCD      0x40001fc0
                  |L1.1068|
                          DCD      0x00020106
                  |L1.1072|
                          DCD      0x02030025
                  |L1.1076|
                          DCD      0x0000065b
                  |L1.1080|
                          DCD      0x00555555
                  |L1.1084|
                          DCD      radio_fifo_queue
                  |L1.1088|
                          DCD      0xe000e280
                  |L1.1092|
                          DCD      0xe000e100
                  |L1.1096|
;;;411                DEBUG_RADIO_SET_PIN(PIN_RADIO_STATE_RX);
;;;412            }
;;;413            else
;;;414            {
;;;415                NRF_RADIO->PACKETPTR = (uint32_t) &radio_event->packet_ptr[0];
000448  4947              LDR      r1,|L1.1384|
00044a  68a0              LDR      r0,[r4,#8]
00044c  6048              STR      r0,[r1,#4]
;;;416                NRF_RADIO->INTENCLR = RADIO_INTENCLR_ADDRESS_Msk;
00044e  2002              MOVS     r0,#2
000450  4946              LDR      r1,|L1.1388|
000452  6088              STR      r0,[r1,#8]
;;;417                NRF_RADIO->TASKS_TXEN = 1;
000454  2001              MOVS     r0,#1
000456  4946              LDR      r1,|L1.1392|
000458  6008              STR      r0,[r1,#0]
;;;418                radio_state = RADIO_STATE_TX;
00045a  4946              LDR      r1,|L1.1396|
00045c  7008              STRB     r0,[r1,#0]
                  |L1.1118|
;;;419                DEBUG_RADIO_SET_PIN(PIN_RADIO_STATE_TX);
;;;420            }
;;;421    
;;;422            if (radio_event->start_time == 0)
00045e  6860              LDR      r0,[r4,#4]
000460  2800              CMP      r0,#0
000462  d106              BNE      |L1.1138|
;;;423            {
;;;424                NRF_RADIO->SHORTS |= RADIO_SHORTS_READY_START_Msk;
000464  4844              LDR      r0,|L1.1400|
000466  6800              LDR      r0,[r0,#0]
000468  2101              MOVS     r1,#1
00046a  4308              ORRS     r0,r0,r1
00046c  4942              LDR      r1,|L1.1400|
00046e  6008              STR      r0,[r1,#0]
000470  e004              B        |L1.1148|
                  |L1.1138|
;;;425            }
;;;426            else
;;;427            {
;;;428                timer_order_ppi(radio_event->start_time, (uint32_t*) &(NRF_RADIO->TASKS_START));
000472  493f              LDR      r1,|L1.1392|
000474  3108              ADDS     r1,r1,#8
000476  6860              LDR      r0,[r4,#4]
000478  f7fffffe          BL       timer_order_ppi
                  |L1.1148|
;;;429            }
;;;430    
;;;431            NRF_RADIO->INTENSET = RADIO_INTENSET_END_Msk;
00047c  2008              MOVS     r0,#8
00047e  493b              LDR      r1,|L1.1388|
000480  6048              STR      r0,[r1,#4]
000482  e02c              B        |L1.1246|
000484  e7ff              B        |L1.1158|
                  |L1.1158|
;;;432    
;;;433        }
;;;434        else
;;;435        {
;;;436            //NRF_RADIO->INTENSET = RADIO_INTENSET_END_Msk;
;;;437            /* queue the event */
;;;438    
;;;439            if (!radio_will_go_to_disabled_state())
000486  f7fffffe          BL       radio_will_go_to_disabled_state
00048a  2800              CMP      r0,#0
00048c  d127              BNE      |L1.1246|
;;;440            {
;;;441                uint8_t queue_length = fifo_get_len(&radio_fifo);
00048e  483b              LDR      r0,|L1.1404|
000490  f7fffffe          BL       fifo_get_len
000494  b2c5              UXTB     r5,r0
;;;442    
;;;443                if (queue_length == 2)
000496  2d02              CMP      r5,#2
000498  d120              BNE      |L1.1244|
;;;444                {
;;;445                    /* this event will come straight after the current */
;;;446    
;;;447                    /* get current event */
;;;448                    radio_event_t ev;
;;;449                    fifo_peek(&radio_fifo, &ev);
00049a  4669              MOV      r1,sp
00049c  4837              LDR      r0,|L1.1404|
00049e  f7fffffe          BL       fifo_peek
;;;450    
;;;451                    /* setup shorts */
;;;452                    if (ev.event_type == radio_event->event_type)
0004a2  4668              MOV      r0,sp
0004a4  7800              LDRB     r0,[r0,#0]
0004a6  7821              LDRB     r1,[r4,#0]
0004a8  4288              CMP      r0,r1
0004aa  d106              BNE      |L1.1210|
;;;453                    {
;;;454                        NRF_RADIO->SHORTS &= ~(RADIO_SHORTS_END_DISABLE_Msk);
0004ac  4832              LDR      r0,|L1.1400|
0004ae  6800              LDR      r0,[r0,#0]
0004b0  2102              MOVS     r1,#2
0004b2  4388              BICS     r0,r0,r1
0004b4  4930              LDR      r1,|L1.1400|
0004b6  6008              STR      r0,[r1,#0]
0004b8  e00f              B        |L1.1242|
                  |L1.1210|
;;;455                    }
;;;456                    else if (radio_event->event_type == RADIO_EVENT_TYPE_RX)
0004ba  7820              LDRB     r0,[r4,#0]
0004bc  2801              CMP      r0,#1
0004be  d106              BNE      |L1.1230|
;;;457                    {
;;;458                        NRF_RADIO->SHORTS |= RADIO_SHORTS_DISABLED_RXEN_Msk;
0004c0  482d              LDR      r0,|L1.1400|
0004c2  6800              LDR      r0,[r0,#0]
0004c4  2108              MOVS     r1,#8
0004c6  4308              ORRS     r0,r0,r1
0004c8  492b              LDR      r1,|L1.1400|
0004ca  6008              STR      r0,[r1,#0]
0004cc  e005              B        |L1.1242|
                  |L1.1230|
;;;459                    }
;;;460                    else /* going to TX */
;;;461                    {
;;;462                        NRF_RADIO->SHORTS |= RADIO_SHORTS_DISABLED_TXEN_Msk;
0004ce  482a              LDR      r0,|L1.1400|
0004d0  6800              LDR      r0,[r0,#0]
0004d2  2104              MOVS     r1,#4
0004d4  4308              ORRS     r0,r0,r1
0004d6  4928              LDR      r1,|L1.1400|
0004d8  6008              STR      r0,[r1,#0]
                  |L1.1242|
;;;463                    }
;;;464                }
0004da  bf00              NOP      
                  |L1.1244|
;;;465            }
0004dc  bf00              NOP      
                  |L1.1246|
;;;466        }
;;;467    }
0004de  b005              ADD      sp,sp,#0x14
0004e0  bd30              POP      {r4,r5,pc}
;;;468    
                          ENDP

                  radio_disable PROC
;;;470    
;;;471    void radio_disable(void)
0004e2  b510              PUSH     {r4,lr}
;;;472    {
;;;473        DEBUG_RADIO_CLEAR_PIN(PIN_RADIO_STATE_RX);
;;;474        DEBUG_RADIO_CLEAR_PIN(PIN_RADIO_STATE_TX);
;;;475        //fifo_flush(&radio_fifo);
;;;476        NRF_RADIO->SHORTS = 0;
0004e4  2000              MOVS     r0,#0
0004e6  4924              LDR      r1,|L1.1400|
0004e8  6008              STR      r0,[r1,#0]
;;;477        NRF_RADIO->INTENCLR = 0xFFFFFFFF;
0004ea  1e40              SUBS     r0,r0,#1
0004ec  491f              LDR      r1,|L1.1388|
0004ee  6088              STR      r0,[r1,#8]
;;;478        NRF_RADIO->TASKS_DISABLE = 1;
0004f0  2001              MOVS     r0,#1
0004f2  491f              LDR      r1,|L1.1392|
0004f4  6108              STR      r0,[r1,#0x10]
;;;479        radio_state = RADIO_STATE_DISABLED;
0004f6  2002              MOVS     r0,#2
0004f8  491e              LDR      r1,|L1.1396|
0004fa  7008              STRB     r0,[r1,#0]
;;;480        if (rx_abort_timer_index != 0xFF)
0004fc  4820              LDR      r0,|L1.1408|
0004fe  7800              LDRB     r0,[r0,#0]  ; rx_abort_timer_index
000500  28ff              CMP      r0,#0xff
000502  d003              BEQ      |L1.1292|
;;;481            timer_abort(rx_abort_timer_index);
000504  481e              LDR      r0,|L1.1408|
000506  7800              LDRB     r0,[r0,#0]  ; rx_abort_timer_index
000508  f7fffffe          BL       timer_abort
                  |L1.1292|
;;;482    }
00050c  bd10              POP      {r4,pc}
;;;483    
                          ENDP

                  radio_event_handler PROC
;;;486    */
;;;487    void radio_event_handler(void)
00050e  b510              PUSH     {r4,lr}
;;;488    {
;;;489        if (RADIO_EVENT(EVENTS_END))
000510  481c              LDR      r0,|L1.1412|
000512  68c0              LDR      r0,[r0,#0xc]
000514  2801              CMP      r0,#1
000516  d105              BNE      |L1.1316|
;;;490        {
;;;491            NRF_RADIO->EVENTS_END = 0;
000518  2000              MOVS     r0,#0
00051a  491a              LDR      r1,|L1.1412|
00051c  60c8              STR      r0,[r1,#0xc]
;;;492            radio_transition_end(true);
00051e  2001              MOVS     r0,#1
000520  f7fffffe          BL       radio_transition_end
                  |L1.1316|
;;;493        }
;;;494        switch (radio_state)
000524  4813              LDR      r0,|L1.1396|
000526  7800              LDRB     r0,[r0,#0]  ; radio_state
000528  2800              CMP      r0,#0
00052a  d004              BEQ      |L1.1334|
00052c  2801              CMP      r0,#1
00052e  d00f              BEQ      |L1.1360|
000530  2802              CMP      r0,#2
000532  d10f              BNE      |L1.1364|
000534  e00d              B        |L1.1362|
                  |L1.1334|
;;;495        {
;;;496            case RADIO_STATE_RX:
;;;497                if (RADIO_EVENT(EVENTS_ADDRESS) && rx_abort_timer_index != 0xFF)
000536  4813              LDR      r0,|L1.1412|
000538  6840              LDR      r0,[r0,#4]
00053a  2801              CMP      r0,#1
00053c  d107              BNE      |L1.1358|
00053e  4810              LDR      r0,|L1.1408|
000540  7800              LDRB     r0,[r0,#0]  ; rx_abort_timer_index
000542  28ff              CMP      r0,#0xff
000544  d003              BEQ      |L1.1358|
;;;498                {
;;;499                    timer_abort(rx_abort_timer_index);
000546  480e              LDR      r0,|L1.1408|
000548  7800              LDRB     r0,[r0,#0]  ; rx_abort_timer_index
00054a  f7fffffe          BL       timer_abort
                  |L1.1358|
;;;500                }
;;;501    
;;;502            case RADIO_STATE_TX:
00054e  bf00              NOP      
                  |L1.1360|
;;;503    
;;;504    
;;;505                break;
000550  e000              B        |L1.1364|
                  |L1.1362|
;;;506    
;;;507            case RADIO_STATE_DISABLED:
;;;508    
;;;509                break;
000552  bf00              NOP      
                  |L1.1364|
000554  bf00              NOP                            ;505
;;;510        }
;;;511    
;;;512        NRF_RADIO->EVENTS_READY = 0;
000556  2000              MOVS     r0,#0
000558  490a              LDR      r1,|L1.1412|
00055a  6008              STR      r0,[r1,#0]
;;;513        NRF_RADIO->EVENTS_ADDRESS = 0;
00055c  6048              STR      r0,[r1,#4]
;;;514        NRF_RADIO->EVENTS_PAYLOAD = 0;
00055e  6088              STR      r0,[r1,#8]
;;;515        NRF_RADIO->EVENTS_END = 0;
000560  60c8              STR      r0,[r1,#0xc]
;;;516        NRF_RADIO->EVENTS_DISABLED = 0;
000562  6108              STR      r0,[r1,#0x10]
;;;517    
;;;518    
;;;519    }
000564  bd10              POP      {r4,pc}
                          ENDP

000566  0000              DCW      0x0000
                  |L1.1384|
                          DCD      0x40001500
                  |L1.1388|
                          DCD      0x40001300
                  |L1.1392|
                          DCD      0x40001000
                  |L1.1396|
                          DCD      radio_state
                  |L1.1400|
                          DCD      0x40001200
                  |L1.1404|
                          DCD      radio_fifo
                  |L1.1408|
                          DCD      rx_abort_timer_index
                  |L1.1412|
                          DCD      0x40001100

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  rx_data_buf
                          %        512
                  radio_fifo
                          %        24
                  radio_fifo_queue
                          %        160

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                          DCD      0x00000002
                          DCD      0x0000001a
                          DCD      0x00000050

                          AREA ||.data||, DATA, ALIGN=2

                  radio_state
000000  00000000          DCB      0x00,0x00,0x00,0x00
                  rx_data
                          DCD      rx_data_buf
                          DCD      rx_data_buf+0x100
                  current_rx_buf
00000c  00                DCB      0x00
                  rx_abort_timer_index
00000d  00                DCB      0x00

;*** Start embedded assembler ***

#line 1 "..\\..\\..\\rbc_mesh\\src\\radio_control.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___15_radio_control_c_b470d1be____REV16|
#line 129 "..\\..\\..\\..\\..\\..\\components\\toolchain\\gcc\\core_cmInstr.h"
|__asm___15_radio_control_c_b470d1be____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___15_radio_control_c_b470d1be____REVSH|
#line 144
|__asm___15_radio_control_c_b470d1be____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
