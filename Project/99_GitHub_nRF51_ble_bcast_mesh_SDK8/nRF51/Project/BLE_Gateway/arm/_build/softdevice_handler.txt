; generated by Component: ARM Compiler 5.04 update 1 (build 49) Tool: ArmCC [5040049]
; commandline ArmCC [--c99 --list --debug -c --asm --interleave -o.\_build\softdevice_handler.o --asm_dir=.\_build\ --list_dir=.\_build\ --depend=.\_build\softdevice_handler.d --cpu=Cortex-M0 --apcs=interwork -O0 -I..\include -I..\..\..\rbc_mesh -I..\..\..\rbc_mesh\include -I..\..\..\SDK\bsp -I..\..\..\..\..\..\components\softdevice\s110\headers -I..\..\..\..\..\..\components\toolchain\gcc -I..\..\..\..\..\..\components\libraries\util -I..\..\..\..\..\..\components\ble\common -I..\..\..\..\..\..\components\drivers_nrf\hal -I..\..\..\..\..\..\components\drivers_nrf\spi_slave -I..\..\..\..\..\..\components\softdevice\common\softdevice_handler -I..\..\..\..\..\..\components\libraries\fifo -I..\..\..\..\..\..\components\drivers_nrf\uart -I..\..\..\..\..\..\components\drivers_nrf\gpiote -I..\..\..\..\..\..\components\drivers_nrf\config -I..\..\..\..\..\..\components\drivers_nrf\common -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\4.1.0\CMSIS\Include -IC:\Keil_v5\ARM\PACK\NordicSemiconductor\nRF_DeviceFamilyPack\7.2.1\Device\Include -D__MICROLIB -DNRF51 -DBOARD_RHC -DNRF51 -DBLE_STACK_SUPPORT_REQD -DS110 -DSOFTDEVICE_PRESENT --omf_browse=.\_build\softdevice_handler.crf ..\..\..\..\..\..\components\softdevice\common\softdevice_handler\softdevice_handler.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  softdevice_assertion_handler PROC
;;;58      */
;;;59     void softdevice_assertion_handler(uint32_t pc, uint16_t line_num, const uint8_t * file_name)
000000  b570              PUSH     {r4-r6,lr}
;;;60     {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
000006  4615              MOV      r5,r2
;;;61         UNUSED_PARAMETER(pc);
;;;62         assert_nrf_callback(line_num, file_name);
000008  4629              MOV      r1,r5
00000a  4620              MOV      r0,r4
00000c  f7fffffe          BL       assert_nrf_callback
;;;63     }
000010  bd70              POP      {r4-r6,pc}
;;;64     
                          ENDP

                  intern_softdevice_events_execute PROC
;;;65     
;;;66     void intern_softdevice_events_execute(void)
000012  b5f8              PUSH     {r3-r7,lr}
;;;67     {
;;;68         if (!m_softdevice_enabled)
000014  4859              LDR      r0,|L1.380|
000016  7800              LDRB     r0,[r0,#0]  ; m_softdevice_enabled
000018  2800              CMP      r0,#0
00001a  d100              BNE      |L1.30|
                  |L1.28|
;;;69         {
;;;70             // SoftDevice not enabled. This can be possible if the SoftDevice was enabled by the
;;;71             // application without using this module's API (i.e softdevice_handler_init)
;;;72     
;;;73             return;
;;;74         }
;;;75     
;;;76         bool no_more_soc_evts = (m_sys_evt_handler == NULL);
;;;77     #ifdef BLE_STACK_SUPPORT_REQD
;;;78         bool no_more_ble_evts = (m_ble_evt_handler == NULL);
;;;79     #endif
;;;80     #ifdef ANT_STACK_SUPPORT_REQD
;;;81         bool no_more_ant_evts = (m_ant_evt_handler == NULL);
;;;82     #endif
;;;83     
;;;84         for (;;)
;;;85         {
;;;86             uint32_t err_code;
;;;87     
;;;88             if (!no_more_soc_evts)
;;;89             {
;;;90                 uint32_t evt_id;
;;;91     
;;;92                 // Pull event from SOC.
;;;93                 err_code = sd_evt_get(&evt_id);
;;;94                 
;;;95                 if (err_code == NRF_ERROR_NOT_FOUND)
;;;96                 {
;;;97                     no_more_soc_evts = true;
;;;98                 }
;;;99                 else if (err_code != NRF_SUCCESS)
;;;100                {
;;;101                    APP_ERROR_HANDLER(err_code);
;;;102                }
;;;103                else
;;;104                {
;;;105                    // Call application's SOC event handler.
;;;106                    m_sys_evt_handler(evt_id);
;;;107                }
;;;108            }
;;;109    
;;;110    #ifdef BLE_STACK_SUPPORT_REQD
;;;111            // Fetch BLE Events.
;;;112            if (!no_more_ble_evts)
;;;113            {
;;;114                // Pull event from stack
;;;115                uint16_t evt_len = m_ble_evt_buffer_size;
;;;116    
;;;117                err_code = sd_ble_evt_get(mp_ble_evt_buffer, &evt_len);
;;;118                if (err_code == NRF_ERROR_NOT_FOUND)
;;;119                {
;;;120                    no_more_ble_evts = true;
;;;121                }
;;;122                else if (err_code != NRF_SUCCESS)
;;;123                {
;;;124                    APP_ERROR_HANDLER(err_code);
;;;125                }
;;;126                else
;;;127                {
;;;128                    // Call application's BLE stack event handler.
;;;129                    m_ble_evt_handler((ble_evt_t *)mp_ble_evt_buffer);
;;;130                }
;;;131            }
;;;132    #endif
;;;133    
;;;134    #ifdef ANT_STACK_SUPPORT_REQD
;;;135            // Fetch ANT Events.
;;;136            if (!no_more_ant_evts)
;;;137            {
;;;138                // Pull event from stack
;;;139                err_code = sd_ant_event_get(&m_ant_evt_buffer.channel,
;;;140                                            &m_ant_evt_buffer.event,
;;;141                                            m_ant_evt_buffer.evt_buffer);
;;;142                if (err_code == NRF_ERROR_NOT_FOUND)
;;;143                {
;;;144                    no_more_ant_evts = true;
;;;145                }
;;;146                else if (err_code != NRF_SUCCESS)
;;;147                {
;;;148                    APP_ERROR_HANDLER(err_code);
;;;149                }
;;;150                else
;;;151                {
;;;152                    // Call application's ANT stack event handler.
;;;153                    m_ant_evt_handler(&m_ant_evt_buffer);
;;;154                }
;;;155            }
;;;156    #endif
;;;157    
;;;158            if (no_more_soc_evts)
;;;159            {
;;;160                // There are no remaining System (SOC) events to be fetched from the SoftDevice.
;;;161    #if defined(ANT_STACK_SUPPORT_REQD) && defined(BLE_STACK_SUPPORT_REQD)
;;;162                // Check if there are any remaining BLE and ANT events.
;;;163                if (no_more_ble_evts && no_more_ant_evts)
;;;164                {
;;;165                    break;
;;;166                }
;;;167    #elif defined(BLE_STACK_SUPPORT_REQD)
;;;168                // Check if there are any remaining BLE events.
;;;169                if (no_more_ble_evts)
;;;170                {
;;;171                    break;
;;;172                }
;;;173    #elif defined(ANT_STACK_SUPPORT_REQD)
;;;174                // Check if there are any remaining ANT events.
;;;175                if (no_more_ant_evts)
;;;176                {
;;;177                    break;
;;;178                }
;;;179    #else
;;;180                // No need to check for BLE or ANT events since there is no support for BLE and ANT
;;;181                // required.
;;;182                break;
;;;183    #endif
;;;184            }
;;;185        }
;;;186    }
00001c  bdf8              POP      {r3-r7,pc}
                  |L1.30|
00001e  4858              LDR      r0,|L1.384|
000020  6800              LDR      r0,[r0,#0]            ;76  ; m_sys_evt_handler
000022  2800              CMP      r0,#0                 ;76
000024  d101              BNE      |L1.42|
000026  2001              MOVS     r0,#1                 ;76
000028  e000              B        |L1.44|
                  |L1.42|
00002a  2000              MOVS     r0,#0                 ;76
                  |L1.44|
00002c  4605              MOV      r5,r0                 ;76
00002e  4855              LDR      r0,|L1.388|
000030  6800              LDR      r0,[r0,#0]            ;78  ; m_ble_evt_handler
000032  2800              CMP      r0,#0                 ;78
000034  d101              BNE      |L1.58|
000036  2001              MOVS     r0,#1                 ;78
000038  e000              B        |L1.60|
                  |L1.58|
00003a  2000              MOVS     r0,#0                 ;78
                  |L1.60|
00003c  4606              MOV      r6,r0                 ;78
00003e  bf00              NOP                            ;84
                  |L1.64|
000040  2d00              CMP      r5,#0                 ;88
000042  d114              BNE      |L1.110|
000044  4668              MOV      r0,sp                 ;93
000046  df51              SVC      #0x51                 ;93
000048  4604              MOV      r4,r0                 ;93
00004a  2c05              CMP      r4,#5                 ;95
00004c  d101              BNE      |L1.82|
00004e  2501              MOVS     r5,#1                 ;97
000050  e00c              B        |L1.108|
                  |L1.82|
000052  2c00              CMP      r4,#0                 ;99
000054  d006              BEQ      |L1.100|
000056  bf00              NOP                            ;101
000058  2200              MOVS     r2,#0                 ;101
00005a  4611              MOV      r1,r2                 ;101
00005c  4620              MOV      r0,r4                 ;101
00005e  f7fffffe          BL       app_error_handler
000062  e003              B        |L1.108|
                  |L1.100|
000064  4946              LDR      r1,|L1.384|
000066  9800              LDR      r0,[sp,#0]            ;106
000068  6809              LDR      r1,[r1,#0]            ;106  ; m_sys_evt_handler
00006a  4788              BLX      r1                    ;106
                  |L1.108|
00006c  bf00              NOP                            ;108
                  |L1.110|
00006e  2e00              CMP      r6,#0                 ;112
000070  d11a              BNE      |L1.168|
000072  4845              LDR      r0,|L1.392|
000074  8800              LDRH     r0,[r0,#0]            ;115  ; m_ble_evt_buffer_size
000076  9000              STR      r0,[sp,#0]            ;115
000078  4669              MOV      r1,sp                 ;117
00007a  4844              LDR      r0,|L1.396|
00007c  6800              LDR      r0,[r0,#0]            ;117  ; mp_ble_evt_buffer
00007e  df61              SVC      #0x61                 ;117
000080  4604              MOV      r4,r0                 ;117
000082  2c05              CMP      r4,#5                 ;118
000084  d101              BNE      |L1.138|
000086  2601              MOVS     r6,#1                 ;120
000088  e00d              B        |L1.166|
                  |L1.138|
00008a  2c00              CMP      r4,#0                 ;122
00008c  d006              BEQ      |L1.156|
00008e  bf00              NOP                            ;124
000090  2200              MOVS     r2,#0                 ;124
000092  4611              MOV      r1,r2                 ;124
000094  4620              MOV      r0,r4                 ;124
000096  f7fffffe          BL       app_error_handler
00009a  e004              B        |L1.166|
                  |L1.156|
00009c  483b              LDR      r0,|L1.396|
00009e  6800              LDR      r0,[r0,#0]            ;129  ; mp_ble_evt_buffer
0000a0  4938              LDR      r1,|L1.388|
0000a2  6809              LDR      r1,[r1,#0]            ;129  ; m_ble_evt_handler
0000a4  4788              BLX      r1                    ;129
                  |L1.166|
0000a6  bf00              NOP                            ;131
                  |L1.168|
0000a8  2d00              CMP      r5,#0                 ;158
0000aa  d002              BEQ      |L1.178|
0000ac  2e00              CMP      r6,#0                 ;169
0000ae  d000              BEQ      |L1.178|
0000b0  e000              B        |L1.180|
                  |L1.178|
0000b2  e7c5              B        |L1.64|
                  |L1.180|
0000b4  bf00              NOP                            ;171
0000b6  bf00              NOP      
0000b8  e7b0              B        |L1.28|
;;;187    
                          ENDP

                  softdevice_handler_init PROC
;;;188    
;;;189    uint32_t softdevice_handler_init(nrf_clock_lfclksrc_t           clock_source,
0000ba  b5ff              PUSH     {r0-r7,lr}
;;;190                                     void *                         p_ble_evt_buffer,
;;;191                                     uint16_t                       ble_evt_buffer_size,
;;;192                                     softdevice_evt_schedule_func_t evt_schedule_func)
;;;193    {
0000bc  b081              SUB      sp,sp,#4
0000be  460c              MOV      r4,r1
0000c0  4616              MOV      r6,r2
0000c2  461f              MOV      r7,r3
;;;194        uint32_t err_code;
;;;195    
;;;196        // Save configuration.
;;;197    #if defined (BLE_STACK_SUPPORT_REQD)
;;;198        // Check that buffer is not NULL.
;;;199        if (p_ble_evt_buffer == NULL)
0000c4  2c00              CMP      r4,#0
0000c6  d102              BNE      |L1.206|
;;;200        {
;;;201            return NRF_ERROR_INVALID_PARAM;
0000c8  2007              MOVS     r0,#7
                  |L1.202|
;;;202        }
;;;203        
;;;204        // Check that buffer is correctly aligned.
;;;205        if (!is_word_aligned(p_ble_evt_buffer))
;;;206        {
;;;207            return NRF_ERROR_INVALID_PARAM;
;;;208        }
;;;209    
;;;210        mp_ble_evt_buffer     = (uint8_t *)p_ble_evt_buffer;
;;;211        m_ble_evt_buffer_size = ble_evt_buffer_size;
;;;212    #else
;;;213        // The variables p_ble_evt_buffer and ble_evt_buffer_size is not needed if BLE Stack support
;;;214        // is not required.
;;;215        UNUSED_PARAMETER(p_ble_evt_buffer);
;;;216        UNUSED_PARAMETER(ble_evt_buffer_size);
;;;217    #endif
;;;218    
;;;219        m_evt_schedule_func = evt_schedule_func;
;;;220    
;;;221        // Initialize SoftDevice.
;;;222        err_code = sd_softdevice_enable(clock_source, softdevice_assertion_handler);
;;;223        if (err_code != NRF_SUCCESS)
;;;224        {
;;;225            return err_code;
;;;226        }
;;;227    
;;;228        m_softdevice_enabled = true;
;;;229    
;;;230        // Enable BLE event interrupt (interrupt priority has already been set by the stack).
;;;231        return sd_nvic_EnableIRQ(SWI2_IRQn);
;;;232    }
0000ca  b005              ADD      sp,sp,#0x14
0000cc  bdf0              POP      {r4-r7,pc}
                  |L1.206|
0000ce  4620              MOV      r0,r4                 ;205
0000d0  0781              LSLS     r1,r0,#30             ;205
0000d2  0f89              LSRS     r1,r1,#30             ;205
0000d4  2900              CMP      r1,#0                 ;205
0000d6  d101              BNE      |L1.220|
0000d8  2101              MOVS     r1,#1                 ;205
0000da  e000              B        |L1.222|
                  |L1.220|
0000dc  2100              MOVS     r1,#0                 ;205
                  |L1.222|
0000de  2900              CMP      r1,#0                 ;205
0000e0  d101              BNE      |L1.230|
0000e2  2007              MOVS     r0,#7                 ;207
0000e4  e7f1              B        |L1.202|
                  |L1.230|
0000e6  4829              LDR      r0,|L1.396|
0000e8  6004              STR      r4,[r0,#0]            ;210  ; mp_ble_evt_buffer
0000ea  4827              LDR      r0,|L1.392|
0000ec  8006              STRH     r6,[r0,#0]            ;211
0000ee  4828              LDR      r0,|L1.400|
0000f0  6007              STR      r7,[r0,#0]            ;219  ; m_evt_schedule_func
0000f2  4928              LDR      r1,|L1.404|
0000f4  9801              LDR      r0,[sp,#4]            ;222
0000f6  df10              SVC      #0x10                 ;222
0000f8  4605              MOV      r5,r0                 ;222
0000fa  2d00              CMP      r5,#0                 ;223
0000fc  d001              BEQ      |L1.258|
0000fe  4628              MOV      r0,r5                 ;225
000100  e7e3              B        |L1.202|
                  |L1.258|
000102  2001              MOVS     r0,#1                 ;228
000104  491d              LDR      r1,|L1.380|
000106  7008              STRB     r0,[r1,#0]            ;228
000108  2016              MOVS     r0,#0x16              ;231
00010a  df2e              SVC      #0x2e                 ;231
00010c  e7dd              B        |L1.202|
;;;233    
                          ENDP

                  softdevice_handler_sd_disable PROC
;;;234    
;;;235    uint32_t softdevice_handler_sd_disable(void)
00010e  b510              PUSH     {r4,lr}
;;;236    {
;;;237        uint32_t err_code = sd_softdevice_disable();
000110  df11              SVC      #0x11
000112  4604              MOV      r4,r0
;;;238     
;;;239        m_softdevice_enabled = !(err_code == NRF_SUCCESS);
000114  2c00              CMP      r4,#0
000116  d001              BEQ      |L1.284|
000118  2001              MOVS     r0,#1
00011a  e000              B        |L1.286|
                  |L1.284|
00011c  2000              MOVS     r0,#0
                  |L1.286|
00011e  4917              LDR      r1,|L1.380|
000120  7008              STRB     r0,[r1,#0]
;;;240    
;;;241        return err_code;
000122  4620              MOV      r0,r4
;;;242    }
000124  bd10              POP      {r4,pc}
;;;243    
                          ENDP

                  softdevice_ble_evt_handler_set PROC
;;;245    #ifdef BLE_STACK_SUPPORT_REQD
;;;246    uint32_t softdevice_ble_evt_handler_set(ble_evt_handler_t ble_evt_handler)
000126  4601              MOV      r1,r0
;;;247    {
;;;248        if (ble_evt_handler == NULL)
000128  2900              CMP      r1,#0
00012a  d101              BNE      |L1.304|
;;;249        {
;;;250            return NRF_ERROR_NULL;
00012c  200e              MOVS     r0,#0xe
                  |L1.302|
;;;251        }
;;;252    
;;;253        m_ble_evt_handler = ble_evt_handler;
;;;254    
;;;255        return NRF_SUCCESS;
;;;256    }
00012e  4770              BX       lr
                  |L1.304|
000130  4814              LDR      r0,|L1.388|
000132  6001              STR      r1,[r0,#0]            ;253  ; m_ble_evt_handler
000134  2000              MOVS     r0,#0                 ;255
000136  e7fa              B        |L1.302|
;;;257    #endif
                          ENDP

                  softdevice_sys_evt_handler_set PROC
;;;274    
;;;275    uint32_t softdevice_sys_evt_handler_set(sys_evt_handler_t sys_evt_handler)
000138  4601              MOV      r1,r0
;;;276    {
;;;277        if (sys_evt_handler == NULL)
00013a  2900              CMP      r1,#0
00013c  d101              BNE      |L1.322|
;;;278        {
;;;279            return NRF_ERROR_NULL;
00013e  200e              MOVS     r0,#0xe
                  |L1.320|
;;;280        }
;;;281    
;;;282        m_sys_evt_handler = sys_evt_handler;
;;;283    
;;;284        return NRF_SUCCESS;
;;;285    }
000140  4770              BX       lr
                  |L1.322|
000142  480f              LDR      r0,|L1.384|
000144  6001              STR      r1,[r0,#0]            ;282  ; m_sys_evt_handler
000146  2000              MOVS     r0,#0                 ;284
000148  e7fa              B        |L1.320|
;;;286    
                          ENDP

                  SWI2_IRQHandler PROC
;;;291     */
;;;292    void SWI2_IRQHandler(void)
00014a  b570              PUSH     {r4-r6,lr}
;;;293    {
;;;294        if (m_evt_schedule_func != NULL)
00014c  4810              LDR      r0,|L1.400|
00014e  6800              LDR      r0,[r0,#0]  ; m_evt_schedule_func
000150  2800              CMP      r0,#0
000152  d010              BEQ      |L1.374|
;;;295        {
;;;296            uint32_t err_code = m_evt_schedule_func();
000154  480e              LDR      r0,|L1.400|
000156  6800              LDR      r0,[r0,#0]  ; m_evt_schedule_func
000158  4780              BLX      r0
00015a  4604              MOV      r4,r0
;;;297            APP_ERROR_CHECK(err_code);
00015c  bf00              NOP      
00015e  4625              MOV      r5,r4
000160  2d00              CMP      r5,#0
000162  d006              BEQ      |L1.370|
000164  bf00              NOP      
000166  2200              MOVS     r2,#0
000168  4611              MOV      r1,r2
00016a  4628              MOV      r0,r5
00016c  f7fffffe          BL       app_error_handler
000170  bf00              NOP      
                  |L1.370|
000172  bf00              NOP      
;;;298        }
000174  e001              B        |L1.378|
                  |L1.374|
;;;299        else
;;;300        {
;;;301            intern_softdevice_events_execute();
000176  f7fffffe          BL       intern_softdevice_events_execute
                  |L1.378|
;;;302        }
;;;303    }
00017a  bd70              POP      {r4-r6,pc}
                          ENDP

                  |L1.380|
                          DCD      m_softdevice_enabled
                  |L1.384|
                          DCD      m_sys_evt_handler
                  |L1.388|
                          DCD      m_ble_evt_handler
                  |L1.392|
                          DCD      m_ble_evt_buffer_size
                  |L1.396|
                          DCD      mp_ble_evt_buffer
                  |L1.400|
                          DCD      m_evt_schedule_func
                  |L1.404|
                          DCD      softdevice_assertion_handler

                          AREA ||.data||, DATA, ALIGN=2

                  m_evt_schedule_func
                          DCD      0x00000000
                  m_softdevice_enabled
000004  00000000          DCB      0x00,0x00,0x00,0x00
                  mp_ble_evt_buffer
                          DCD      0x00000000
                  m_ble_evt_buffer_size
00000c  00000000          DCB      0x00,0x00,0x00,0x00
                  m_ble_evt_handler
                          DCD      0x00000000
                  m_sys_evt_handler
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "..\\..\\..\\..\\..\\..\\components\\softdevice\\common\\softdevice_handler\\softdevice_handler.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___20_softdevice_handler_c_370b0038____REV16|
#line 129 "..\\..\\..\\..\\..\\..\\components\\toolchain\\gcc\\core_cmInstr.h"
|__asm___20_softdevice_handler_c_370b0038____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___20_softdevice_handler_c_370b0038____REVSH|
#line 144
|__asm___20_softdevice_handler_c_370b0038____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
