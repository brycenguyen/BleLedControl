; generated by Component: ARM Compiler 5.04 update 1 (build 49) Tool: ArmCC [5040049]
; commandline ArmCC [--c99 --list --debug -c --asm --interleave -o.\_build\timer_control.o --asm_dir=.\_build\ --list_dir=.\_build\ --depend=.\_build\timer_control.d --cpu=Cortex-M0 --apcs=interwork -O0 -I..\include -I..\..\..\rbc_mesh -I..\..\..\rbc_mesh\include -I..\..\..\SDK\bsp -I..\..\..\..\..\..\components\softdevice\s110\headers -I..\..\..\..\..\..\components\toolchain\gcc -I..\..\..\..\..\..\components\libraries\util -I..\..\..\..\..\..\components\ble\common -I..\..\..\..\..\..\components\drivers_nrf\hal -I..\..\..\..\..\..\components\drivers_nrf\spi_slave -I..\..\..\..\..\..\components\softdevice\common\softdevice_handler -I..\..\..\..\..\..\components\libraries\fifo -I..\..\..\..\..\..\components\drivers_nrf\uart -I..\..\..\..\..\..\components\drivers_nrf\gpiote -I..\..\..\..\..\..\components\drivers_nrf\config -I..\..\..\..\..\..\components\drivers_nrf\common -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\4.1.0\CMSIS\Include -IC:\Keil_v5\ARM\PACK\NordicSemiconductor\nRF_DeviceFamilyPack\7.2.1\Device\Include -D__MICROLIB -DNRF51 -DBOARD_RHC -DNRF51 -DBLE_STACK_SUPPORT_REQD -DS110 -DSOFTDEVICE_PRESENT --omf_browse=.\_build\timer_control.crf ..\..\..\rbc_mesh\src\timer_control.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  get_available_timer PROC
;;;73     /** @brief cycle through timer slots to find one that is available */
;;;74     static uint8_t get_available_timer(void)
000000  2000              MOVS     r0,#0
;;;75     {
;;;76         for (uint8_t i = 0; i < 4; ++i)
000002  e026              B        |L1.82|
                  |L1.4|
;;;77         {
;;;78             if (NRF_TIMER0->EVENTS_COMPARE[i] == 1 || (never_used_bitmap & (1 << i)))
000004  49fe              LDR      r1,|L1.1024|
000006  0082              LSLS     r2,r0,#2
000008  5889              LDR      r1,[r1,r2]
00000a  2901              CMP      r1,#1
00000c  d006              BEQ      |L1.28|
00000e  2101              MOVS     r1,#1
000010  4081              LSLS     r1,r1,r0
000012  4afc              LDR      r2,|L1.1028|
000014  7812              LDRB     r2,[r2,#0]  ; never_used_bitmap
000016  4011              ANDS     r1,r1,r2
000018  2900              CMP      r1,#0
00001a  d018              BEQ      |L1.78|
                  |L1.28|
;;;79             {
;;;80                 /* wipe out all information that may cause misfire */
;;;81                 never_used_bitmap &= ~(1 << i);
00001c  2101              MOVS     r1,#1
00001e  4081              LSLS     r1,r1,r0
000020  4af8              LDR      r2,|L1.1028|
000022  7812              LDRB     r2,[r2,#0]  ; never_used_bitmap
000024  438a              BICS     r2,r2,r1
000026  49f7              LDR      r1,|L1.1028|
000028  700a              STRB     r2,[r1,#0]
;;;82                 NRF_PPI->CHENCLR = (1 << (TIMER_PPI_CH_START + i));
00002a  4601              MOV      r1,r0
00002c  3108              ADDS     r1,r1,#8
00002e  2201              MOVS     r2,#1
000030  408a              LSLS     r2,r2,r1
000032  49f5              LDR      r1,|L1.1032|
000034  608a              STR      r2,[r1,#8]
;;;83                 active_callbacks &= ~(1 << i);
000036  2101              MOVS     r1,#1
000038  4081              LSLS     r1,r1,r0
00003a  4af4              LDR      r2,|L1.1036|
00003c  7812              LDRB     r2,[r2,#0]  ; active_callbacks
00003e  438a              BICS     r2,r2,r1
000040  49f2              LDR      r1,|L1.1036|
000042  700a              STRB     r2,[r1,#0]
;;;84                 NRF_TIMER0->EVENTS_COMPARE[i] = 0;
000044  2200              MOVS     r2,#0
000046  49ee              LDR      r1,|L1.1024|
000048  0083              LSLS     r3,r0,#2
00004a  50ca              STR      r2,[r1,r3]
                  |L1.76|
;;;85                 return i;
;;;86             }
;;;87         }
;;;88     
;;;89         return 0xFF;
;;;90     }
00004c  4770              BX       lr
                  |L1.78|
00004e  1c41              ADDS     r1,r0,#1              ;76
000050  b2c8              UXTB     r0,r1                 ;76
                  |L1.82|
000052  2804              CMP      r0,#4                 ;76
000054  dbd6              BLT      |L1.4|
000056  20ff              MOVS     r0,#0xff              ;89
000058  e7f8              B        |L1.76|
;;;91     
                          ENDP

                  timer_event_handler PROC
;;;97     
;;;98     void timer_event_handler(void)
00005a  b570              PUSH     {r4-r6,lr}
;;;99     {
00005c  b08c              SUB      sp,sp,#0x30
;;;100        /* check if this is about the reference time */
;;;101        if (reference_channel != 0xFF && NRF_TIMER0->EVENTS_COMPARE[reference_channel])
00005e  48ec              LDR      r0,|L1.1040|
000060  7800              LDRB     r0,[r0,#0]  ; reference_channel
000062  28ff              CMP      r0,#0xff
000064  d02d              BEQ      |L1.194|
000066  48e6              LDR      r0,|L1.1024|
000068  49e9              LDR      r1,|L1.1040|
00006a  7809              LDRB     r1,[r1,#0]  ; reference_channel
00006c  0089              LSLS     r1,r1,#2
00006e  5840              LDR      r0,[r0,r1]
000070  2800              CMP      r0,#0
000072  d026              BEQ      |L1.194|
;;;102        {
;;;103            NRF_TIMER0->EVENTS_COMPARE[reference_channel] = 0;
000074  2100              MOVS     r1,#0
000076  48e2              LDR      r0,|L1.1024|
000078  4ae5              LDR      r2,|L1.1040|
00007a  7812              LDRB     r2,[r2,#0]  ; reference_channel
00007c  0092              LSLS     r2,r2,#2
00007e  5081              STR      r1,[r0,r2]
;;;104            reference_point = NRF_TIMER0->CC[reference_channel] + reference_offset;
000080  48e4              LDR      r0,|L1.1044|
000082  2115              MOVS     r1,#0x15
000084  0189              LSLS     r1,r1,#6
000086  1840              ADDS     r0,r0,r1
000088  49e1              LDR      r1,|L1.1040|
00008a  7809              LDRB     r1,[r1,#0]  ; reference_channel
00008c  0089              LSLS     r1,r1,#2
00008e  5840              LDR      r0,[r0,r1]
000090  49e1              LDR      r1,|L1.1048|
000092  6809              LDR      r1,[r1,#0]  ; reference_offset
000094  1840              ADDS     r0,r0,r1
000096  49e1              LDR      r1,|L1.1052|
000098  6008              STR      r0,[r1,#0]  ; reference_point
;;;105            NRF_TIMER0->INTENCLR = (1 << (TIMER_INTENCLR_COMPARE0_Pos + reference_channel));
00009a  48dd              LDR      r0,|L1.1040|
00009c  7800              LDRB     r0,[r0,#0]  ; reference_channel
00009e  3010              ADDS     r0,r0,#0x10
0000a0  2101              MOVS     r1,#1
0000a2  4081              LSLS     r1,r1,r0
0000a4  48de              LDR      r0,|L1.1056|
0000a6  6081              STR      r1,[r0,#8]
;;;106            NRF_PPI->CHENCLR  = (1 << (TIMER_PPI_CH_START + reference_channel));
0000a8  48d9              LDR      r0,|L1.1040|
0000aa  7800              LDRB     r0,[r0,#0]  ; reference_channel
0000ac  3008              ADDS     r0,r0,#8
0000ae  2101              MOVS     r1,#1
0000b0  4081              LSLS     r1,r1,r0
0000b2  48d5              LDR      r0,|L1.1032|
0000b4  6081              STR      r1,[r0,#8]
;;;107    
;;;108            reference_channel = 0xFF;
0000b6  20ff              MOVS     r0,#0xff
0000b8  49d5              LDR      r1,|L1.1040|
0000ba  7008              STRB     r0,[r1,#0]
;;;109            reference_offset = 0;
0000bc  2000              MOVS     r0,#0
0000be  49d6              LDR      r1,|L1.1048|
0000c0  6008              STR      r0,[r1,#0]  ; reference_offset
                  |L1.194|
;;;110        }
;;;111    
;;;112        for (uint8_t i = 0; i < 4; ++i)
0000c2  2400              MOVS     r4,#0
0000c4  e048              B        |L1.344|
                  |L1.198|
;;;113        {
;;;114            if ((active_callbacks & (1 << i)) && NRF_TIMER0->EVENTS_COMPARE[i])
0000c6  2001              MOVS     r0,#1
0000c8  40a0              LSLS     r0,r0,r4
0000ca  49d0              LDR      r1,|L1.1036|
0000cc  7809              LDRB     r1,[r1,#0]  ; active_callbacks
0000ce  4008              ANDS     r0,r0,r1
0000d0  2800              CMP      r0,#0
0000d2  d03f              BEQ      |L1.340|
0000d4  48ca              LDR      r0,|L1.1024|
0000d6  00a1              LSLS     r1,r4,#2
0000d8  5840              LDR      r0,[r0,r1]
0000da  2800              CMP      r0,#0
0000dc  d03a              BEQ      |L1.340|
;;;115            {
;;;116                timer_callback cb = callbacks[i];
0000de  00a0              LSLS     r0,r4,#2
0000e0  49d0              LDR      r1,|L1.1060|
0000e2  580d              LDR      r5,[r1,r0]
;;;117                active_callbacks &= ~(1 << i);
0000e4  2001              MOVS     r0,#1
0000e6  40a0              LSLS     r0,r0,r4
0000e8  49c8              LDR      r1,|L1.1036|
0000ea  7809              LDRB     r1,[r1,#0]  ; active_callbacks
0000ec  4381              BICS     r1,r1,r0
0000ee  48c7              LDR      r0,|L1.1036|
0000f0  7001              STRB     r1,[r0,#0]
;;;118                NRF_TIMER0->INTENCLR = (1 << (TIMER_INTENCLR_COMPARE0_Pos + i));
0000f2  4620              MOV      r0,r4
0000f4  3010              ADDS     r0,r0,#0x10
0000f6  2101              MOVS     r1,#1
0000f8  4081              LSLS     r1,r1,r0
0000fa  48c9              LDR      r0,|L1.1056|
0000fc  6081              STR      r1,[r0,#8]
;;;119    
;;;120    
;;;121                CHECK_FP(cb);
0000fe  2003              MOVS     r0,#3
000100  03c0              LSLS     r0,r0,#15
000102  4285              CMP      r5,r0
000104  d303              BCC      |L1.270|
000106  2001              MOVS     r0,#1
000108  0740              LSLS     r0,r0,#29
00010a  4285              CMP      r5,r0
00010c  d909              BLS      |L1.290|
                  |L1.270|
00010e  bf00              NOP      
000110  2610              MOVS     r6,#0x10
000112  bf00              NOP      
000114  2200              MOVS     r2,#0
000116  4611              MOV      r1,r2
000118  2010              MOVS     r0,#0x10
00011a  f7fffffe          BL       app_error_handler
00011e  bf00              NOP      
000120  bf00              NOP      
                  |L1.290|
;;;122    
;;;123                if (sync_exec_bitmap & (1 << i))
000122  2001              MOVS     r0,#1
000124  40a0              LSLS     r0,r0,r4
000126  49c0              LDR      r1,|L1.1064|
000128  7809              LDRB     r1,[r1,#0]  ; sync_exec_bitmap
00012a  4008              ANDS     r0,r0,r1
00012c  2800              CMP      r0,#0
00012e  d008              BEQ      |L1.322|
;;;124                {
;;;125                    sync_exec_bitmap &= ~(1 << i);
000130  2001              MOVS     r0,#1
000132  40a0              LSLS     r0,r0,r4
000134  49bc              LDR      r1,|L1.1064|
000136  7809              LDRB     r1,[r1,#0]  ; sync_exec_bitmap
000138  4381              BICS     r1,r1,r0
00013a  48bb              LDR      r0,|L1.1064|
00013c  7001              STRB     r1,[r0,#0]
;;;126                    (*cb)();
00013e  47a8              BLX      r5
000140  e007              B        |L1.338|
                  |L1.322|
;;;127                }
;;;128                else
;;;129                {
;;;130                    /* propagate evt */
;;;131                    async_event_t evt;
;;;132                    evt.type = EVENT_TYPE_TIMER;
000142  2000              MOVS     r0,#0
000144  4669              MOV      r1,sp
000146  7008              STRB     r0,[r1,#0]
;;;133                    evt.callback.timer = cb;
000148  9501              STR      r5,[sp,#4]
;;;134                    event_handler_push(&evt);
00014a  4668              MOV      r0,sp
00014c  f7fffffe          BL       event_handler_push
;;;135                }
000150  bf00              NOP      
                  |L1.338|
;;;136            }
000152  bf00              NOP      
                  |L1.340|
000154  1c60              ADDS     r0,r4,#1              ;112
000156  b2c4              UXTB     r4,r0                 ;112
                  |L1.344|
000158  2c04              CMP      r4,#4                 ;112
00015a  dbb4              BLT      |L1.198|
;;;137        }
;;;138    
;;;139    }
00015c  b00c              ADD      sp,sp,#0x30
00015e  bd70              POP      {r4-r6,pc}
;;;140    
                          ENDP

                  timer_order_cb PROC
;;;141    uint8_t timer_order_cb(uint32_t time, timer_callback callback)
000160  b5f8              PUSH     {r3-r7,lr}
;;;142    {
000162  4605              MOV      r5,r0
000164  460e              MOV      r6,r1
;;;143        uint8_t timer = get_available_timer();
000166  f7fffffe          BL       get_available_timer
00016a  4604              MOV      r4,r0
;;;144    
;;;145        if (timer == 0xFF)
00016c  2cff              CMP      r4,#0xff
00016e  d109              BNE      |L1.388|
;;;146        {
;;;147            APP_ERROR_CHECK(NRF_ERROR_NO_MEM);
000170  bf00              NOP      
000172  2704              MOVS     r7,#4
000174  bf00              NOP      
000176  2200              MOVS     r2,#0
000178  4611              MOV      r1,r2
00017a  2004              MOVS     r0,#4
00017c  f7fffffe          BL       app_error_handler
000180  bf00              NOP      
000182  bf00              NOP      
                  |L1.388|
;;;148        }
;;;149    
;;;150        NRF_TIMER0->CC[timer] = reference_point + time;
000184  48a5              LDR      r0,|L1.1052|
000186  6800              LDR      r0,[r0,#0]  ; reference_point
000188  1940              ADDS     r0,r0,r5
00018a  49a2              LDR      r1,|L1.1044|
00018c  2215              MOVS     r2,#0x15
00018e  0192              LSLS     r2,r2,#6
000190  1889              ADDS     r1,r1,r2
000192  00a2              LSLS     r2,r4,#2
000194  5088              STR      r0,[r1,r2]
;;;151        NRF_TIMER0->EVENTS_COMPARE[timer] = 0;
000196  2100              MOVS     r1,#0
000198  4899              LDR      r0,|L1.1024|
00019a  00a2              LSLS     r2,r4,#2
00019c  5081              STR      r1,[r0,r2]
;;;152        NRF_TIMER0->INTENSET  = (1 << (TIMER_INTENSET_COMPARE0_Pos + timer));
00019e  4620              MOV      r0,r4
0001a0  3010              ADDS     r0,r0,#0x10
0001a2  2101              MOVS     r1,#1
0001a4  4081              LSLS     r1,r1,r0
0001a6  489e              LDR      r0,|L1.1056|
0001a8  6041              STR      r1,[r0,#4]
;;;153        callbacks[timer] = callback;
0001aa  00a0              LSLS     r0,r4,#2
0001ac  499d              LDR      r1,|L1.1060|
0001ae  500e              STR      r6,[r1,r0]
;;;154        active_callbacks |= (1 << timer);
0001b0  2001              MOVS     r0,#1
0001b2  40a0              LSLS     r0,r0,r4
0001b4  4995              LDR      r1,|L1.1036|
0001b6  7809              LDRB     r1,[r1,#0]  ; active_callbacks
0001b8  4308              ORRS     r0,r0,r1
0001ba  4994              LDR      r1,|L1.1036|
0001bc  7008              STRB     r0,[r1,#0]
;;;155    
;;;156    
;;;157        return timer;
0001be  4620              MOV      r0,r4
;;;158    }
0001c0  bdf8              POP      {r3-r7,pc}
;;;159    
                          ENDP

                  timer_order_cb_sync_exec PROC
;;;160    uint8_t timer_order_cb_sync_exec(uint32_t time, timer_callback callback)
0001c2  b5f8              PUSH     {r3-r7,lr}
;;;161    {
0001c4  4605              MOV      r5,r0
0001c6  460e              MOV      r6,r1
;;;162        /* just calling timer_order_cb and setting flag here creates a race condition,
;;;163            needs full impl.*/
;;;164        uint8_t timer = get_available_timer();
0001c8  f7fffffe          BL       get_available_timer
0001cc  4604              MOV      r4,r0
;;;165    
;;;166        if (timer == 0xFF)
0001ce  2cff              CMP      r4,#0xff
0001d0  d109              BNE      |L1.486|
;;;167        {
;;;168            APP_ERROR_CHECK(NRF_ERROR_NO_MEM);
0001d2  bf00              NOP      
0001d4  2704              MOVS     r7,#4
0001d6  bf00              NOP      
0001d8  2200              MOVS     r2,#0
0001da  4611              MOV      r1,r2
0001dc  2004              MOVS     r0,#4
0001de  f7fffffe          BL       app_error_handler
0001e2  bf00              NOP      
0001e4  bf00              NOP      
                  |L1.486|
;;;169        }
;;;170    
;;;171        sync_exec_bitmap |= (1 << timer);
0001e6  2001              MOVS     r0,#1
0001e8  40a0              LSLS     r0,r0,r4
0001ea  498f              LDR      r1,|L1.1064|
0001ec  7809              LDRB     r1,[r1,#0]  ; sync_exec_bitmap
0001ee  4308              ORRS     r0,r0,r1
0001f0  498d              LDR      r1,|L1.1064|
0001f2  7008              STRB     r0,[r1,#0]
;;;172    
;;;173        NRF_TIMER0->CC[timer] = reference_point + time;
0001f4  4889              LDR      r0,|L1.1052|
0001f6  6800              LDR      r0,[r0,#0]  ; reference_point
0001f8  1940              ADDS     r0,r0,r5
0001fa  4986              LDR      r1,|L1.1044|
0001fc  2215              MOVS     r2,#0x15
0001fe  0192              LSLS     r2,r2,#6
000200  1889              ADDS     r1,r1,r2
000202  00a2              LSLS     r2,r4,#2
000204  5088              STR      r0,[r1,r2]
;;;174        NRF_TIMER0->EVENTS_COMPARE[timer] = 0;
000206  2100              MOVS     r1,#0
000208  487d              LDR      r0,|L1.1024|
00020a  00a2              LSLS     r2,r4,#2
00020c  5081              STR      r1,[r0,r2]
;;;175        NRF_TIMER0->INTENSET  = (1 << (TIMER_INTENSET_COMPARE0_Pos + timer));
00020e  4620              MOV      r0,r4
000210  3010              ADDS     r0,r0,#0x10
000212  2101              MOVS     r1,#1
000214  4081              LSLS     r1,r1,r0
000216  4882              LDR      r0,|L1.1056|
000218  6041              STR      r1,[r0,#4]
;;;176        callbacks[timer] = callback;
00021a  00a0              LSLS     r0,r4,#2
00021c  4981              LDR      r1,|L1.1060|
00021e  500e              STR      r6,[r1,r0]
;;;177        active_callbacks |= (1 << timer);
000220  2001              MOVS     r0,#1
000222  40a0              LSLS     r0,r0,r4
000224  4979              LDR      r1,|L1.1036|
000226  7809              LDRB     r1,[r1,#0]  ; active_callbacks
000228  4308              ORRS     r0,r0,r1
00022a  4978              LDR      r1,|L1.1036|
00022c  7008              STRB     r0,[r1,#0]
;;;178    
;;;179    
;;;180        return timer;
00022e  4620              MOV      r0,r4
;;;181    }
000230  bdf8              POP      {r3-r7,pc}
;;;182    
                          ENDP

                  timer_order_cb_ppi PROC
;;;183    uint8_t timer_order_cb_ppi(uint32_t time, timer_callback callback, uint32_t* task)
000232  b5f8              PUSH     {r3-r7,lr}
;;;184    {
000234  4605              MOV      r5,r0
000236  460e              MOV      r6,r1
000238  4617              MOV      r7,r2
;;;185        uint8_t timer = get_available_timer();
00023a  f7fffffe          BL       get_available_timer
00023e  4604              MOV      r4,r0
;;;186    
;;;187        if (time == 0xFF)
000240  2dff              CMP      r5,#0xff
000242  d109              BNE      |L1.600|
;;;188        {
;;;189            APP_ERROR_CHECK(NRF_ERROR_NO_MEM);
000244  bf00              NOP      
000246  2004              MOVS     r0,#4
000248  9000              STR      r0,[sp,#0]
00024a  bf00              NOP      
00024c  2200              MOVS     r2,#0
00024e  4611              MOV      r1,r2
000250  f7fffffe          BL       app_error_handler
000254  bf00              NOP      
000256  bf00              NOP      
                  |L1.600|
;;;190        }
;;;191        NRF_TIMER0->EVENTS_COMPARE[timer] = 0;
000258  2100              MOVS     r1,#0
00025a  4869              LDR      r0,|L1.1024|
00025c  00a2              LSLS     r2,r4,#2
00025e  5081              STR      r1,[r0,r2]
;;;192        NRF_TIMER0->INTENCLR = (1 << (TIMER_INTENCLR_COMPARE0_Pos + timer));
000260  4620              MOV      r0,r4
000262  3010              ADDS     r0,r0,#0x10
000264  2101              MOVS     r1,#1
000266  4081              LSLS     r1,r1,r0
000268  486d              LDR      r0,|L1.1056|
00026a  6081              STR      r1,[r0,#8]
;;;193        NRF_TIMER0->CC[timer] = reference_point + time;
00026c  486b              LDR      r0,|L1.1052|
00026e  6800              LDR      r0,[r0,#0]  ; reference_point
000270  1940              ADDS     r0,r0,r5
000272  4968              LDR      r1,|L1.1044|
000274  2215              MOVS     r2,#0x15
000276  0192              LSLS     r2,r2,#6
000278  1889              ADDS     r1,r1,r2
00027a  00a2              LSLS     r2,r4,#2
00027c  5088              STR      r0,[r1,r2]
;;;194    
;;;195        NRF_TIMER0->INTENSET = (1 << (TIMER_INTENSET_COMPARE0_Pos + timer));
00027e  4620              MOV      r0,r4
000280  3010              ADDS     r0,r0,#0x10
000282  2101              MOVS     r1,#1
000284  4081              LSLS     r1,r1,r0
000286  4866              LDR      r0,|L1.1056|
000288  6041              STR      r1,[r0,#4]
;;;196        callbacks[timer] = callback;
00028a  00a0              LSLS     r0,r4,#2
00028c  4965              LDR      r1,|L1.1060|
00028e  500e              STR      r6,[r1,r0]
;;;197        active_callbacks |= (1 << timer);
000290  2001              MOVS     r0,#1
000292  40a0              LSLS     r0,r0,r4
000294  495d              LDR      r1,|L1.1036|
000296  7809              LDRB     r1,[r1,#0]  ; active_callbacks
000298  4308              ORRS     r0,r0,r1
00029a  495c              LDR      r1,|L1.1036|
00029c  7008              STRB     r0,[r1,#0]
;;;198    
;;;199        /* Setup PPI */
;;;200        NRF_PPI->CH[TIMER_PPI_CH_START + timer].EEP   = (uint32_t) &(NRF_TIMER0->EVENTS_COMPARE[timer]);
00029e  4858              LDR      r0,|L1.1024|
0002a0  00a1              LSLS     r1,r4,#2
0002a2  1841              ADDS     r1,r0,r1
0002a4  4861              LDR      r0,|L1.1068|
0002a6  2251              MOVS     r2,#0x51
0002a8  0112              LSLS     r2,r2,#4
0002aa  1882              ADDS     r2,r0,r2
0002ac  4620              MOV      r0,r4
0002ae  3008              ADDS     r0,r0,#8
0002b0  00c0              LSLS     r0,r0,#3
0002b2  5011              STR      r1,[r2,r0]
;;;201    	NRF_PPI->CH[TIMER_PPI_CH_START + timer].TEP   = (uint32_t) task;
0002b4  485d              LDR      r0,|L1.1068|
0002b6  2151              MOVS     r1,#0x51
0002b8  0109              LSLS     r1,r1,#4
0002ba  1841              ADDS     r1,r0,r1
0002bc  4620              MOV      r0,r4
0002be  3008              ADDS     r0,r0,#8
0002c0  00c0              LSLS     r0,r0,#3
0002c2  1808              ADDS     r0,r1,r0
0002c4  6047              STR      r7,[r0,#4]
;;;202    	NRF_PPI->CHENSET 			                  = (1 << (TIMER_PPI_CH_START + timer));
0002c6  4620              MOV      r0,r4
0002c8  3008              ADDS     r0,r0,#8
0002ca  2101              MOVS     r1,#1
0002cc  4081              LSLS     r1,r1,r0
0002ce  484e              LDR      r0,|L1.1032|
0002d0  6041              STR      r1,[r0,#4]
;;;203    
;;;204    
;;;205        return timer;
0002d2  4620              MOV      r0,r4
;;;206    }
0002d4  bdf8              POP      {r3-r7,pc}
;;;207    
                          ENDP

                  timer_order_ppi PROC
;;;208    uint8_t timer_order_ppi(uint32_t time, uint32_t* task)
0002d6  b5f8              PUSH     {r3-r7,lr}
;;;209    {
0002d8  4605              MOV      r5,r0
0002da  460e              MOV      r6,r1
;;;210        uint8_t timer = get_available_timer();
0002dc  f7fffffe          BL       get_available_timer
0002e0  4604              MOV      r4,r0
;;;211    
;;;212        if (time == 0xFF)
0002e2  2dff              CMP      r5,#0xff
0002e4  d109              BNE      |L1.762|
;;;213        {
;;;214            APP_ERROR_CHECK(NRF_ERROR_NO_MEM);
0002e6  bf00              NOP      
0002e8  2704              MOVS     r7,#4
0002ea  bf00              NOP      
0002ec  2200              MOVS     r2,#0
0002ee  4611              MOV      r1,r2
0002f0  2004              MOVS     r0,#4
0002f2  f7fffffe          BL       app_error_handler
0002f6  bf00              NOP      
0002f8  bf00              NOP      
                  |L1.762|
;;;215        }
;;;216    
;;;217        NRF_TIMER0->EVENTS_COMPARE[timer] = 0;
0002fa  2100              MOVS     r1,#0
0002fc  4840              LDR      r0,|L1.1024|
0002fe  00a2              LSLS     r2,r4,#2
000300  5081              STR      r1,[r0,r2]
;;;218        NRF_TIMER0->INTENCLR = (1 << (TIMER_INTENCLR_COMPARE0_Pos + timer));
000302  4620              MOV      r0,r4
000304  3010              ADDS     r0,r0,#0x10
000306  2101              MOVS     r1,#1
000308  4081              LSLS     r1,r1,r0
00030a  4845              LDR      r0,|L1.1056|
00030c  6081              STR      r1,[r0,#8]
;;;219        NRF_TIMER0->CC[timer] = reference_point + time;
00030e  4843              LDR      r0,|L1.1052|
000310  6800              LDR      r0,[r0,#0]  ; reference_point
000312  1940              ADDS     r0,r0,r5
000314  493f              LDR      r1,|L1.1044|
000316  2215              MOVS     r2,#0x15
000318  0192              LSLS     r2,r2,#6
00031a  1889              ADDS     r1,r1,r2
00031c  00a2              LSLS     r2,r4,#2
00031e  5088              STR      r0,[r1,r2]
;;;220    
;;;221        /* Setup PPI */
;;;222        NRF_PPI->CH[TIMER_PPI_CH_START + timer].EEP   = (uint32_t) &(NRF_TIMER0->EVENTS_COMPARE[timer]);
000320  4837              LDR      r0,|L1.1024|
000322  00a1              LSLS     r1,r4,#2
000324  1841              ADDS     r1,r0,r1
000326  4841              LDR      r0,|L1.1068|
000328  2251              MOVS     r2,#0x51
00032a  0112              LSLS     r2,r2,#4
00032c  1882              ADDS     r2,r0,r2
00032e  4620              MOV      r0,r4
000330  3008              ADDS     r0,r0,#8
000332  00c0              LSLS     r0,r0,#3
000334  5011              STR      r1,[r2,r0]
;;;223    	NRF_PPI->CH[TIMER_PPI_CH_START + timer].TEP   = (uint32_t) task;
000336  483d              LDR      r0,|L1.1068|
000338  2151              MOVS     r1,#0x51
00033a  0109              LSLS     r1,r1,#4
00033c  1841              ADDS     r1,r0,r1
00033e  4620              MOV      r0,r4
000340  3008              ADDS     r0,r0,#8
000342  00c0              LSLS     r0,r0,#3
000344  1808              ADDS     r0,r1,r0
000346  6046              STR      r6,[r0,#4]
;;;224    	NRF_PPI->CHENSET 			                  = (1 << (TIMER_PPI_CH_START + timer));
000348  4620              MOV      r0,r4
00034a  3008              ADDS     r0,r0,#8
00034c  2101              MOVS     r1,#1
00034e  4081              LSLS     r1,r1,r0
000350  482d              LDR      r0,|L1.1032|
000352  6041              STR      r1,[r0,#4]
;;;225    
;;;226        return timer;
000354  4620              MOV      r0,r4
;;;227    }
000356  bdf8              POP      {r3-r7,pc}
;;;228    
                          ENDP

                  timer_abort PROC
;;;229    void timer_abort(uint8_t timer_index)
000358  2804              CMP      r0,#4
;;;230    {
;;;231        if (timer_index < 4)
00035a  da19              BGE      |L1.912|
;;;232        {
;;;233            NRF_TIMER0->INTENCLR = (1 << (TIMER_INTENCLR_COMPARE0_Pos + timer_index));
00035c  4601              MOV      r1,r0
00035e  3110              ADDS     r1,r1,#0x10
000360  2201              MOVS     r2,#1
000362  408a              LSLS     r2,r2,r1
000364  492e              LDR      r1,|L1.1056|
000366  608a              STR      r2,[r1,#8]
;;;234            active_callbacks &= ~(1 << timer_index);
000368  2101              MOVS     r1,#1
00036a  4081              LSLS     r1,r1,r0
00036c  4a27              LDR      r2,|L1.1036|
00036e  7812              LDRB     r2,[r2,#0]  ; active_callbacks
000370  438a              BICS     r2,r2,r1
000372  4926              LDR      r1,|L1.1036|
000374  700a              STRB     r2,[r1,#0]
;;;235            NRF_PPI->CHENCLR = (1 << (TIMER_PPI_CH_START + timer_index));
000376  4601              MOV      r1,r0
000378  3108              ADDS     r1,r1,#8
00037a  2201              MOVS     r2,#1
00037c  408a              LSLS     r2,r2,r1
00037e  4922              LDR      r1,|L1.1032|
000380  608a              STR      r2,[r1,#8]
;;;236            never_used_bitmap |= (1 << timer_index);
000382  2101              MOVS     r1,#1
000384  4081              LSLS     r1,r1,r0
000386  4a1f              LDR      r2,|L1.1028|
000388  7812              LDRB     r2,[r2,#0]  ; never_used_bitmap
00038a  4311              ORRS     r1,r1,r2
00038c  4a1d              LDR      r2,|L1.1028|
00038e  7011              STRB     r1,[r2,#0]
                  |L1.912|
;;;237        }
;;;238    }
000390  4770              BX       lr
;;;239    
                          ENDP

                  timer_get_timestamp PROC
;;;240    uint32_t timer_get_timestamp(void)
000392  b570              PUSH     {r4-r6,lr}
;;;241    {
;;;242        uint8_t timer = get_available_timer();
000394  f7fffffe          BL       get_available_timer
000398  4604              MOV      r4,r0
;;;243    
;;;244        if (timer == 0xFF)
00039a  2cff              CMP      r4,#0xff
00039c  d109              BNE      |L1.946|
;;;245        {
;;;246            APP_ERROR_CHECK(NRF_ERROR_NO_MEM);
00039e  bf00              NOP      
0003a0  2604              MOVS     r6,#4
0003a2  bf00              NOP      
0003a4  2200              MOVS     r2,#0
0003a6  4611              MOV      r1,r2
0003a8  2004              MOVS     r0,#4
0003aa  f7fffffe          BL       app_error_handler
0003ae  bf00              NOP      
0003b0  bf00              NOP      
                  |L1.946|
;;;247        }
;;;248    
;;;249        NRF_TIMER0->TASKS_CAPTURE[timer] = 1;
0003b2  2101              MOVS     r1,#1
0003b4  4817              LDR      r0,|L1.1044|
0003b6  3040              ADDS     r0,r0,#0x40
0003b8  00a2              LSLS     r2,r4,#2
0003ba  5081              STR      r1,[r0,r2]
;;;250    
;;;251    
;;;252        uint32_t stamp = NRF_TIMER0->CC[timer];
0003bc  00a0              LSLS     r0,r4,#2
0003be  491c              LDR      r1,|L1.1072|
0003c0  1840              ADDS     r0,r0,r1
0003c2  6c05              LDR      r5,[r0,#0x40]
;;;253    
;;;254        never_used_bitmap |= (1 << timer);
0003c4  2001              MOVS     r0,#1
0003c6  40a0              LSLS     r0,r0,r4
0003c8  490e              LDR      r1,|L1.1028|
0003ca  7809              LDRB     r1,[r1,#0]  ; never_used_bitmap
0003cc  4308              ORRS     r0,r0,r1
0003ce  490d              LDR      r1,|L1.1028|
0003d0  7008              STRB     r0,[r1,#0]
;;;255    
;;;256        return stamp;
0003d2  4628              MOV      r0,r5
;;;257    }
0003d4  bd70              POP      {r4-r6,pc}
;;;258    
                          ENDP

                  timer_reference_point_trigger PROC
;;;259    void timer_reference_point_trigger(uint32_t* trigger_event, int32_t time_offset)
0003d6  b5f8              PUSH     {r3-r7,lr}
;;;260    {
0003d8  4605              MOV      r5,r0
0003da  460e              MOV      r6,r1
;;;261        uint8_t timer = get_available_timer();
0003dc  f7fffffe          BL       get_available_timer
0003e0  4604              MOV      r4,r0
;;;262        if (timer == 0xFF)
0003e2  2cff              CMP      r4,#0xff
0003e4  d109              BNE      |L1.1018|
;;;263        {
;;;264            APP_ERROR_CHECK(NRF_ERROR_NO_MEM);
0003e6  bf00              NOP      
0003e8  2704              MOVS     r7,#4
0003ea  bf00              NOP      
0003ec  2200              MOVS     r2,#0
0003ee  4611              MOV      r1,r2
0003f0  2004              MOVS     r0,#4
0003f2  f7fffffe          BL       app_error_handler
0003f6  bf00              NOP      
0003f8  bf00              NOP      
                  |L1.1018|
;;;265        }
;;;266    
;;;267        reference_channel = timer;
0003fa  4805              LDR      r0,|L1.1040|
0003fc  7004              STRB     r4,[r0,#0]
;;;268        reference_offset = time_offset;
0003fe  e019              B        |L1.1076|
                  |L1.1024|
                          DCD      0x40008140
                  |L1.1028|
                          DCD      never_used_bitmap
                  |L1.1032|
                          DCD      0x4001f500
                  |L1.1036|
                          DCD      active_callbacks
                  |L1.1040|
                          DCD      reference_channel
                  |L1.1044|
                          DCD      0x40008000
                  |L1.1048|
                          DCD      reference_offset
                  |L1.1052|
                          DCD      reference_point
                  |L1.1056|
                          DCD      0x40008300
                  |L1.1060|
                          DCD      callbacks
                  |L1.1064|
                          DCD      sync_exec_bitmap
                  |L1.1068|
                          DCD      0x4001f000
                  |L1.1072|
                          DCD      0x40008500
                  |L1.1076|
000434  4820              LDR      r0,|L1.1208|
000436  6006              STR      r6,[r0,#0]  ; reference_offset
;;;269    
;;;270        NRF_TIMER0->EVENTS_COMPARE[timer] = 0;
000438  2100              MOVS     r1,#0
00043a  4820              LDR      r0,|L1.1212|
00043c  00a2              LSLS     r2,r4,#2
00043e  5081              STR      r1,[r0,r2]
;;;271        NRF_TIMER0->INTENSET = (1 << (TIMER_INTENSET_COMPARE0_Pos + timer));
000440  4620              MOV      r0,r4
000442  3010              ADDS     r0,r0,#0x10
000444  2101              MOVS     r1,#1
000446  4081              LSLS     r1,r1,r0
000448  481d              LDR      r0,|L1.1216|
00044a  6041              STR      r1,[r0,#4]
;;;272    
;;;273        /* Setup PPI */
;;;274    	NRF_PPI->CH[timer].EEP   = (uint32_t) trigger_event;
00044c  481d              LDR      r0,|L1.1220|
00044e  2151              MOVS     r1,#0x51
000450  0109              LSLS     r1,r1,#4
000452  1840              ADDS     r0,r0,r1
000454  00e1              LSLS     r1,r4,#3
000456  5045              STR      r5,[r0,r1]
;;;275        NRF_PPI->CH[timer].TEP   = (uint32_t) &(NRF_TIMER0->TASKS_CAPTURE[timer]);
000458  481b              LDR      r0,|L1.1224|
00045a  00a1              LSLS     r1,r4,#2
00045c  1840              ADDS     r0,r0,r1
00045e  4919              LDR      r1,|L1.1220|
000460  2251              MOVS     r2,#0x51
000462  0112              LSLS     r2,r2,#4
000464  1889              ADDS     r1,r1,r2
000466  00e2              LSLS     r2,r4,#3
000468  1889              ADDS     r1,r1,r2
00046a  6048              STR      r0,[r1,#4]
;;;276    	NRF_PPI->CHENSET 		 = (1 << (TIMER_PPI_CH_START + timer));
00046c  4620              MOV      r0,r4
00046e  3008              ADDS     r0,r0,#8
000470  2101              MOVS     r1,#1
000472  4081              LSLS     r1,r1,r0
000474  4815              LDR      r0,|L1.1228|
000476  6041              STR      r1,[r0,#4]
;;;277    }
000478  bdf8              POP      {r3-r7,pc}
;;;278    
                          ENDP

                  timer_get_reference_point PROC
;;;279    uint32_t timer_get_reference_point(void)
00047a  4815              LDR      r0,|L1.1232|
;;;280    {
;;;281        return reference_point;
00047c  6800              LDR      r0,[r0,#0]  ; reference_point
;;;282    }
00047e  4770              BX       lr
;;;283    
                          ENDP

                  timer_reference_point_set PROC
;;;284    void timer_reference_point_set(uint32_t ref_point)
000480  4913              LDR      r1,|L1.1232|
;;;285    {
;;;286        reference_point = ref_point;
000482  6008              STR      r0,[r1,#0]  ; reference_point
;;;287    }
000484  4770              BX       lr
;;;288    
                          ENDP

                  timer_init PROC
;;;289    void timer_init(void)
000486  b500              PUSH     {lr}
;;;290    {
;;;291        timer_reference_point_set(0);
000488  2000              MOVS     r0,#0
00048a  f7fffffe          BL       timer_reference_point_set
;;;292        never_used_bitmap = 0xFF;
00048e  20ff              MOVS     r0,#0xff
000490  4910              LDR      r1,|L1.1236|
000492  7008              STRB     r0,[r1,#0]
;;;293        NRF_TIMER0->EVENTS_COMPARE[0] = 0;
000494  2000              MOVS     r0,#0
000496  4909              LDR      r1,|L1.1212|
000498  6008              STR      r0,[r1,#0]
;;;294        NRF_TIMER0->EVENTS_COMPARE[1] = 0;
00049a  2100              MOVS     r1,#0
00049c  4807              LDR      r0,|L1.1212|
00049e  6041              STR      r1,[r0,#4]
;;;295        NRF_TIMER0->EVENTS_COMPARE[2] = 0;
0004a0  6081              STR      r1,[r0,#8]
;;;296        NRF_TIMER0->EVENTS_COMPARE[3] = 0;
0004a2  60c1              STR      r1,[r0,#0xc]
;;;297        NVIC_EnableIRQ(TIMER0_IRQn);
0004a4  2008              MOVS     r0,#8
0004a6  2101              MOVS     r1,#1
0004a8  4081              LSLS     r1,r1,r0
0004aa  4a0b              LDR      r2,|L1.1240|
0004ac  6011              STR      r1,[r2,#0]
0004ae  bf00              NOP      
;;;298    
;;;299        active_callbacks = 0;
0004b0  2000              MOVS     r0,#0
0004b2  490a              LDR      r1,|L1.1244|
0004b4  7008              STRB     r0,[r1,#0]
;;;300    }
0004b6  bd00              POP      {pc}
                          ENDP

                  |L1.1208|
                          DCD      reference_offset
                  |L1.1212|
                          DCD      0x40008140
                  |L1.1216|
                          DCD      0x40008300
                  |L1.1220|
                          DCD      0x4001f000
                  |L1.1224|
                          DCD      0x40008040
                  |L1.1228|
                          DCD      0x4001f500
                  |L1.1232|
                          DCD      reference_point
                  |L1.1236|
                          DCD      never_used_bitmap
                  |L1.1240|
                          DCD      0xe000e100
                  |L1.1244|
                          DCD      active_callbacks

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  callbacks
                          %        16

                          AREA ||.data||, DATA, ALIGN=2

                  active_callbacks
000000  00                DCB      0x00
                  reference_channel
000001  ff                DCB      0xff
                  never_used_bitmap
000002  ff                DCB      0xff
                  sync_exec_bitmap
000003  00                DCB      0x00
                  reference_offset
                          DCD      0x00000000
                  reference_point
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "..\\..\\..\\rbc_mesh\\src\\timer_control.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___15_timer_control_c_b0d4ff3d____REV16|
#line 129 "..\\..\\..\\..\\..\\..\\components\\toolchain\\gcc\\core_cmInstr.h"
|__asm___15_timer_control_c_b0d4ff3d____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___15_timer_control_c_b0d4ff3d____REVSH|
#line 144
|__asm___15_timer_control_c_b0d4ff3d____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
