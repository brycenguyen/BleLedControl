; generated by Component: ARM Compiler 5.04 update 1 (build 49) Tool: ArmCC [5040049]
; commandline ArmCC [--c99 --list --debug -c --asm --interleave -o.\_build\transport_control.o --asm_dir=.\_build\ --list_dir=.\_build\ --depend=.\_build\transport_control.d --cpu=Cortex-M0 --apcs=interwork -O0 -I..\include -I..\..\..\rbc_mesh -I..\..\..\rbc_mesh\include -I..\..\..\SDK\bsp -I..\..\..\..\..\..\components\softdevice\s110\headers -I..\..\..\..\..\..\components\toolchain\gcc -I..\..\..\..\..\..\components\libraries\util -I..\..\..\..\..\..\components\ble\common -I..\..\..\..\..\..\components\drivers_nrf\hal -I..\..\..\..\..\..\components\drivers_nrf\spi_slave -I..\..\..\..\..\..\components\softdevice\common\softdevice_handler -I..\..\..\..\..\..\components\libraries\fifo -I..\..\..\..\..\..\components\drivers_nrf\uart -I..\..\..\..\..\..\components\drivers_nrf\gpiote -I..\..\..\..\..\..\components\drivers_nrf\config -I..\..\..\..\..\..\components\drivers_nrf\common -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\4.1.0\CMSIS\Include -IC:\Keil_v5\ARM\PACK\NordicSemiconductor\nRF_DeviceFamilyPack\7.2.1\Device\Include -D__MICROLIB -DNRF51 -DBOARD_RHC -DNRF51 -DBLE_STACK_SUPPORT_REQD -DS110 -DSOFTDEVICE_PRESENT --omf_browse=.\_build\transport_control.crf ..\..\..\rbc_mesh\src\transport_control.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  search_callback PROC
;;;156    */
;;;157    static void search_callback(uint8_t* data)
000000  b5f0              PUSH     {r4-r7,lr}
;;;158    {
000002  b08d              SUB      sp,sp,#0x34
000004  4604              MOV      r4,r0
;;;159        SET_PIN(PIN_RX);
;;;160    
;;;161        uint32_t checksum = (NRF_RADIO->RXCRC & 0x00FFFFFF);
000006  48b0              LDR      r0,|L1.712|
000008  68c0              LDR      r0,[r0,#0xc]
00000a  0207              LSLS     r7,r0,#8
00000c  0a3f              LSRS     r7,r7,#8
;;;162    
;;;163        /* check if timeslot is about to end */
;;;164        uint64_t radio_time_left = timeslot_get_remaining_time();
00000e  f7fffffe          BL       timeslot_get_remaining_time
000012  2600              MOVS     r6,#0
000014  4605              MOV      r5,r0
;;;165    
;;;166        if (radio_time_left > RADIO_SAFETY_TIMING_US)
000016  21ff              MOVS     r1,#0xff
000018  31f5              ADDS     r1,r1,#0xf5
00001a  2000              MOVS     r0,#0
00001c  1b49              SUBS     r1,r1,r5
00001e  41b0              SBCS     r0,r0,r6
000020  d201              BCS      |L1.38|
;;;167        {
;;;168            /* setup next RX */
;;;169            order_search();
000022  f7fffffe          BL       order_search
                  |L1.38|
;;;170        }
;;;171    
;;;172        CLEAR_PIN(PIN_RX);
;;;173    
;;;174        if (data == NULL || !packet_is_data_packet(data))
000026  2c00              CMP      r4,#0
000028  d00a              BEQ      |L1.64|
00002a  bf00              NOP      
00002c  7820              LDRB     r0,[r4,#0]
00002e  0700              LSLS     r0,r0,#28
000030  0f00              LSRS     r0,r0,#28
000032  2802              CMP      r0,#2
000034  d101              BNE      |L1.58|
000036  2001              MOVS     r0,#1
000038  e000              B        |L1.60|
                  |L1.58|
00003a  2000              MOVS     r0,#0
                  |L1.60|
00003c  2800              CMP      r0,#0
00003e  d101              BNE      |L1.68|
                  |L1.64|
;;;175        {
;;;176            return;
;;;177        }
;;;178    
;;;179    
;;;180        async_event_t async_evt;
;;;181        async_evt.type = EVENT_TYPE_PACKET;
;;;182        packet_create_from_data(data, &async_evt.callback.packet);
;;;183        async_evt.callback.packet.rx_crc = checksum;
;;;184        event_handler_push(&async_evt);
;;;185    
;;;186    
;;;187        /** @TODO: add packet chain handling */
;;;188    }
000040  b00d              ADD      sp,sp,#0x34
000042  bdf0              POP      {r4-r7,pc}
                  |L1.68|
000044  2004              MOVS     r0,#4                 ;181
000046  4669              MOV      r1,sp                 ;181
000048  7108              STRB     r0,[r1,#4]            ;181
00004a  a902              ADD      r1,sp,#8              ;182
00004c  4620              MOV      r0,r4                 ;182
00004e  f7fffffe          BL       packet_create_from_data
000052  970c              STR      r7,[sp,#0x30]         ;183
000054  a801              ADD      r0,sp,#4              ;184
000056  f7fffffe          BL       event_handler_push
00005a  bf00              NOP      
00005c  e7f0              B        |L1.64|
;;;189    
                          ENDP

                  order_search PROC
;;;96     */
;;;97     static void order_search(void)
00005e  b500              PUSH     {lr}
;;;98     {
000060  b085              SUB      sp,sp,#0x14
;;;99         radio_event_t search_event;
;;;100        search_event.access_address = 1; /* RX: treat as bitfield */
000062  2101              MOVS     r1,#1
000064  4668              MOV      r0,sp
000066  7301              STRB     r1,[r0,#0xc]
;;;101        search_event.callback.rx = search_callback;
000068  4898              LDR      r0,|L1.716|
00006a  9004              STR      r0,[sp,#0x10]
;;;102        rbc_mesh_channel_get(&search_event.channel);
00006c  a803              ADD      r0,sp,#0xc
00006e  3001              ADDS     r0,#1
000070  f7fffffe          BL       rbc_mesh_channel_get
;;;103        search_event.event_type = RADIO_EVENT_TYPE_RX;
000074  2101              MOVS     r1,#1
000076  4668              MOV      r0,sp
000078  7001              STRB     r1,[r0,#0]
;;;104        search_event.start_time = 0;
00007a  2000              MOVS     r0,#0
00007c  9001              STR      r0,[sp,#4]
;;;105    
;;;106        radio_order(&search_event);
00007e  4668              MOV      r0,sp
000080  f7fffffe          BL       radio_order
;;;107    }
000084  b005              ADD      sp,sp,#0x14
000086  bd00              POP      {pc}
;;;108    
                          ENDP

                  trickle_step_callback PROC
;;;192    */
;;;193    static void trickle_step_callback(void)
000088  b5f0              PUSH     {r4-r7,lr}
;;;194    {
00008a  b099              SUB      sp,sp,#0x64
;;;195        TICK_PIN(6);
;;;196        /* check if timeslot is about to end */
;;;197        if (timeslot_get_remaining_time() < RADIO_SAFETY_TIMING_US)
00008c  f7fffffe          BL       timeslot_get_remaining_time
000090  21ff              MOVS     r1,#0xff
000092  31f5              ADDS     r1,r1,#0xf5
000094  4288              CMP      r0,r1
000096  d201              BCS      |L1.156|
                  |L1.152|
;;;198            return;
;;;199    
;;;200        uint64_t time_now = global_time + timer_get_timestamp();
;;;201        trickle_time_update(time_now);
;;;202    
;;;203        packet_t packet;
;;;204        bool has_anything_to_send = false;
;;;205    
;;;206        mesh_srv_packet_assemble(&packet, PACKET_DATA_MAX_LEN * PACKET_MAX_CHAIN_LEN,
;;;207            &has_anything_to_send);
;;;208    
;;;209        if (has_anything_to_send)
;;;210        {
;;;211            TICK_PIN(PIN_MESH_TX);
;;;212            radio_disable();
;;;213    
;;;214            uint8_t packet_and_addr_type = PACKET_TYPE_ADV_NONCONN |
;;;215                ((packet.sender.addr_type == BLE_GAP_ADDR_TYPE_PUBLIC)?
;;;216                0 :
;;;217                PACKET_ADDR_TYPE_MASK);
;;;218    
;;;219            uint8_t* temp_data_ptr = &packet.data[0];
;;;220            uint8_t* tx_data_ptr = &tx_data[0];
;;;221            tx_data_ptr[PACKET_TYPE_POS] = packet_and_addr_type;
;;;222    
;;;223            /* Code structured for packet chaining, although this is yet
;;;224             to be implemented. */
;;;225            do
;;;226            {
;;;227                uint8_t min_len = ((packet.length > PACKET_DATA_MAX_LEN)?
;;;228                    PACKET_DATA_MAX_LEN :
;;;229                    packet.length);
;;;230    
;;;231                tx_data_ptr[PACKET_PADDING_POS] = 0;
;;;232                tx_data_ptr[PACKET_LENGTH_POS] = (min_len + PACKET_ADDR_LEN);
;;;233                tx_data_ptr[PACKET_TYPE_POS] = packet_and_addr_type;
;;;234    
;;;235                memcpy(&tx_data_ptr[PACKET_ADDR_POS], packet.sender.addr, PACKET_ADDR_LEN);
;;;236                memcpy(&tx_data_ptr[PACKET_DATA_POS], &temp_data_ptr[0], min_len);
;;;237    
;;;238                radio_event_t tx_event;
;;;239                tx_event.access_address = 0;
;;;240                rbc_mesh_channel_get(&tx_event.channel);
;;;241                tx_event.event_type = RADIO_EVENT_TYPE_TX;
;;;242                tx_event.packet_ptr = &tx_data_ptr[0];
;;;243                tx_event.start_time = 0;
;;;244                tx_event.callback.tx = NULL;
;;;245    
;;;246                radio_order(&tx_event);
;;;247                TICK_PIN(0);
;;;248            } while (0);
;;;249    
;;;250            order_search(); /* search for the rest of the timeslot */
;;;251        }
;;;252    
;;;253        /* order next processing */
;;;254        uint64_t next_time;
;;;255        uint64_t end_time = timeslot_get_end_time();
;;;256        uint32_t error_code = mesh_srv_get_next_processing_time(&next_time);
;;;257    
;;;258        if (error_code == NRF_SUCCESS && next_time < global_time + end_time)
;;;259        {
;;;260            timer_abort(step_timer_index);
;;;261            step_timer_index = timer_order_cb(next_time - global_time, trickle_step_callback);
;;;262        }
;;;263    }
000098  b019              ADD      sp,sp,#0x64
00009a  bdf0              POP      {r4-r7,pc}
                  |L1.156|
00009c  f7fffffe          BL       timer_get_timestamp
0000a0  2100              MOVS     r1,#0                 ;200
0000a2  4a8b              LDR      r2,|L1.720|
0000a4  6813              LDR      r3,[r2,#0]            ;200  ; global_time
0000a6  6852              LDR      r2,[r2,#4]            ;200  ; global_time
0000a8  18c0              ADDS     r0,r0,r3              ;200
0000aa  4151              ADCS     r1,r1,r2              ;200
0000ac  9117              STR      r1,[sp,#0x5c]         ;200
0000ae  9016              STR      r0,[sp,#0x58]         ;200
0000b0  9917              LDR      r1,[sp,#0x5c]         ;201
0000b2  9816              LDR      r0,[sp,#0x58]         ;201
0000b4  f7fffffe          BL       trickle_time_update
0000b8  2100              MOVS     r1,#0                 ;204
0000ba  910a              STR      r1,[sp,#0x28]         ;204
0000bc  aa0a              ADD      r2,sp,#0x28           ;206
0000be  211c              MOVS     r1,#0x1c              ;206
0000c0  a80b              ADD      r0,sp,#0x2c           ;206
0000c2  f7fffffe          BL       mesh_srv_packet_assemble
0000c6  a808              ADD      r0,sp,#0x20           ;209
0000c8  7a00              LDRB     r0,[r0,#8]            ;209
0000ca  2800              CMP      r0,#0                 ;209
0000cc  d03e              BEQ      |L1.332|
0000ce  f7fffffe          BL       radio_disable
0000d2  a808              ADD      r0,sp,#0x20           ;214
0000d4  7b00              LDRB     r0,[r0,#0xc]          ;214
0000d6  2800              CMP      r0,#0                 ;214
0000d8  d100              BNE      |L1.220|
0000da  e000              B        |L1.222|
                  |L1.220|
0000dc  2040              MOVS     r0,#0x40              ;217
                  |L1.222|
0000de  2102              MOVS     r1,#2                 ;217
0000e0  4607              MOV      r7,r0                 ;217
0000e2  430f              ORRS     r7,r7,r1              ;217
0000e4  a80d              ADD      r0,sp,#0x34           ;219
0000e6  9006              STR      r0,[sp,#0x18]         ;219
0000e8  4c7a              LDR      r4,|L1.724|
0000ea  7027              STRB     r7,[r4,#0]            ;221
0000ec  bf00              NOP                            ;225
0000ee  a808              ADD      r0,sp,#0x20           ;227
0000f0  7cc0              LDRB     r0,[r0,#0x13]         ;227
0000f2  281c              CMP      r0,#0x1c              ;227
0000f4  dd01              BLE      |L1.250|
0000f6  201c              MOVS     r0,#0x1c              ;228
0000f8  e001              B        |L1.254|
                  |L1.250|
0000fa  a808              ADD      r0,sp,#0x20           ;229
0000fc  7cc0              LDRB     r0,[r0,#0x13]         ;229
                  |L1.254|
0000fe  9005              STR      r0,[sp,#0x14]         ;229
000100  2000              MOVS     r0,#0                 ;231
000102  70a0              STRB     r0,[r4,#2]            ;231
000104  9805              LDR      r0,[sp,#0x14]         ;232
000106  1d80              ADDS     r0,r0,#6              ;232
000108  7060              STRB     r0,[r4,#1]            ;232
00010a  7027              STRB     r7,[r4,#0]            ;233
00010c  2206              MOVS     r2,#6                 ;235
00010e  a90b              ADD      r1,sp,#0x2c           ;235
000110  3101              ADDS     r1,#1                 ;235
000112  1ce0              ADDS     r0,r4,#3              ;235
000114  f7fffffe          BL       __aeabi_memcpy
000118  4620              MOV      r0,r4                 ;236
00011a  3009              ADDS     r0,r0,#9              ;236
00011c  9a05              LDR      r2,[sp,#0x14]         ;236
00011e  9906              LDR      r1,[sp,#0x18]         ;236
000120  f7fffffe          BL       __aeabi_memcpy
000124  2100              MOVS     r1,#0                 ;239
000126  4668              MOV      r0,sp                 ;239
000128  7301              STRB     r1,[r0,#0xc]          ;239
00012a  300d              ADDS     r0,r0,#0xd            ;240
00012c  f7fffffe          BL       rbc_mesh_channel_get
000130  2100              MOVS     r1,#0                 ;241
000132  4668              MOV      r0,sp                 ;241
000134  7001              STRB     r1,[r0,#0]            ;241
000136  9402              STR      r4,[sp,#8]            ;242
000138  2000              MOVS     r0,#0                 ;243
00013a  9001              STR      r0,[sp,#4]            ;243
00013c  9004              STR      r0,[sp,#0x10]         ;244
00013e  4668              MOV      r0,sp                 ;246
000140  f7fffffe          BL       radio_order
000144  bf00              NOP                            ;248
000146  f7fffffe          BL       order_search
00014a  bf00              NOP                            ;251
                  |L1.332|
00014c  f7fffffe          BL       timeslot_get_end_time
000150  4605              MOV      r5,r0                 ;255
000152  460e              MOV      r6,r1                 ;255
000154  a808              ADD      r0,sp,#0x20           ;256
000156  f7fffffe          BL       mesh_srv_get_next_processing_time
00015a  9007              STR      r0,[sp,#0x1c]         ;256
00015c  9807              LDR      r0,[sp,#0x1c]         ;258
00015e  2800              CMP      r0,#0                 ;258
000160  d116              BNE      |L1.400|
000162  485b              LDR      r0,|L1.720|
000164  6801              LDR      r1,[r0,#0]            ;258  ; global_time
000166  6840              LDR      r0,[r0,#4]            ;258  ; global_time
000168  194a              ADDS     r2,r1,r5              ;258
00016a  4170              ADCS     r0,r0,r6              ;258
00016c  9b09              LDR      r3,[sp,#0x24]         ;258
00016e  9908              LDR      r1,[sp,#0x20]         ;258
000170  1a89              SUBS     r1,r1,r2              ;258
000172  4183              SBCS     r3,r3,r0              ;258
000174  d20c              BCS      |L1.400|
000176  4858              LDR      r0,|L1.728|
000178  7800              LDRB     r0,[r0,#0]            ;260  ; step_timer_index
00017a  f7fffffe          BL       timer_abort
00017e  4954              LDR      r1,|L1.720|
000180  9a08              LDR      r2,[sp,#0x20]         ;261
000182  6809              LDR      r1,[r1,#0]            ;261  ; global_time
000184  1a50              SUBS     r0,r2,r1              ;261
000186  4955              LDR      r1,|L1.732|
000188  f7fffffe          BL       timer_order_cb
00018c  4952              LDR      r1,|L1.728|
00018e  7008              STRB     r0,[r1,#0]            ;261
                  |L1.400|
000190  bf00              NOP      
000192  e781              B        |L1.152|
;;;264    
                          ENDP

                  transport_control_step PROC
;;;285    
;;;286    void transport_control_step(void)
000194  b570              PUSH     {r4-r6,lr}
;;;287    {
000196  b08e              SUB      sp,sp,#0x38
;;;288        uint64_t next_time;
;;;289        uint64_t time_now = timer_get_timestamp() + global_time;
000198  f7fffffe          BL       timer_get_timestamp
00019c  2100              MOVS     r1,#0
00019e  4b4c              LDR      r3,|L1.720|
0001a0  cb0c              LDM      r3,{r2,r3}
0001a2  1884              ADDS     r4,r0,r2
0001a4  4159              ADCS     r1,r1,r3
0001a6  460d              MOV      r5,r1
;;;290        trickle_time_update(time_now);
0001a8  4620              MOV      r0,r4
0001aa  4629              MOV      r1,r5
0001ac  f7fffffe          BL       trickle_time_update
;;;291        uint32_t error_code = mesh_srv_get_next_processing_time(&next_time);
0001b0  a80c              ADD      r0,sp,#0x30
0001b2  f7fffffe          BL       mesh_srv_get_next_processing_time
0001b6  4606              MOV      r6,r0
;;;292        if (error_code != NRF_SUCCESS)
0001b8  2e00              CMP      r6,#0
0001ba  d001              BEQ      |L1.448|
                  |L1.444|
;;;293        {
;;;294            return;
;;;295        }
;;;296    
;;;297        if (next_time < time_now)
;;;298        {
;;;299            async_event_t async_evt;
;;;300            async_evt.callback.generic = trickle_step_callback;
;;;301            async_evt.type = EVENT_TYPE_GENERIC;
;;;302            event_handler_push(&async_evt);
;;;303        }
;;;304        else
;;;305        {
;;;306            if (next_time < global_time + timeslot_get_end_time())
;;;307            {
;;;308                timer_abort(step_timer_index);
;;;309                step_timer_index = timer_order_cb(next_time - global_time, trickle_step_callback);
;;;310            }
;;;311        }
;;;312    }
0001bc  b00e              ADD      sp,sp,#0x38
0001be  bd70              POP      {r4-r6,pc}
                  |L1.448|
0001c0  990d              LDR      r1,[sp,#0x34]         ;297
0001c2  980c              LDR      r0,[sp,#0x30]         ;297
0001c4  1b00              SUBS     r0,r0,r4              ;297
0001c6  41a9              SBCS     r1,r1,r5              ;297
0001c8  d208              BCS      |L1.476|
0001ca  4844              LDR      r0,|L1.732|
0001cc  9001              STR      r0,[sp,#4]            ;300
0001ce  2003              MOVS     r0,#3                 ;301
0001d0  4669              MOV      r1,sp                 ;301
0001d2  7008              STRB     r0,[r1,#0]            ;301
0001d4  4668              MOV      r0,sp                 ;302
0001d6  f7fffffe          BL       event_handler_push
0001da  e017              B        |L1.524|
                  |L1.476|
0001dc  f7fffffe          BL       timeslot_get_end_time
0001e0  4b3b              LDR      r3,|L1.720|
0001e2  cb0c              LDM      r3,{r2,r3}            ;306
0001e4  1880              ADDS     r0,r0,r2              ;306
0001e6  4159              ADCS     r1,r1,r3              ;306
0001e8  9b0d              LDR      r3,[sp,#0x34]         ;306
0001ea  9a0c              LDR      r2,[sp,#0x30]         ;306
0001ec  1a10              SUBS     r0,r2,r0              ;306
0001ee  418b              SBCS     r3,r3,r1              ;306
0001f0  d20c              BCS      |L1.524|
0001f2  4839              LDR      r0,|L1.728|
0001f4  7800              LDRB     r0,[r0,#0]            ;308  ; step_timer_index
0001f6  f7fffffe          BL       timer_abort
0001fa  4935              LDR      r1,|L1.720|
0001fc  9a0c              LDR      r2,[sp,#0x30]         ;309
0001fe  6809              LDR      r1,[r1,#0]            ;309  ; global_time
000200  1a50              SUBS     r0,r2,r1              ;309
000202  4936              LDR      r1,|L1.732|
000204  f7fffffe          BL       timer_order_cb
000208  4933              LDR      r1,|L1.728|
00020a  7008              STRB     r0,[r1,#0]            ;309
                  |L1.524|
00020c  bf00              NOP      
00020e  e7d5              B        |L1.444|
;;;313    
                          ENDP

                  transport_control_timeslot_begin PROC
;;;268    
;;;269    void transport_control_timeslot_begin(uint64_t global_timer_value)
000210  b5f8              PUSH     {r3-r7,lr}
;;;270    {
000212  4604              MOV      r4,r0
000214  460d              MOV      r5,r1
;;;271        uint32_t aa;
;;;272        uint32_t error_code = rbc_mesh_access_address_get(&aa);
000216  4668              MOV      r0,sp
000218  f7fffffe          BL       rbc_mesh_access_address_get
00021c  4606              MOV      r6,r0
;;;273        APP_ERROR_CHECK(error_code);
00021e  bf00              NOP      
000220  4637              MOV      r7,r6
000222  2f00              CMP      r7,#0
000224  d006              BEQ      |L1.564|
000226  bf00              NOP      
000228  2200              MOVS     r2,#0
00022a  4611              MOV      r1,r2
00022c  4638              MOV      r0,r7
00022e  f7fffffe          BL       app_error_handler
000232  bf00              NOP      
                  |L1.564|
000234  bf00              NOP      
;;;274    
;;;275        radio_init(aa);
000236  9800              LDR      r0,[sp,#0]
000238  f7fffffe          BL       radio_init
;;;276    
;;;277        step_timer_index = 0xFF;
00023c  20ff              MOVS     r0,#0xff
00023e  4926              LDR      r1,|L1.728|
000240  7008              STRB     r0,[r1,#0]
;;;278    
;;;279        global_time = global_timer_value;
000242  4823              LDR      r0,|L1.720|
000244  c030              STM      r0!,{r4,r5}
;;;280    
;;;281        order_search();
000246  f7fffffe          BL       order_search
;;;282        transport_control_step();
00024a  f7fffffe          BL       transport_control_step
;;;283    
;;;284    }
00024e  bdf8              POP      {r3-r7,pc}
;;;285    
                          ENDP

                  packet_create_from_data PROC
;;;112    */
;;;113    static inline void packet_create_from_data(uint8_t* data, packet_t* packet)
000250  b570              PUSH     {r4-r6,lr}
;;;114    {
000252  4605              MOV      r5,r0
000254  460c              MOV      r4,r1
;;;115        /* advertisement package */
;;;116    
;;;117        packet->length = (data[PACKET_LENGTH_POS] & PACKET_LENGTH_MASK) - PACKET_ADDR_LEN;
000256  7868              LDRB     r0,[r5,#1]
000258  0680              LSLS     r0,r0,#26
00025a  0e80              LSRS     r0,r0,#26
00025c  1f80              SUBS     r0,r0,#6
00025e  71e0              STRB     r0,[r4,#7]
;;;118        memcpy(packet->data, &data[PACKET_DATA_POS], packet->length);
000260  79e2              LDRB     r2,[r4,#7]
000262  4629              MOV      r1,r5
000264  3109              ADDS     r1,r1,#9
000266  4620              MOV      r0,r4
000268  3008              ADDS     r0,r0,#8
00026a  f7fffffe          BL       __aeabi_memcpy
;;;119        memcpy(packet->sender.addr, &data[PACKET_ADDR_POS], PACKET_ADDR_LEN);
00026e  2206              MOVS     r2,#6
000270  1ce9              ADDS     r1,r5,#3
000272  1c60              ADDS     r0,r4,#1
000274  f7fffffe          BL       __aeabi_memcpy
;;;120    
;;;121        /* addr type */
;;;122        bool addr_is_random = (data[PACKET_TYPE_POS] & PACKET_ADDR_TYPE_MASK);
000278  7828              LDRB     r0,[r5,#0]
00027a  2140              MOVS     r1,#0x40
00027c  4008              ANDS     r0,r0,r1
00027e  0986              LSRS     r6,r0,#6
;;;123    
;;;124        if (addr_is_random)
000280  2e00              CMP      r6,#0
000282  d01e              BEQ      |L1.706|
;;;125        {
;;;126            bool is_static = ((packet->sender.addr[5] & 0xC0) == 0xC0);
000284  79a1              LDRB     r1,[r4,#6]
000286  22c0              MOVS     r2,#0xc0
000288  4011              ANDS     r1,r1,r2
00028a  29c0              CMP      r1,#0xc0
00028c  d101              BNE      |L1.658|
00028e  2101              MOVS     r1,#1
000290  e000              B        |L1.660|
                  |L1.658|
000292  2100              MOVS     r1,#0
                  |L1.660|
000294  4608              MOV      r0,r1
;;;127            if (is_static)
000296  2800              CMP      r0,#0
000298  d002              BEQ      |L1.672|
;;;128            {
;;;129                packet->sender.addr_type = BLE_GAP_ADDR_TYPE_RANDOM_STATIC;
00029a  2101              MOVS     r1,#1
00029c  7021              STRB     r1,[r4,#0]
00029e  e00f              B        |L1.704|
                  |L1.672|
;;;130            }
;;;131            else
;;;132            {
;;;133                bool is_resolvable = ((packet->sender.addr[5] & 0xC0) == 0x40);
0002a0  79a2              LDRB     r2,[r4,#6]
0002a2  23c0              MOVS     r3,#0xc0
0002a4  401a              ANDS     r2,r2,r3
0002a6  2a40              CMP      r2,#0x40
0002a8  d101              BNE      |L1.686|
0002aa  2201              MOVS     r2,#1
0002ac  e000              B        |L1.688|
                  |L1.686|
0002ae  2200              MOVS     r2,#0
                  |L1.688|
0002b0  4611              MOV      r1,r2
;;;134                packet->sender.addr_type = (is_resolvable?
0002b2  2900              CMP      r1,#0
0002b4  d001              BEQ      |L1.698|
;;;135                    BLE_GAP_ADDR_TYPE_RANDOM_PRIVATE_RESOLVABLE :
0002b6  2202              MOVS     r2,#2
0002b8  e000              B        |L1.700|
                  |L1.698|
;;;136                    BLE_GAP_ADDR_TYPE_RANDOM_PRIVATE_NON_RESOLVABLE);
0002ba  2203              MOVS     r2,#3
                  |L1.700|
0002bc  7022              STRB     r2,[r4,#0]
;;;137            }
0002be  bf00              NOP      
                  |L1.704|
;;;138        }
0002c0  e001              B        |L1.710|
                  |L1.706|
;;;139        else
;;;140        {
;;;141            packet->sender.addr_type = BLE_GAP_ADDR_TYPE_PUBLIC;
0002c2  2000              MOVS     r0,#0
0002c4  7020              STRB     r0,[r4,#0]
                  |L1.710|
;;;142        }
;;;143    }
0002c6  bd70              POP      {r4-r6,pc}
;;;144    
                          ENDP

                  |L1.712|
                          DCD      0x40001400
                  |L1.716|
                          DCD      search_callback
                  |L1.720|
                          DCD      global_time
                  |L1.724|
                          DCD      tx_data
                  |L1.728|
                          DCD      step_timer_index
                  |L1.732|
                          DCD      trickle_step_callback

                          AREA ||.bss||, DATA, NOINIT, ALIGN=0

                  tx_data
                          %        37

                          AREA ||.data||, DATA, ALIGN=3

                  global_time
000000  00000000          DCQ      0x0000000000000000
000004  00000000
                  step_timer_index
000008  ff                DCB      0xff

;*** Start embedded assembler ***

#line 1 "..\\..\\..\\rbc_mesh\\src\\transport_control.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___19_transport_control_c_f48e9216____REV16|
#line 129 "..\\..\\..\\..\\..\\..\\components\\toolchain\\gcc\\core_cmInstr.h"
|__asm___19_transport_control_c_f48e9216____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___19_transport_control_c_f48e9216____REVSH|
#line 144
|__asm___19_transport_control_c_f48e9216____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
