; generated by Component: ARM Compiler 5.04 update 1 (build 49) Tool: ArmCC [5040049]
; commandline ArmCC [--c99 --list --debug -c --asm --interleave -o.\_build\main.o --asm_dir=.\_build\ --list_dir=.\_build\ --depend=.\_build\main.d --cpu=Cortex-M0 --apcs=interwork -O0 -I..\include -I..\..\..\rbc_mesh -I..\..\..\rbc_mesh\include -I..\..\..\SDK\bsp -I..\..\..\..\..\..\components\softdevice\s110\headers -I..\..\..\..\..\..\components\toolchain\gcc -I..\..\..\..\..\..\components\libraries\util -I..\..\..\..\..\..\components\ble\common -I..\..\..\..\..\..\components\drivers_nrf\hal -I..\..\..\..\..\..\components\drivers_nrf\spi_slave -I..\..\..\..\..\..\components\softdevice\common\softdevice_handler -I..\..\..\..\..\..\components\libraries\fifo -I..\..\..\..\..\..\components\drivers_nrf\uart -I..\..\..\..\..\..\components\drivers_nrf\gpiote -I..\..\..\..\..\..\components\drivers_nrf\config -I..\..\..\..\..\..\components\drivers_nrf\common -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\4.1.0\CMSIS\Include -IC:\Keil_v5\ARM\PACK\NordicSemiconductor\nRF_DeviceFamilyPack\7.2.1\Device\Include -D__MICROLIB -DNRF51 -DBOARD_RHC -DNRF51 -DBLE_STACK_SUPPORT_REQD -DS110 -DSOFTDEVICE_PRESENT --omf_browse=.\_build\main.crf ..\main.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  error_loop PROC
;;;80     */
;;;81     static void error_loop(void)
000000  bf00              NOP      
000002  f3bf8f4f          DSB      
000006  4882              LDR      r0,|L1.528|
000008  4982              LDR      r1,|L1.532|
00000a  60c8              STR      r0,[r1,#0xc]
00000c  f3bf8f4f          DSB      
000010  bf00              NOP      
000012  bf00              NOP      
                  |L1.20|
000014  e7fe              B        |L1.20|
;;;82     {
;;;83         //led_config(3, 1);
;;;84         
;;;85         NVIC_SystemReset(); /* reset the system.  */
;;;86         
;;;87         /*while (true)
;;;88         {
;;;89         }*/
;;;90     }    
;;;91     
                          ENDP

                  sd_assert_handler PROC
;;;98     */
;;;99     void sd_assert_handler(uint32_t pc, uint16_t line_num, const uint8_t* p_file_name)
000016  f7fffffe          BL       error_loop
;;;100    {
;;;101        error_loop();
;;;102    }
;;;103    
                          ENDP

                  app_error_handler PROC
;;;111    */
;;;112    void app_error_handler(uint32_t error_code, uint32_t line_num, const uint8_t * p_file_name)
00001a  f7fffffe          BL       error_loop
;;;113    {
;;;114        error_loop();
;;;115    }
;;;116    
                          ENDP

                  HardFault_Handler PROC
;;;117    void HardFault_Handler(void)
00001e  f7fffffe          BL       error_loop
;;;118    {
;;;119        error_loop();
;;;120    }
;;;121    
                          ENDP

                  sd_evt_handler PROC
;;;124    */
;;;125    uint32_t sd_evt_handler(void)
000022  b500              PUSH     {lr}
;;;126    {
000024  b08d              SUB      sp,sp,#0x34
;;;127        rbc_mesh_sd_irq_handler();
000026  f7fffffe          BL       rbc_mesh_sd_irq_handler
;;;128        
;;;129        ble_evt_t ble_evt;
;;;130        uint16_t len = sizeof(ble_evt);
00002a  2030              MOVS     r0,#0x30
00002c  9000              STR      r0,[sp,#0]
;;;131        while (sd_ble_evt_get((uint8_t*) &ble_evt, &len) == NRF_SUCCESS)
00002e  e002              B        |L1.54|
                  |L1.48|
;;;132        {
;;;133            nrf_adv_conn_evt_handler(&ble_evt);
000030  a801              ADD      r0,sp,#4
000032  f7fffffe          BL       nrf_adv_conn_evt_handler
                  |L1.54|
000036  4669              MOV      r1,sp                 ;131
000038  a801              ADD      r0,sp,#4              ;131
00003a  df61              SVC      #0x61                 ;131
00003c  2800              CMP      r0,#0                 ;131
00003e  d0f7              BEQ      |L1.48|
;;;134        }
;;;135        return NRF_SUCCESS;
000040  2000              MOVS     r0,#0
;;;136    }
000042  b00d              ADD      sp,sp,#0x34
000044  bd00              POP      {pc}
;;;137    /**
                          ENDP

                  rbc_mesh_event_handler PROC
;;;142    */
;;;143    void rbc_mesh_event_handler(rbc_mesh_event_t* evt)
000046  b510              PUSH     {r4,lr}
;;;144    {
000048  4604              MOV      r4,r0
;;;145        TICK_PIN(28);
;;;146        switch (evt->event_type)
00004a  7820              LDRB     r0,[r4,#0]
00004c  2800              CMP      r0,#0
00004e  d008              BEQ      |L1.98|
000050  2801              CMP      r0,#1
000052  d004              BEQ      |L1.94|
000054  2802              CMP      r0,#2
000056  d003              BEQ      |L1.96|
000058  2803              CMP      r0,#3
00005a  d11f              BNE      |L1.156|
00005c  e01b              B        |L1.150|
                  |L1.94|
;;;147        {
;;;148            case RBC_MESH_EVENT_TYPE_CONFLICTING_VAL:   
;;;149            case RBC_MESH_EVENT_TYPE_NEW_VAL:
00005e  bf00              NOP      
                  |L1.96|
;;;150            case RBC_MESH_EVENT_TYPE_UPDATE_VAL:
000060  bf00              NOP      
                  |L1.98|
;;;151                if (evt->value_handle > 2)
000062  8860              LDRH     r0,[r4,#2]
000064  2802              CMP      r0,#2
000066  dd00              BLE      |L1.106|
;;;152                    break;
000068  e018              B        |L1.156|
                  |L1.106|
;;;153                //SmartRelay_CMD_Process(&evt->data[0], evt->data_len);
;;;154                #ifdef HAS_UART
;;;155    						Uart_data_write(&evt->data[0], evt->data_len);
00006a  7a21              LDRB     r1,[r4,#8]
00006c  6860              LDR      r0,[r4,#4]
00006e  f7fffffe          BL       Uart_data_write
;;;156    						#endif
;;;157    						#ifdef HAS_HORN_LAMP
;;;158    						Horn_Lamp_CMD_Process(&evt->data[0], evt->data_len);
;;;159    						#endif
;;;160                nrf_gpio_pin_toggle(LED_3);
000072  2014              MOVS     r0,#0x14
000074  2301              MOVS     r3,#1
000076  4083              LSLS     r3,r3,r0
000078  4619              MOV      r1,r3
00007a  4b67              LDR      r3,|L1.536|
00007c  685b              LDR      r3,[r3,#4]
00007e  40c3              LSRS     r3,r3,r0
000080  07da              LSLS     r2,r3,#31
000082  0fd2              LSRS     r2,r2,#31
000084  2a00              CMP      r2,#0
000086  d102              BNE      |L1.142|
000088  4b63              LDR      r3,|L1.536|
00008a  6099              STR      r1,[r3,#8]
00008c  e001              B        |L1.146|
                  |L1.142|
00008e  4b62              LDR      r3,|L1.536|
000090  60d9              STR      r1,[r3,#0xc]
                  |L1.146|
000092  bf00              NOP      
;;;161                break;
000094  e002              B        |L1.156|
                  |L1.150|
;;;162            case RBC_MESH_EVENT_TYPE_INITIALIZED:
;;;163                /* init BLE gateway softdevice application: */
;;;164                nrf_adv_conn_init();
000096  f7fffffe          BL       nrf_adv_conn_init
;;;165                break;  
00009a  bf00              NOP      
                  |L1.156|
00009c  bf00              NOP                            ;152
;;;166        }
;;;167    }
00009e  bd10              POP      {r4,pc}
;;;168    
                          ENDP

                  gpio_init PROC
;;;172    */
;;;173    void gpio_init(void)
0000a0  b510              PUSH     {r4,lr}
;;;174    {
;;;175        //nrf_gpio_range_cfg_output(LED_START, LED_STOP);
;;;176    #if defined(BOARD_PCA10001) || defined(BOARD_PCA10028) || defined(BOARD_RHC)
;;;177        nrf_gpio_range_cfg_output(0, 32);
0000a2  2000              MOVS     r0,#0
0000a4  2120              MOVS     r1,#0x20
0000a6  e008              B        |L1.186|
                  |L1.168|
0000a8  2203              MOVS     r2,#3
0000aa  2305              MOVS     r3,#5
0000ac  071b              LSLS     r3,r3,#28
0000ae  2407              MOVS     r4,#7
0000b0  0224              LSLS     r4,r4,#8
0000b2  191b              ADDS     r3,r3,r4
0000b4  0084              LSLS     r4,r0,#2
0000b6  511a              STR      r2,[r3,r4]
0000b8  1c40              ADDS     r0,r0,#1
                  |L1.186|
0000ba  4288              CMP      r0,r1
0000bc  d9f4              BLS      |L1.168|
0000be  bf00              NOP      
;;;178    #endif
;;;179    
;;;180        nrf_gpio_pin_set(LED_START); //turn on LED START
0000c0  2012              MOVS     r0,#0x12
0000c2  f7fffffe          BL       nrf_gpio_pin_set
;;;181        for (uint32_t i = 1; i < LEDS_NUMBER; ++i)
0000c6  2401              MOVS     r4,#1
0000c8  e004              B        |L1.212|
                  |L1.202|
;;;182        {
;;;183            nrf_gpio_pin_clear(LED_START + i);    //turn off the rest LED
0000ca  4620              MOV      r0,r4
0000cc  3012              ADDS     r0,r0,#0x12
0000ce  f7fffffe          BL       nrf_gpio_pin_clear
0000d2  1c64              ADDS     r4,r4,#1              ;181
                  |L1.212|
0000d4  2c03              CMP      r4,#3                 ;181
0000d6  d3f8              BCC      |L1.202|
;;;184        }
;;;185        //init button or input signal
;;;186    		#ifndef HAS_HORN_LAMP
;;;187    		nrf_gpio_cfg_input(BUTTON_1, NRF_GPIO_PIN_PULLUP);
0000d8  2110              MOVS     r1,#0x10
0000da  2003              MOVS     r0,#3
0000dc  0082              LSLS     r2,r0,#2
0000de  2305              MOVS     r3,#5
0000e0  071b              LSLS     r3,r3,#28
0000e2  2407              MOVS     r4,#7
0000e4  0224              LSLS     r4,r4,#8
0000e6  191b              ADDS     r3,r3,r4
0000e8  008c              LSLS     r4,r1,#2
0000ea  511a              STR      r2,[r3,r4]
0000ec  bf00              NOP      
;;;188    		#endif
;;;189    #ifdef BUTTONS
;;;190        #ifdef defined(BOARD_PCA10028)
;;;191            
;;;192            nrf_gpio_cfg_input(BUTTON_1, NRF_GPIO_PIN_PULLUP);
;;;193            nrf_gpio_cfg_input(BUTTON_2, NRF_GPIO_PIN_PULLUP);
;;;194            nrf_gpio_cfg_input(BUTTON_3, NRF_GPIO_PIN_PULLUP);
;;;195            nrf_gpio_cfg_input(BUTTON_4, NRF_GPIO_PIN_PULLUP);
;;;196    
;;;197        #elif defined(BOARD_RHC)
;;;198            nrf_gpio_cfg_input(BUTTON_1, NRF_GPIO_PIN_PULLUP);
;;;199            nrf_gpio_cfg_input(BUTTON_2, NRF_GPIO_PIN_PULLUP);
;;;200        #endif
;;;201    #endif
;;;202        
;;;203    }
0000ee  bd10              POP      {r4,pc}
;;;204    
                          ENDP

                  Input_Cyclic_Process PROC
;;;362    uint8_t warning_flag = 0;
;;;363    void Input_Cyclic_Process( void )
0000f0  b538              PUSH     {r3-r5,lr}
;;;364    {
;;;365    	static uint8_t Old_status = 0;
;;;366    	uint8_t Loc_var;
;;;367    	uint8_t RFTx_buf[4] = {'#','W',SENSOR_NUMBER, 0};
0000f2  a04a              ADR      r0,|L1.540|
0000f4  6800              LDR      r0,[r0,#0]
0000f6  9000              STR      r0,[sp,#0]
;;;368    	
;;;369    	Loc_var = (uint8_t)nrf_gpio_pin_read(BUTTON_1);
0000f8  2010              MOVS     r0,#0x10
0000fa  4947              LDR      r1,|L1.536|
0000fc  6909              LDR      r1,[r1,#0x10]
0000fe  40c1              LSRS     r1,r1,r0
000100  07c9              LSLS     r1,r1,#31
000102  0fc9              LSRS     r1,r1,#31
000104  460c              MOV      r4,r1
;;;370    	if(Old_status != Loc_var){
000106  4846              LDR      r0,|L1.544|
000108  7800              LDRB     r0,[r0,#0]  ; Old_status
00010a  42a0              CMP      r0,r4
00010c  d007              BEQ      |L1.286|
;;;371    		RFTx_buf[3] = Loc_var + 0x30;
00010e  4620              MOV      r0,r4
000110  3030              ADDS     r0,r0,#0x30
000112  4669              MOV      r1,sp
000114  70c8              STRB     r0,[r1,#3]
;;;372    		rbc_mesh_value_set(1, RFTx_buf, 4);
000116  2204              MOVS     r2,#4
000118  2001              MOVS     r0,#1
00011a  f7fffffe          BL       rbc_mesh_value_set
                  |L1.286|
;;;373    	}
;;;374    	#ifdef HAS_TOUCH_SENSOR
;;;375    	else if(warning_flag == 1){
;;;376    		RFTx_buf[3] = 0x30;
;;;377    		rbc_mesh_value_set(1, RFTx_buf, 4);
;;;378    		warning_flag = 0;
;;;379    	}
;;;380    	#endif
;;;381    	if(Loc_var == 0)
00011e  2c00              CMP      r4,#0
000120  d103              BNE      |L1.298|
;;;382    	{
;;;383    		nrf_gpio_pin_set(LED_3);
000122  2014              MOVS     r0,#0x14
000124  f7fffffe          BL       nrf_gpio_pin_set
000128  e002              B        |L1.304|
                  |L1.298|
;;;384    	}else{
;;;385    		nrf_gpio_pin_clear(LED_3);
00012a  2014              MOVS     r0,#0x14
00012c  f7fffffe          BL       nrf_gpio_pin_clear
                  |L1.304|
;;;386    		#ifdef HAS_TOUCH_SENSOR
;;;387    			nrf_timer_delay_ms(20000);
;;;388    			warning_flag = 1;
;;;389    		#endif
;;;390    	}
;;;391    	Old_status = Loc_var;
000130  483b              LDR      r0,|L1.544|
000132  7004              STRB     r4,[r0,#0]
;;;392    }
000134  bd38              POP      {r3-r5,pc}
                          ENDP

                  main PROC
;;;206    /** @brief main function */
;;;207    int main(void)
000136  b51f              PUSH     {r0-r4,lr}
;;;208    {   
;;;209        //uint8_t  start_string[] = START_STRING;
;;;210        
;;;211        NRF_POWER->RESET = 1;
000138  2001              MOVS     r0,#1
00013a  493a              LDR      r1,|L1.548|
00013c  6048              STR      r0,[r1,#4]
;;;212        // Init relay, must put here because of initilize of PIN out - active Low
;;;213        Relay_Init();
00013e  f7fffffe          BL       Relay_Init
;;;214        /* init leds and pins */
;;;215        gpio_init();
000142  f7fffffe          BL       gpio_init
;;;216        /* Enable Softdevice (including sd_ble before framework */
;;;217        SOFTDEVICE_HANDLER_INIT(NRF_CLOCK_LFCLKSRC_XTAL_75_PPM, sd_evt_handler);
000146  bf00              NOP      
000148  4b37              LDR      r3,|L1.552|
00014a  2248              MOVS     r2,#0x48
00014c  4937              LDR      r1,|L1.556|
00014e  2005              MOVS     r0,#5
000150  f7fffffe          BL       softdevice_handler_init
000154  4605              MOV      r5,r0
000156  bf00              NOP      
000158  462e              MOV      r6,r5
00015a  2e00              CMP      r6,#0
00015c  d005              BEQ      |L1.362|
00015e  bf00              NOP      
000160  2200              MOVS     r2,#0
000162  4611              MOV      r1,r2
000164  4630              MOV      r0,r6
000166  f7fffffe          BL       app_error_handler
                  |L1.362|
00016a  bf00              NOP      
00016c  bf00              NOP      
;;;218    	
;;;219        #ifdef HAS_UART
;;;220    		uart_init();
00016e  f7fffffe          BL       uart_init
;;;221    		#endif
;;;222    	
;;;223    		#ifdef HAS_TOUCH_SENSOR
;;;224    		timer_init();
;;;225    		#endif
;;;226    #ifdef RBC_MESH_SERIAL
;;;227        
;;;228        /* only want to enable serial interface, and let external host setup the framework */
;;;229        mesh_aci_init();
;;;230    
;;;231    #else    
;;;232        /* Enable mesh framework on channel 37, min adv interval at 100ms, 
;;;233            2 characteristics */
;;;234        rbc_mesh_init_params_t init_params;
;;;235    
;;;236        init_params.access_addr = 0xA541A68F;
000172  482f              LDR      r0,|L1.560|
000174  9000              STR      r0,[sp,#0]
;;;237        init_params.adv_int_ms = 100;
000176  2064              MOVS     r0,#0x64
000178  9002              STR      r0,[sp,#8]
;;;238        init_params.channel = 38;
00017a  2126              MOVS     r1,#0x26
00017c  4668              MOV      r0,sp
00017e  7101              STRB     r1,[r0,#4]
;;;239        init_params.handle_count = 2;
000180  2102              MOVS     r1,#2
000182  7141              STRB     r1,[r0,#5]
;;;240        init_params.packet_format = RBC_MESH_PACKET_FORMAT_ORIGINAL;
000184  2100              MOVS     r1,#0
000186  7341              STRB     r1,[r0,#0xd]
;;;241        init_params.radio_mode = RBC_MESH_RADIO_MODE_BLE_1MBIT;
000188  2103              MOVS     r1,#3
00018a  7301              STRB     r1,[r0,#0xc]
;;;242        
;;;243        uint32_t error_code;
;;;244        error_code = rbc_mesh_init(init_params);
00018c  4668              MOV      r0,sp
00018e  c80f              LDM      r0,{r0-r3}
000190  f7fffffe          BL       rbc_mesh_init
000194  4604              MOV      r4,r0
;;;245        APP_ERROR_CHECK(error_code);
000196  bf00              NOP      
000198  4625              MOV      r5,r4
00019a  2d00              CMP      r5,#0
00019c  d005              BEQ      |L1.426|
00019e  bf00              NOP      
0001a0  2200              MOVS     r2,#0
0001a2  4611              MOV      r1,r2
0001a4  4628              MOV      r0,r5
0001a6  f7fffffe          BL       app_error_handler
                  |L1.426|
0001aa  bf00              NOP      
;;;246        
;;;247        /* request values for both LEDs on the mesh */
;;;248        error_code = rbc_mesh_value_enable(1);
0001ac  2001              MOVS     r0,#1
0001ae  f7fffffe          BL       rbc_mesh_value_enable
0001b2  4604              MOV      r4,r0
;;;249        APP_ERROR_CHECK(error_code);
0001b4  bf00              NOP      
0001b6  4625              MOV      r5,r4
0001b8  2d00              CMP      r5,#0
0001ba  d005              BEQ      |L1.456|
0001bc  bf00              NOP      
0001be  2200              MOVS     r2,#0
0001c0  4611              MOV      r1,r2
0001c2  4628              MOV      r0,r5
0001c4  f7fffffe          BL       app_error_handler
                  |L1.456|
0001c8  bf00              NOP      
;;;250        error_code = rbc_mesh_value_enable(2);
0001ca  2002              MOVS     r0,#2
0001cc  f7fffffe          BL       rbc_mesh_value_enable
0001d0  4604              MOV      r4,r0
;;;251        APP_ERROR_CHECK(error_code);
0001d2  bf00              NOP      
0001d4  4625              MOV      r5,r4
0001d6  2d00              CMP      r5,#0
0001d8  d005              BEQ      |L1.486|
0001da  bf00              NOP      
0001dc  2200              MOVS     r2,#0
0001de  4611              MOV      r1,r2
0001e0  4628              MOV      r0,r5
0001e2  f7fffffe          BL       app_error_handler
                  |L1.486|
0001e6  bf00              NOP      
;;;252        
;;;253        
;;;254        /* init BLE gateway softdevice application: */
;;;255        nrf_adv_conn_init();
0001e8  f7fffffe          BL       nrf_adv_conn_init
;;;256        
;;;257    #endif
;;;258        NRF_GPIO->OUTCLR = (1 << 4);
0001ec  2010              MOVS     r0,#0x10
0001ee  490a              LDR      r1,|L1.536|
0001f0  60c8              STR      r0,[r1,#0xc]
;;;259        
;;;260    #ifndef BUTTONS
;;;261        /* sleep */
;;;262        while (true)
0001f2  e001              B        |L1.504|
                  |L1.500|
;;;263        {
;;;264            //sd_app_evt_wait();
;;;265    			#ifndef HAS_HORN_LAMP
;;;266    				Input_Cyclic_Process();
0001f4  f7fffffe          BL       Input_Cyclic_Process
                  |L1.504|
0001f8  e7fc              B        |L1.500|
;;;267    			#endif
;;;268        }
;;;269        
;;;270    #else
;;;271        uint8_t mesh_data[16] = {0,0};
;;;272        while (true)
;;;273        {
;;;274            // red off
;;;275            if(nrf_gpio_pin_read(BUTTON_1) == 0)
;;;276            {
;;;277                while(nrf_gpio_pin_read(BUTTON_1) == 0);
;;;278                mesh_data[0] = 0;
;;;279                rbc_mesh_value_set(1, mesh_data, 1);
;;;280                led_config(1, 0);
;;;281            }
;;;282            // red on
;;;283            if(nrf_gpio_pin_read(BUTTON_2) == 0)
;;;284            {
;;;285                while(nrf_gpio_pin_read(BUTTON_2) == 0);
;;;286                mesh_data[0] = 1;
;;;287                rbc_mesh_value_set(1, mesh_data, 1);
;;;288                led_config(1, 1);
;;;289            }
;;;290            // green off 
;;;291            if(nrf_gpio_pin_read(BUTTON_3) == 0)
;;;292            {
;;;293                while(nrf_gpio_pin_read(BUTTON_3) == 0);
;;;294                mesh_data[0] = 0;
;;;295                rbc_mesh_value_set(2, mesh_data, 1);
;;;296                led_config(2, 0);
;;;297            }
;;;298            // green on
;;;299             if(nrf_gpio_pin_read(BUTTON_4) == 0)
;;;300            {
;;;301                while(nrf_gpio_pin_read(BUTTON_4) == 0);
;;;302                mesh_data[0] = 1;
;;;303                rbc_mesh_value_set(2, mesh_data, 1);
;;;304                led_config(2, 1);
;;;305            }
;;;306        }   
;;;307    #endif    
;;;308    
;;;309    }
;;;310    
                          ENDP

                  nrf_gpio_pin_set PROC
;;;454    
;;;455    __STATIC_INLINE void nrf_gpio_pin_set(uint32_t pin_number)
0001fa  2101              MOVS     r1,#1
;;;456    {
;;;457        NRF_GPIO->OUTSET = (1UL << pin_number);
0001fc  4081              LSLS     r1,r1,r0
0001fe  4a06              LDR      r2,|L1.536|
000200  6091              STR      r1,[r2,#8]
;;;458    }
000202  4770              BX       lr
;;;459    
                          ENDP

                  nrf_gpio_pin_clear PROC
;;;460    __STATIC_INLINE void nrf_gpio_pin_clear(uint32_t pin_number)
000204  2101              MOVS     r1,#1
;;;461    {
;;;462        NRF_GPIO->OUTCLR = (1UL << pin_number);
000206  4081              LSLS     r1,r1,r0
000208  4a03              LDR      r2,|L1.536|
00020a  60d1              STR      r1,[r2,#0xc]
;;;463    }
00020c  4770              BX       lr
;;;464    
                          ENDP

00020e  0000              DCW      0x0000
                  |L1.528|
                          DCD      0x05fa0004
                  |L1.532|
                          DCD      0xe000ed00
                  |L1.536|
                          DCD      0x50000500
                  |L1.540|
00021c  23573200          DCB      "#W2",0
                  |L1.544|
                          DCD      Old_status
                  |L1.548|
                          DCD      0x40000540
                  |L1.552|
                          DCD      sd_evt_handler
                  |L1.556|
                          DCD      BLE_EVT_BUFFER
                  |L1.560|
                          DCD      0xa541a68f

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  BLE_EVT_BUFFER
                          %        72

                          AREA ||.data||, DATA, ALIGN=0

                  warning_flag
000000  00                DCB      0x00
                  Old_status
000001  00                DCB      0x00

;*** Start embedded assembler ***

#line 1 "..\\main.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___6_main_c_7015792b____REV16|
#line 129 "..\\..\\..\\..\\..\\..\\components\\toolchain\\gcc\\core_cmInstr.h"
|__asm___6_main_c_7015792b____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___6_main_c_7015792b____REVSH|
#line 144
|__asm___6_main_c_7015792b____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***

                  __ARM_use_no_argv EQU 0
